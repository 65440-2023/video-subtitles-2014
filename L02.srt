1
0-1:59:36,500 --> 0-1:59:36,580

2
0-1:59:36,580 --> 0-1:59:38,930
The following content is
provided under a Creative

3
0-1:59:38,930 --> 0-1:59:40,320
Commons license.

4
0-1:59:40,320 --> 0-1:59:42,560
Your support will help
MIT OpenCourseWare

5
0-1:59:42,560 --> 0-1:59:46,650
continue to offer high quality
educational resources for free.

6
0-1:59:46,650 --> 0-1:59:49,190
To make a donation or to
view additional materials

7
0-1:59:49,190 --> 0-1:59:53,100
from hundreds of MIT courses,
visit MIT OpenCourseWare

8
0-1:59:53,100 --> 0-1:59:53,805
at ocw.mit.edu.

9
0-1:59:53,805 --> 00:00:02,134

10
00:00:02,134 --> 00:00:03,550
PROFESSOR: All
right, are you guys

11
00:00:03,550 --> 00:00:06,990
ready for some more
hardness proofs?

12
00:00:06,990 --> 00:00:09,270
Let's do it.

13
00:00:09,270 --> 00:00:12,755
So today, we start the
universe of 3-partition.

14
00:00:12,755 --> 00:00:15,280

15
00:00:15,280 --> 00:00:20,610
And in general, we're
going to see today

16
00:00:20,610 --> 00:00:24,890
2 plus problems, which
are useful for dealing

17
00:00:24,890 --> 00:00:34,380
with numbers for reducing
to number problems.

18
00:00:34,380 --> 00:00:42,110
Numbers here are going to be
integers for the most part.

19
00:00:42,110 --> 00:00:43,905
Usually in complexity,
it's a lot easier

20
00:00:43,905 --> 00:00:45,970
to think of all your
numbers being integers.

21
00:00:45,970 --> 00:00:48,220
If they're not integers, use
fixed point or rationals,

22
00:00:48,220 --> 00:00:50,840
and then they're
basically integers.

23
00:00:50,840 --> 00:00:52,230
So we're going to talk.

24
00:00:52,230 --> 00:00:54,290
My favorite is 3-partition.

25
00:00:54,290 --> 00:00:57,770
And pretty much all the proofs
we'll do in the number context

26
00:00:57,770 --> 00:01:00,687
will be reduction
from 3-partition.

27
00:01:00,687 --> 00:01:02,520
This is all about
NP-hardness, I should say.

28
00:01:02,520 --> 00:01:08,340

29
00:01:08,340 --> 00:01:09,914
But before we get
to 3-partition,

30
00:01:09,914 --> 00:01:11,830
I'm going to talk about
another problem, which

31
00:01:11,830 --> 00:01:13,025
is called 2-partition.

32
00:01:13,025 --> 00:01:22,226

33
00:01:22,226 --> 00:01:24,600
First, I'll just have to define
all these problems, which

34
00:01:24,600 --> 00:01:25,641
will take a little while.

35
00:01:25,641 --> 00:01:27,900
Then we'll get to all
the fun reductions.

36
00:01:27,900 --> 00:01:31,045
So in 2-partition,
your given n integers.

37
00:01:31,045 --> 00:01:35,970

38
00:01:35,970 --> 00:01:38,640
We'll call the set
of them capital A

39
00:01:38,640 --> 00:01:43,516
and we'll call the integers
themselves little a sub i--

40
00:01:43,516 --> 00:01:46,759
i from 1 to n, let's say.

41
00:01:46,759 --> 00:01:51,480
And what we'd like to do is
partition them into two groups.

42
00:01:51,480 --> 00:01:55,880

43
00:01:55,880 --> 00:02:04,000
Let's say A_1 and A_2
equals A of equal sum.

44
00:02:04,000 --> 00:02:10,210

45
00:02:10,210 --> 00:02:12,350
We want the sum of
the integers in A_1

46
00:02:12,350 --> 00:02:15,370
to equal the sum of
the integers in A_2.

47
00:02:15,370 --> 00:02:20,320
And therefore, they will
equal one half the total sum.

48
00:02:20,320 --> 00:02:23,470
OK, so we just want to find
our choice for each number.

49
00:02:23,470 --> 00:02:25,810
Should it go in A_1 or A_2?

50
00:02:25,810 --> 00:02:28,220
So this problem is NP-hard.

51
00:02:28,220 --> 00:02:31,150
And it's one of the
original Karp problems.

52
00:02:31,150 --> 00:02:34,902
There's this famous
paper by Karp in 1972.

53
00:02:34,902 --> 00:02:36,485
Before that, there
was a paper by Cook

54
00:02:36,485 --> 00:02:38,720
that proved SAT is NP-complete.

55
00:02:38,720 --> 00:02:42,490
And then Karp wrote a paper
with a zillion-- not literally,

56
00:02:42,490 --> 00:02:46,620
but dozens of NP-hardness
proofs from SAT

57
00:02:46,620 --> 00:02:47,947
to things like 2-partition.

58
00:02:47,947 --> 00:02:49,280
I will not cover the proof here.

59
00:02:49,280 --> 00:02:51,460
If you're interested in
it, read Garey and Johnson.

60
00:02:51,460 --> 00:02:55,130
There's some nice coverage
of this problem and all

61
00:02:55,130 --> 00:02:58,250
the problems we'll be
talking about today.

62
00:02:58,250 --> 00:02:59,120
OK.

63
00:02:59,120 --> 00:03:07,310
As a sideline, I'll mention
there is a generalization

64
00:03:07,310 --> 00:03:09,060
of this problem.

65
00:03:09,060 --> 00:03:10,310
So it's also NP-hard.

66
00:03:10,310 --> 00:03:14,110
Any generalization is
going to be even harder.

67
00:03:14,110 --> 00:03:15,360
But it's useful to know about.

68
00:03:15,360 --> 00:03:16,560
It's called subset sum.

69
00:03:16,560 --> 00:03:19,120
Occasionally it's
easier to think

70
00:03:19,120 --> 00:03:20,800
about subset sum
instead of partition,

71
00:03:20,800 --> 00:03:22,180
although it's a generalization.

72
00:03:22,180 --> 00:03:23,990
So if you can reduce
from subset sum,

73
00:03:23,990 --> 00:03:26,640
you can also reduce
from partition.

74
00:03:26,640 --> 00:03:29,760
And here the set up is similar.

75
00:03:29,760 --> 00:03:33,800
You're given n integers
again, just like before.

76
00:03:33,800 --> 00:03:36,840

77
00:03:36,840 --> 00:03:38,460
And you're given a target sum.

78
00:03:38,460 --> 00:03:40,900
This is one other integer.

79
00:03:40,900 --> 00:03:42,705
We'll call the target sum t.

80
00:03:42,705 --> 00:03:45,790
I'll also call this t.

81
00:03:45,790 --> 00:03:54,040
And what we'd like to do is find
a subset S of A whose sum is t.

82
00:03:54,040 --> 00:04:01,290

83
00:04:01,290 --> 00:04:03,100
OK, this is a strict
generalization here.

84
00:04:03,100 --> 00:04:05,670
You're not given a number
t, but you're essentially

85
00:04:05,670 --> 00:04:12,510
choosing a subset A_1, whose
sum equals the sum of A over 2.

86
00:04:12,510 --> 00:04:14,930
So this is really just a
particular choice of t.

87
00:04:14,930 --> 00:04:17,800
This is the general case
where you're given t.

88
00:04:17,800 --> 00:04:20,262
So this is harder than that.

89
00:04:20,262 --> 00:04:21,470
But it's worth knowing about.

90
00:04:21,470 --> 00:04:24,200
In particular, there's
a problem set problem,

91
00:04:24,200 --> 00:04:26,960
the problem set will be
out in a couple of hours.

92
00:04:26,960 --> 00:04:29,990
And it's a little easier
to think about subset sum,

93
00:04:29,990 --> 00:04:30,520
we think.

94
00:04:30,520 --> 00:04:31,310
You don't have to.

95
00:04:31,310 --> 00:04:34,370

96
00:04:34,370 --> 00:04:40,510
All right, so let's
go to 3-partition,

97
00:04:40,510 --> 00:04:44,170
my favorite NP-complete problem.

98
00:04:44,170 --> 00:04:54,520
So start is the same,
given integers a_1 up to a_n.

99
00:04:54,520 --> 00:04:58,270

100
00:04:58,270 --> 00:05:00,710
We're not given a target sum.

101
00:05:00,710 --> 00:05:03,010
What we'd like to
do is partition

102
00:05:03,010 --> 00:05:10,220
them-- partition that set
A into how many pieces?

103
00:05:10,220 --> 00:05:10,750
AUDIENCE: 3.

104
00:05:10,750 --> 00:05:11,480
PROFESSOR: 3.

105
00:05:11,480 --> 00:05:12,410
Nope.

106
00:05:12,410 --> 00:05:13,130
n over 3.

107
00:05:13,130 --> 00:05:16,480

108
00:05:16,480 --> 00:05:18,880
Kind of like 3.

109
00:05:18,880 --> 00:05:20,760
Not quite.

110
00:05:20,760 --> 00:05:29,180
Let's say sets A_1, ...,
A_(n/3) equals

111
00:05:29,180 --> 00:05:33,240
A. I'm using union with a dot
to indicate it's disjoint union.

112
00:05:33,240 --> 00:05:35,560
So that's what a
partition means.

113
00:05:35,560 --> 00:05:36,299
That's redundant.

114
00:05:36,299 --> 00:05:37,590
This is old fashioned notation.

115
00:05:37,590 --> 00:05:39,950
You probably haven't seen it,
but when I was growing up,

116
00:05:39,950 --> 00:05:43,130
that was the
notation of the day.

117
00:05:43,130 --> 00:05:49,720
Then we have n over 3 sets.

118
00:05:49,720 --> 00:05:51,770
Cool, yeah, assume
n is divisible by 3.

119
00:05:51,770 --> 00:05:53,030
Otherwise the answer is no.

120
00:05:53,030 --> 00:05:55,660

121
00:05:55,660 --> 00:05:59,430
And then this is the
easy case of equal sum.

122
00:05:59,430 --> 00:06:03,760

123
00:06:03,760 --> 00:06:09,310
So we want the sum of
each A_i to be equal to t,

124
00:06:09,310 --> 00:06:11,910
which is to the same thing.

125
00:06:11,910 --> 00:06:15,250
They're just going to be the sum
of the A's divided by n over 3.

126
00:06:15,250 --> 00:06:18,030

127
00:06:18,030 --> 00:06:21,080
OK, if this problem were
about partitioning to 3 sets,

128
00:06:21,080 --> 00:06:23,080
it would not be
very interesting.

129
00:06:23,080 --> 00:06:25,450
It would be basically
identical to 2-partition.

130
00:06:25,450 --> 00:06:28,030
With n over 3 sets, things
are quite a bit different.

131
00:06:28,030 --> 00:06:31,500
And we will get to that
difference in a moment.

132
00:06:31,500 --> 00:06:34,380
But first, let me tell
you about some fun

133
00:06:34,380 --> 00:06:37,232
facts about 3-partition.

134
00:06:37,232 --> 00:06:38,940
So we're partitioning
into n over 3 sets,

135
00:06:38,940 --> 00:06:41,180
so you would expect, on
average, most of these sets

136
00:06:41,180 --> 00:06:42,890
will have size 3.

137
00:06:42,890 --> 00:06:46,060
In fact, you could make all
the sets have size exactly 3,

138
00:06:46,060 --> 00:06:50,560
because if you look at the
reduction for this problem,

139
00:06:50,560 --> 00:07:04,480
you can assume that each a_i
is strictly between t over 4

140
00:07:04,480 --> 00:07:07,540
and t over 2.

141
00:07:07,540 --> 00:07:09,890
OK, if you're going to
have a set of numbers

142
00:07:09,890 --> 00:07:13,780
that's summed to exactly
t and each of them

143
00:07:13,780 --> 00:07:15,450
is strictly bigger
than t over 4,

144
00:07:15,450 --> 00:07:17,120
then that means you
can't have 4 of them

145
00:07:17,120 --> 00:07:18,730
because you would
sum to too much.

146
00:07:18,730 --> 00:07:20,799
And they're strictly
less than t over 2.

147
00:07:20,799 --> 00:07:23,090
And you can't just have 2 of
them and hope to get to t.

148
00:07:23,090 --> 00:07:25,600
So you have to have
exactly 3 in every set.

149
00:07:25,600 --> 00:07:32,681

150
00:07:32,681 --> 00:07:33,930
You don't have to assume that.

151
00:07:33,930 --> 00:07:36,206
In some situations, it's
useful to just say, well,

152
00:07:36,206 --> 00:07:38,330
the A_i's are sets that
sum to the right things.

153
00:07:38,330 --> 00:07:40,860
Sometimes it useful to
assume that they're triples.

154
00:07:40,860 --> 00:07:42,740
It's up to you
whether you consider

155
00:07:42,740 --> 00:07:44,490
that part of the
problem statement,

156
00:07:44,490 --> 00:07:46,920
to ask for the A_i's
to have size 3 or not.

157
00:07:46,920 --> 00:07:49,270
And it's useful to have both.

158
00:07:49,270 --> 00:07:52,520
In fact, once you
have this, you can

159
00:07:52,520 --> 00:07:54,220
make all the a_i's
very, very close

160
00:07:54,220 --> 00:07:58,980
to t over 3 using a trick,
which we'll see a bunch of times

161
00:07:58,980 --> 00:08:00,450
today.

162
00:08:00,450 --> 00:08:08,320
So let's say you could add--
I'll call it infinity--

163
00:08:08,320 --> 00:08:09,130
to each a_i.

164
00:08:09,130 --> 00:08:12,240

165
00:08:12,240 --> 00:08:15,799
In that case, of course, any
solution that you had before

166
00:08:15,799 --> 00:08:18,490
is still a solution.

167
00:08:18,490 --> 00:08:21,710
Just think of infinity
is a really large number,

168
00:08:21,710 --> 00:08:25,200
something like n
to the 100 times

169
00:08:25,200 --> 00:08:29,970
maximum item in A.
Something like that.

170
00:08:29,970 --> 00:08:32,765
That's really maybe to the
100th power, if you want,

171
00:08:32,765 --> 00:08:35,110
but a really big number.

172
00:08:35,110 --> 00:08:36,600
This will preserve
all solutions,

173
00:08:36,600 --> 00:08:39,305
because all solutions, every
set has size exactly 3.

174
00:08:39,305 --> 00:08:40,930
So if you had 3 times
infinity, they'll

175
00:08:40,930 --> 00:08:42,510
still have the same sums.

176
00:08:42,510 --> 00:08:44,660
And when you do that,
then all the a_i's

177
00:08:44,660 --> 00:08:46,740
are basically equal
to each other,

178
00:08:46,740 --> 00:08:49,880
which means they're
roughly equal to t over 3.

179
00:08:49,880 --> 00:08:52,442
The leading term is
the same for everybody.

180
00:08:52,442 --> 00:08:53,900
And then there's
this little noise,

181
00:08:53,900 --> 00:08:58,270
which was the original integer
that you're adding onto,

182
00:08:58,270 --> 00:09:01,100
that infinity.

183
00:09:01,100 --> 00:09:03,560
So then all the adds
are roughly t over 3.

184
00:09:03,560 --> 00:09:06,270
Cool.

185
00:09:06,270 --> 00:09:08,590
Let me tell you about a
couple related problems

186
00:09:08,590 --> 00:09:09,215
to 3-partition.

187
00:09:09,215 --> 00:09:12,480
And then I'll tell
you why we're even

188
00:09:12,480 --> 00:09:16,540
bothering to talk about two
problems instead of just one.

189
00:09:16,540 --> 00:09:30,810

190
00:09:30,810 --> 00:09:33,970
So next problem has a funny
name, especially when you don't

191
00:09:33,970 --> 00:09:35,470
know what 3-dimensional
matching is,

192
00:09:35,470 --> 00:09:37,180
but we will get to that second.

193
00:09:37,180 --> 00:09:39,570
Don't worry about the
name for the moment.

194
00:09:39,570 --> 00:09:42,300
This is a closely
related problem.

195
00:09:42,300 --> 00:09:45,785
It's really a specialization
of 3-partition.

196
00:09:45,785 --> 00:09:54,336

197
00:09:54,336 --> 00:09:56,710
In this case, we're going to
be given 3 sets of integers.

198
00:09:56,710 --> 00:10:04,550

199
00:10:04,550 --> 00:10:07,220
And what we'd like to
do is-- it's basically

200
00:10:07,220 --> 00:10:08,090
the same problem.

201
00:10:08,090 --> 00:10:09,715
Just think of taking
the union of those

202
00:10:09,715 --> 00:10:13,310
sets, but each of these
sets that we're choosing,

203
00:10:13,310 --> 00:10:16,290
the A_i's, should consist of
one element from A, one element

204
00:10:16,290 --> 00:10:18,570
from B, one element from c.

205
00:10:18,570 --> 00:10:21,214
So how did I formalize that?

206
00:10:21,214 --> 00:10:22,130
Let's say a partition.

207
00:10:22,130 --> 00:10:29,720

208
00:10:29,720 --> 00:10:44,540
This is a disjoint union into
triples, S_i, and cross product

209
00:10:44,540 --> 00:10:46,120
ABC.

210
00:10:46,120 --> 00:10:49,840
So you're choosing one from
each of these guys in each S_i,

211
00:10:49,840 --> 00:10:51,180
and they should be of equal sum.

212
00:10:51,180 --> 00:10:56,950

213
00:10:56,950 --> 00:11:02,720
And so the sum will be sum of A
plus the sum of B plus sum of C

214
00:11:02,720 --> 00:11:08,380
divided by n , I think,
because there's 3 of them.

215
00:11:08,380 --> 00:11:11,220

216
00:11:11,220 --> 00:11:12,440
Cool.

217
00:11:12,440 --> 00:11:14,220
OK, so almost the
same problem, I just

218
00:11:14,220 --> 00:11:16,270
changed what n was
by a factor of 3.

219
00:11:16,270 --> 00:11:20,590
That's why there's n over
3 here and then here.

220
00:11:20,590 --> 00:11:23,480
But here, we're
specializing in a sense

221
00:11:23,480 --> 00:11:28,060
to say that we're giving
different types of numbers--

222
00:11:28,060 --> 00:11:29,680
the red integers,
the green integers,

223
00:11:29,680 --> 00:11:30,596
and the blue integers.

224
00:11:30,596 --> 00:11:33,290
You have to choose
one of each color.

225
00:11:33,290 --> 00:11:42,950
OK, for fun, let me show you why
this problem is, in some sense,

226
00:11:42,950 --> 00:11:43,450
simpler.

227
00:11:43,450 --> 00:11:53,590

228
00:11:53,590 --> 00:11:56,170
This also gives you
a useful technique

229
00:11:56,170 --> 00:11:58,630
for playing with
these number problems.

230
00:11:58,630 --> 00:12:01,804
So I want to reduce from
this numerical 3-dimensional

231
00:12:01,804 --> 00:12:03,595
matching problem, which
you might also call

232
00:12:03,595 --> 00:12:06,240
the ABC version of 3-partition.

233
00:12:06,240 --> 00:12:08,430
I will reduce it to 3-partition.

234
00:12:08,430 --> 00:12:13,294
So I'm given an
instance, these numbers.

235
00:12:13,294 --> 00:12:15,710
So the basic idea is to take
these numbers just throw them

236
00:12:15,710 --> 00:12:18,370
into one big set, A prime.

237
00:12:18,370 --> 00:12:20,910
But I want to force
this ABC property

238
00:12:20,910 --> 00:12:23,670
that I choose one from each.

239
00:12:23,670 --> 00:12:24,800
Maybe any suggestions how?

240
00:12:24,800 --> 00:12:25,300
Yeah.

241
00:12:25,300 --> 00:12:27,122
AUDIENCE: Well, I
just have a question.

242
00:12:27,122 --> 00:12:28,330
You define these all as sets.

243
00:12:28,330 --> 00:12:30,114
You can't have
duplicates of an integer?

244
00:12:30,114 --> 00:12:31,655
PROFESSOR: I didn't
say the word set.

245
00:12:31,655 --> 00:12:34,490
I actually meant multiset.

246
00:12:34,490 --> 00:12:37,690
Yeah, so this is a multiset.

247
00:12:37,690 --> 00:12:40,630
Good question.

248
00:12:40,630 --> 00:12:42,171
All of them are multisets.

249
00:12:42,171 --> 00:12:44,420
So it makes the notion of
disunion a little bit weird.

250
00:12:44,420 --> 00:12:47,600
But you know what I mean.

251
00:12:47,600 --> 00:12:48,370
Yeah.

252
00:12:48,370 --> 00:12:50,468
AUDIENCE: Could you add a
really big number to all

253
00:12:50,468 --> 00:12:53,339
the B's and twice that really
big number to all the C's?

254
00:12:53,339 --> 00:12:55,380
PROFESSOR: OK, add a--
hadn't thought about this.

255
00:12:55,380 --> 00:12:57,980
So add a really big number to
all the B's, and then twice

256
00:12:57,980 --> 00:12:59,350
that big number to all the C's.

257
00:12:59,350 --> 00:13:02,180

258
00:13:02,180 --> 00:13:06,300
And then the target sum would
be three times the big number,

259
00:13:06,300 --> 00:13:06,800
plus--

260
00:13:06,800 --> 00:13:09,372
AUDIENCE: I'm sorry, so
make it three instead,

261
00:13:09,372 --> 00:13:11,402
so you can't do three
things from each side.

262
00:13:11,402 --> 00:13:12,360
PROFESSOR: Yeah, right.

263
00:13:12,360 --> 00:13:17,860
So you don't want take two B's
and then that looks like a C.

264
00:13:17,860 --> 00:13:22,660
So maybe you want three
times a big number here

265
00:13:22,660 --> 00:13:26,197
and nine times a
big number here.

266
00:13:26,197 --> 00:13:27,030
Something like that.

267
00:13:27,030 --> 00:13:29,380
I think actually one times
a big number and three

268
00:13:29,380 --> 00:13:30,770
times a big number would do it.

269
00:13:30,770 --> 00:13:32,430
Yeah, cool.

270
00:13:32,430 --> 00:13:35,059
So the way I did it in the
notes was adding a small number,

271
00:13:35,059 --> 00:13:36,100
but either way, it works.

272
00:13:36,100 --> 00:13:39,570
Let's do it with the big
number, because that's fun.

273
00:13:39,570 --> 00:13:45,540

274
00:13:45,540 --> 00:13:51,440
So we will construct, I'll
call it A prime to consist

275
00:13:51,440 --> 00:13:58,510
of a overall little a and big
A. And then we'll say a plus--

276
00:13:58,510 --> 00:14:00,700
usually big number I
write with a capital B,

277
00:14:00,700 --> 00:14:03,075
but that's not very good
because we already have a couple

278
00:14:03,075 --> 00:14:03,710
of B's.

279
00:14:03,710 --> 00:14:08,960
So I'll call it X. Or I
should call it infinity

280
00:14:08,960 --> 00:14:10,800
for consistency.

281
00:14:10,800 --> 00:14:16,180
So for each b and B, I
will add infinity to it.

282
00:14:16,180 --> 00:14:24,671
And then c is going to be is
3 times-- let's do 4 times

283
00:14:24,671 --> 00:14:25,170
infinity.

284
00:14:25,170 --> 00:14:28,310
It makes me feel a
little safer somehow,

285
00:14:28,310 --> 00:14:30,920
because we're constructing
a set of size 3.

286
00:14:30,920 --> 00:14:33,470
So if you take 3 of these,
I worry that looks like a C.

287
00:14:33,470 --> 00:14:36,940
It's not enough,
but we'll be safe.

288
00:14:36,940 --> 00:14:38,070
Why not?

289
00:14:38,070 --> 00:14:41,060
We can choose pretty
big numbers here.

290
00:14:41,060 --> 00:14:44,135
So happy?

291
00:14:44,135 --> 00:14:45,931
No?

292
00:14:45,931 --> 00:14:47,879
AUDIENCE: You might be
able to do a couple A's

293
00:14:47,879 --> 00:14:49,340
in a single set.

294
00:14:49,340 --> 00:14:53,730
The set should be small, because
they're not-- [INAUDIBLE].

295
00:14:53,730 --> 00:14:54,430
PROFESSOR: OK.

296
00:14:54,430 --> 00:14:55,330
a is our problem.

297
00:14:55,330 --> 00:14:58,450
You could maybe do
more than 3 total.

298
00:14:58,450 --> 00:15:05,120
So let's do 1 infinity,
then get a proper eraser.

299
00:15:05,120 --> 00:15:09,470
It's a good thing we have Sarah
here to correct our proofs.

300
00:15:09,470 --> 00:15:14,172
3 infinity 9.

301
00:15:14,172 --> 00:15:16,517
AUDIENCE: I think it's
enough, because then we need--

302
00:15:16,517 --> 00:15:18,600
PROFESSOR: 6 would be bad,
because then 2 of these

303
00:15:18,600 --> 00:15:19,575
would be 1 of those.

304
00:15:19,575 --> 00:15:23,540
AUDIENCE: 13 infinities
on [INAUDIBLE].

305
00:15:23,540 --> 00:15:28,160
PROFESSOR: Right, so this
means the new target sum should

306
00:15:28,160 --> 00:15:33,660
be the old target sum, which
was the sum of these divided

307
00:15:33,660 --> 00:15:37,510
by n, plus 13 infinity.

308
00:15:37,510 --> 00:15:41,257

309
00:15:41,257 --> 00:15:43,580
AUDIENCE: Isn't infinity
a function of the n's?

310
00:15:43,580 --> 00:15:45,810
PROFESSOR: Infinity
I should define.

311
00:15:45,810 --> 00:15:52,587
Let's make it, I think,
just like 10 times max

312
00:15:52,587 --> 00:15:53,420
of A ought to do it.

313
00:15:53,420 --> 00:15:56,130

314
00:15:56,130 --> 00:15:57,895
You could be it as
a function of n.

315
00:15:57,895 --> 00:16:00,395
I don't think that's necessary
here, because all of our sets

316
00:16:00,395 --> 00:16:01,460
are size 3.

317
00:16:01,460 --> 00:16:04,200
But if you're doing something
like this for 2-partition,

318
00:16:04,200 --> 00:16:06,840
you'd want to multiply
by n or n squared.

319
00:16:06,840 --> 00:16:10,610
This is a common trick to
do this kind of scaling

320
00:16:10,610 --> 00:16:12,916
or offsets or things like that.

321
00:16:12,916 --> 00:16:14,290
Instead of infinity
here, you can

322
00:16:14,290 --> 00:16:17,062
write epsilon, where epsilon
is much smaller than 1.

323
00:16:17,062 --> 00:16:18,270
I think that would also work.

324
00:16:18,270 --> 00:16:19,890
And that's what's done in this.

325
00:16:19,890 --> 00:16:21,914
AUDIENCE: So we just
make it the max of the A

326
00:16:21,914 --> 00:16:23,684
as opposed to A prime?

327
00:16:23,684 --> 00:16:25,850
PROFESSOR: Oops, this should
probably be max of ABC.

328
00:16:25,850 --> 00:16:29,580

329
00:16:29,580 --> 00:16:31,910
Yeah, you can't make
it max of A prime.

330
00:16:31,910 --> 00:16:32,810
That would be cyclic.

331
00:16:32,810 --> 00:16:34,520
That infinity would
actually be infinite.

332
00:16:34,520 --> 00:16:37,030

333
00:16:37,030 --> 00:16:37,530
Good.

334
00:16:37,530 --> 00:16:38,910
So I think that works.

335
00:16:38,910 --> 00:16:40,720
There are things to
check here, obviously.

336
00:16:40,720 --> 00:16:42,682
We need to check
that whenever we

337
00:16:42,682 --> 00:16:44,390
have a solution to
the original instance,

338
00:16:44,390 --> 00:16:45,890
we have a solution
to this instance.

339
00:16:45,890 --> 00:16:46,730
That's pretty clear.

340
00:16:46,730 --> 00:16:50,530
You just take the same choices
of the a_i's, b_i's, and c_i's.

341
00:16:50,530 --> 00:16:54,440
And the infinities will
always add up to 13.

342
00:16:54,440 --> 00:16:56,305
The tricky part is
to show that if you

343
00:16:56,305 --> 00:16:58,180
have a solution to this
3-partition instance,

344
00:16:58,180 --> 00:17:01,579
you can convert that back into
a solution to the numerical 3-

345
00:17:01,579 --> 00:17:03,449
dimensional matching instance.

346
00:17:03,449 --> 00:17:04,990
And that's where
you essentially want

347
00:17:04,990 --> 00:17:07,365
to show that the infinities
can be treated algebraically.

348
00:17:07,365 --> 00:17:09,270
Because they're so
huge, you could never

349
00:17:09,270 --> 00:17:10,970
construct an infinity
in another way.

350
00:17:10,970 --> 00:17:13,590

351
00:17:13,590 --> 00:17:16,410
But I'll leave that as an
exercise to actually proof,

352
00:17:16,410 --> 00:17:18,910
because we're not really going
to use this problem too much.

353
00:17:18,910 --> 00:17:20,784
You're welcome to,
maybe on problem sets,

354
00:17:20,784 --> 00:17:22,450
maybe on open problems
it would be good.

355
00:17:22,450 --> 00:17:26,790
But most the time, I would
say we use 3-partition.

356
00:17:26,790 --> 00:17:28,930
I want you to know about
this in particular,

357
00:17:28,930 --> 00:17:31,020
because it's related to
another problem, which is

358
00:17:31,020 --> 00:17:32,270
called 3-dimensional matching.

359
00:17:32,270 --> 00:17:37,050

360
00:17:37,050 --> 00:17:37,720
Yes?

361
00:17:37,720 --> 00:17:40,600
AUDIENCE: Is the
assumption that the A_i

362
00:17:40,600 --> 00:17:43,260
is all a cardinality of 3 built
into the problem specification

363
00:17:43,260 --> 00:17:43,790
here?

364
00:17:43,790 --> 00:17:44,460
PROFESSOR: You get a choice.

365
00:17:44,460 --> 00:17:46,160
You can either make
this part of the problem

366
00:17:46,160 --> 00:17:47,040
specification or not.

367
00:17:47,040 --> 00:17:48,324
It won't matter.

368
00:17:48,324 --> 00:17:49,990
AUDIENCE: OK, well I
think in this case,

369
00:17:49,990 --> 00:17:51,662
if you don't know
the problem specs,

370
00:17:51,662 --> 00:17:54,820
can you take 12
A's for something?

371
00:17:54,820 --> 00:17:57,230
And then you get 12
infinities and then

372
00:17:57,230 --> 00:17:58,700
they add up to another infinity?

373
00:17:58,700 --> 00:18:00,116
PROFESSOR: Yes,
we definitely want

374
00:18:00,116 --> 00:18:02,560
to take this as part
of the specification

375
00:18:02,560 --> 00:18:03,530
for this reduction.

376
00:18:03,530 --> 00:18:04,440
Yeah.

377
00:18:04,440 --> 00:18:04,940
Good point.

378
00:18:04,940 --> 00:18:08,570

379
00:18:08,570 --> 00:18:13,070
OK, so here's a problem.

380
00:18:13,070 --> 00:18:15,940
You've probably heard
of the matching problem.

381
00:18:15,940 --> 00:18:18,650
Let's say the perfect matching
problem is you're given a graph

382
00:18:18,650 --> 00:18:20,980
and you want to find a set
of edges which are disjoint,

383
00:18:20,980 --> 00:18:24,650
meaning no two edges
share a vertex, that

384
00:18:24,650 --> 00:18:25,820
covers all the vertices.

385
00:18:25,820 --> 00:18:27,170
So if you have n
vertices, you'd like

386
00:18:27,170 --> 00:18:29,560
to find n over 2 edges that
are disjoint from each other.

387
00:18:29,560 --> 00:18:30,672
That's perfect matching.

388
00:18:30,672 --> 00:18:32,380
You might call it
2-dimensional matching,

389
00:18:32,380 --> 00:18:34,430
because an edge has 2 ends.

390
00:18:34,430 --> 00:18:37,970
3-dimensional matching takes
place in a hypergraph.

391
00:18:37,970 --> 00:18:44,240
And in this case, it's going
to be a tripartite hypergraph.

392
00:18:44,240 --> 00:18:52,470

393
00:18:52,470 --> 00:18:54,220
You may not have seen
hypergraphs before.

394
00:18:54,220 --> 00:18:55,678
They're just like
graphs, but edges

395
00:18:55,678 --> 00:18:57,180
can have more than 2 endpoints.

396
00:18:57,180 --> 00:19:00,460
In this case, they
will have exactly 3.

397
00:19:00,460 --> 00:19:07,780
So let's say the vertices are
A disjoining in B disjoining

398
00:19:07,780 --> 00:19:12,165
in C. And let's say they
all have like size n.

399
00:19:12,165 --> 00:19:15,690

400
00:19:15,690 --> 00:19:30,270
And the hyperedge is E.

401
00:19:30,270 --> 00:19:33,690
OK, maybe it's worth
drawing a picture.

402
00:19:33,690 --> 00:19:37,320

403
00:19:37,320 --> 00:19:46,070
So you have this set A, set B--
they're all the same size-- set

404
00:19:46,070 --> 00:19:54,350
C. And an edge might look like
this or like this or so on.

405
00:19:54,350 --> 00:19:56,550
OK, you take one from each.

406
00:19:56,550 --> 00:20:05,690
And then your goal is to
find n disjoint edges.

407
00:20:05,690 --> 00:20:09,870

408
00:20:09,870 --> 00:20:11,620
If we find that many
and they're disjoint,

409
00:20:11,620 --> 00:20:14,010
that means they will
cover all of the vertices.

410
00:20:14,010 --> 00:20:17,730
Every vertex will be hit
by exactly one hyperedge.

411
00:20:17,730 --> 00:20:22,350

412
00:20:22,350 --> 00:20:26,370
OK, so this is the 3-dimensional
version of bipartite matching,

413
00:20:26,370 --> 00:20:26,870
I guess.

414
00:20:26,870 --> 00:20:29,290
There's also the
non-bipartite version.

415
00:20:29,290 --> 00:20:32,460
For extra completeness,
there's something

416
00:20:32,460 --> 00:20:40,900
called exact cover by 3 sets,
3 meaning the cardinality.

417
00:20:40,900 --> 00:20:42,560
This is called X3C.

418
00:20:42,560 --> 00:20:45,590
You do see 3DM
and X3C frequently

419
00:20:45,590 --> 00:20:47,860
in the literature and
especially in Garey and Johnson.

420
00:20:47,860 --> 00:20:50,680
So they're good
problems to know about.

421
00:20:50,680 --> 00:20:57,410
Here is sort of the generalized
version, where you're given

422
00:20:57,410 --> 00:21:04,380
non-tripartite, just a
3-uniform hypergraph.

423
00:21:04,380 --> 00:21:07,050
3-uniform just means every
edge has cardinality 3.

424
00:21:07,050 --> 00:21:11,510

425
00:21:11,510 --> 00:21:23,930
And your goal is to find--
let's say it has n vertices--

426
00:21:23,930 --> 00:21:26,700
n over 3 disjoint hyperedges.

427
00:21:26,700 --> 00:21:34,460

428
00:21:34,460 --> 00:21:37,310
OK, many times the
almost same problem.

429
00:21:37,310 --> 00:21:39,130
How do these relate?

430
00:21:39,130 --> 00:21:42,790
Well, certainly if you take
a numerical 3-dimensional

431
00:21:42,790 --> 00:21:45,730
matching problem, that is a
3-dimensional matching problem.

432
00:21:45,730 --> 00:21:48,420
You can convert it
into a graph like this.

433
00:21:48,420 --> 00:21:50,640
You're just forgetting the
fact that there's numbers.

434
00:21:50,640 --> 00:21:52,140
But then when you
draw the edge, you

435
00:21:52,140 --> 00:21:58,140
draw one of these hyperedges
exactly when a_i plus b_i plus c_i

436
00:21:58,140 --> 00:22:00,520
equals the target sum.

437
00:22:00,520 --> 00:22:03,230
So numerical
3-dimensional matching

438
00:22:03,230 --> 00:22:05,395
is a special case of
3-dimensional matching.

439
00:22:05,395 --> 00:22:06,770
Occasionally it's
useful to start

440
00:22:06,770 --> 00:22:07,936
from 3-dimensional matching.

441
00:22:07,936 --> 00:22:09,880
Not for number problems though.

442
00:22:09,880 --> 00:22:14,130
If you have a number problem,
you like the numerical version.

443
00:22:14,130 --> 00:22:18,420
Personally I prefer 3-partition,
but these two are pretty close.

444
00:22:18,420 --> 00:22:21,290
We saw one connection
between them.

445
00:22:21,290 --> 00:22:23,310
Exact cover by 3 sets
is, in some sense,

446
00:22:23,310 --> 00:22:25,835
even more general than
3-dimensional matching.

447
00:22:25,835 --> 00:22:28,850

448
00:22:28,850 --> 00:22:33,170
Yeah, it is more general,
because tripartite hypergraph

449
00:22:33,170 --> 00:22:35,730
like this is 3-uniform.

450
00:22:35,730 --> 00:22:37,910
So this is a strict
generalization of that.

451
00:22:37,910 --> 00:22:40,230
But they all appear
somewhat, so I

452
00:22:40,230 --> 00:22:42,140
thought it'd good for
you to know about them.

453
00:22:42,140 --> 00:22:47,080
Again, 3-partition is
where the action is.

454
00:22:47,080 --> 00:22:50,930
All right, let me go
back to this issue of 2-

455
00:22:50,930 --> 00:22:53,820
partition versus 3-partition.

456
00:22:53,820 --> 00:22:59,200
These are the two main
problems I want to talk about.

457
00:22:59,200 --> 00:23:09,980
And they relate to an important
distinction in NP-hardness,

458
00:23:09,980 --> 00:23:14,470
which is weak versus
strong NP-hardness.

459
00:23:14,470 --> 00:23:19,350
So there are two
types of NP-hardness

460
00:23:19,350 --> 00:23:22,020
for number problems.

461
00:23:22,020 --> 00:23:24,960
If your input is a graph,
these two notions are the same,

462
00:23:24,960 --> 00:23:28,750
so you don't need
to worry about it.

463
00:23:28,750 --> 00:23:33,790
But when your problem
has integers as input,

464
00:23:33,790 --> 00:23:35,050
then there are two types.

465
00:23:35,050 --> 00:23:45,160

466
00:23:45,160 --> 00:23:46,790
Weakly NP-hard
is, in some sense,

467
00:23:46,790 --> 00:23:49,010
the type you
already know, if you

468
00:23:49,010 --> 00:23:52,920
think about it in the right
way, in the intended way.

469
00:23:52,920 --> 00:23:54,660
We haven't been super
formal about how

470
00:23:54,660 --> 00:24:03,180
numbers getting encoded, but
usually we think of NP-hardness

471
00:24:03,180 --> 00:24:08,760
in terms of how
hard your problem is

472
00:24:08,760 --> 00:24:11,070
in terms of the encoding
size, which we usually call

473
00:24:11,070 --> 00:24:14,000
n, the encoding of your input.

474
00:24:14,000 --> 00:24:19,180
OK, so in the usual
form, what this means

475
00:24:19,180 --> 00:24:32,620
is that you allow numbers
to have exponential value,

476
00:24:32,620 --> 00:24:34,640
because even when their
value is exponential,

477
00:24:34,640 --> 00:24:37,220
the encoding of that
value is polynomial.

478
00:24:37,220 --> 00:24:42,780

479
00:24:42,780 --> 00:24:46,550
Coding length of such a number
is, if you read it in binary,

480
00:24:46,550 --> 00:24:49,840
that's log base 2 of the number
if the number is 2 to the n

481
00:24:49,840 --> 00:24:52,290
to the c, which is our
definition of exponential.

482
00:24:52,290 --> 00:24:54,239
That's going to be n to the c.

483
00:24:54,239 --> 00:24:55,155
And that's polynomial.

484
00:24:55,155 --> 00:24:59,620

485
00:24:59,620 --> 00:25:02,830
OK, for here, I'm
going to let n be

486
00:25:02,830 --> 00:25:08,320
the number of numbers to
avoid circular definitions

487
00:25:08,320 --> 00:25:09,150
or something.

488
00:25:09,150 --> 00:25:11,010
So I'm saying there are
n different numbers.

489
00:25:11,010 --> 00:25:14,260
If each of them is at most
2 to the n to the c in value

490
00:25:14,260 --> 00:25:16,930
and they're integers, then I can
encode them in this many bits.

491
00:25:16,930 --> 00:25:18,890
And that's a polynomial
number of bits.

492
00:25:18,890 --> 00:25:23,420
So I consider that a
reasonable encoding.

493
00:25:23,420 --> 00:25:26,130
And sometimes that's just fine.

494
00:25:26,130 --> 00:25:27,950
But there's a
stronger notion, which

495
00:25:27,950 --> 00:25:30,720
is really useful, especially
for a lot of problems

496
00:25:30,720 --> 00:25:35,530
we will see today
and next class, which

497
00:25:35,530 --> 00:25:37,980
is called strongly NP-hard.

498
00:25:37,980 --> 00:25:55,240
And this is NP-hard even when
your problem is restricted

499
00:25:55,240 --> 00:25:59,600
to numbers of polynomial value.

500
00:25:59,600 --> 00:26:04,360

501
00:26:04,360 --> 00:26:07,945
So polynomial here
is with respect to n

502
00:26:07,945 --> 00:26:11,840
and is the number of
integers-- number of numbers.

503
00:26:11,840 --> 00:26:16,610
OK, so strongly NP-hard is
stronger than weakly NP-hard.

504
00:26:16,610 --> 00:26:19,200
If you're NP-hard even
when your numbers are

505
00:26:19,200 --> 00:26:21,010
only polynomial in
size, then of course

506
00:26:21,010 --> 00:26:22,660
your NP-hard when
you allow the numbers

507
00:26:22,660 --> 00:26:24,200
to be as large as exponential.

508
00:26:24,200 --> 00:26:27,950
This is a weaker
constraint on the problem.

509
00:26:27,950 --> 00:26:32,710
So to cut to the chase,
2-partition up here

510
00:26:32,710 --> 00:26:34,890
and subset sum are
weakly NP-hard.

511
00:26:34,890 --> 00:26:38,630

512
00:26:38,630 --> 00:26:42,310
And if you believe that
the P does not equal NP,

513
00:26:42,310 --> 00:26:44,580
then it's not strongly NP-hard.

514
00:26:44,580 --> 00:26:47,450
That's the best we can
hope for, whereas 3-

515
00:26:47,450 --> 00:26:49,980
partition in every other
problem we talked about

516
00:26:49,980 --> 00:26:50,940
is strongly NP-hard.

517
00:26:50,940 --> 00:27:00,008

518
00:27:00,008 --> 00:27:01,174
AUDIENCE: I have a question.

519
00:27:01,174 --> 00:27:03,604
What do you mean
exactly by numbers

520
00:27:03,604 --> 00:27:06,520
having exponential value?

521
00:27:06,520 --> 00:27:11,060
PROFESSOR: So again, exponential
is like 2 to the n to the c. n

522
00:27:11,060 --> 00:27:13,070
is the number of
numbers in your input.

523
00:27:13,070 --> 00:27:13,649
AUDIENCE: OK.

524
00:27:13,649 --> 00:27:14,315
PROFESSOR: Yeah.

525
00:27:14,315 --> 00:27:18,179
So that's what I allow.

526
00:27:18,179 --> 00:27:20,470
I mean, this is what would
be allowed if you didn't say

527
00:27:20,470 --> 00:27:23,580
anything, if you interpret
complexity theory in a way

528
00:27:23,580 --> 00:27:25,170
that I haven't
necessarily told you,

529
00:27:25,170 --> 00:27:28,150
but generally you want to
assume that all your inputs are

530
00:27:28,150 --> 00:27:30,180
reasonably encoded
in an efficient way

531
00:27:30,180 --> 00:27:34,600
that most possible input
strings are valid inputs.

532
00:27:34,600 --> 00:27:36,946
And so if you're encoding,
then in particular,

533
00:27:36,946 --> 00:27:38,320
you should encode
your numbers in

534
00:27:38,320 --> 00:27:43,460
binary or ternary or quaternary
or hexadecimal-- anything

535
00:27:43,460 --> 00:27:45,490
bigger than one is good.

536
00:27:45,490 --> 00:27:45,990
OK?

537
00:27:45,990 --> 00:27:47,531
And you should know
if you're writing

538
00:27:47,531 --> 00:27:48,950
that number, don't use unary.

539
00:27:48,950 --> 00:27:52,500
But today we're going
to use unary a lot.

540
00:27:52,500 --> 00:27:56,920
So this is the same thing
as saying encode in unary.

541
00:27:56,920 --> 00:28:01,510
Strong NP-hardness
is like saying, well,

542
00:28:01,510 --> 00:28:04,710
my problem is so
hard that even if I

543
00:28:04,710 --> 00:28:07,810
encode my numbers in unary,
it's still hard in the resulting

544
00:28:07,810 --> 00:28:08,990
input size.

545
00:28:08,990 --> 00:28:10,790
The input size would
be if you write down

546
00:28:10,790 --> 00:28:14,370
every number in unary and
add up all the numbers.

547
00:28:14,370 --> 00:28:16,220
That's your input size.

548
00:28:16,220 --> 00:28:18,510
3-partition is that hard.

549
00:28:18,510 --> 00:28:20,990
2-partition is not.

550
00:28:20,990 --> 00:28:21,490
OK?

551
00:28:21,490 --> 00:28:24,360
So if you can prove strong
NP-hardness, you should.

552
00:28:24,360 --> 00:28:25,616
It's better.

553
00:28:25,616 --> 00:28:27,970
If you can only prove
weak NP-hardness, it's OK.

554
00:28:27,970 --> 00:28:30,660
It's still hard.

555
00:28:30,660 --> 00:28:34,130
Now you should know, there
are corresponding notions

556
00:28:34,130 --> 00:28:36,080
on the algorithm side.

557
00:28:36,080 --> 00:28:39,880
So let's talk about
that a little bit.

558
00:28:39,880 --> 00:28:42,450
So corresponding algorithms
are-- there are actually

559
00:28:42,450 --> 00:28:44,260
three of them.

560
00:28:44,260 --> 00:28:46,840
The main ones are
pseudopolynomial

561
00:28:46,840 --> 00:28:48,605
and weakly polynomial.

562
00:28:48,605 --> 00:28:49,230
Sorry.

563
00:28:49,230 --> 00:28:53,050
The weaklies are unrelated to
each other, but that's life.

564
00:28:53,050 --> 00:28:59,010

565
00:28:59,010 --> 00:29:02,490
There's also a notion called
strongly polynomial-- unrelated

566
00:29:02,490 --> 00:29:04,436
to strongly NP-hard.

567
00:29:04,436 --> 00:29:05,942
Well, there you go.

568
00:29:05,942 --> 00:29:16,410

569
00:29:16,410 --> 00:29:16,910
OK.

570
00:29:16,910 --> 00:29:19,430

571
00:29:19,430 --> 00:29:23,190
So weakly polynomial is the
usual notion of polynomial

572
00:29:23,190 --> 00:29:24,540
I should mention.

573
00:29:24,540 --> 00:29:27,310
When I say I have a polynomial
time algorithm, what you mean

574
00:29:27,310 --> 00:29:31,625
is weakly, meaning
that, let's say,

575
00:29:31,625 --> 00:29:37,010
I'll write it as polynomial in
n-- the number of integers--

576
00:29:37,010 --> 00:29:45,210
and let's say, log of
the largest integer--

577
00:29:45,210 --> 00:29:47,971
largest number in the input.

578
00:29:47,971 --> 00:29:48,470
OK?

579
00:29:48,470 --> 00:29:50,370
That's a reasonable
encoding size.

580
00:29:50,370 --> 00:29:52,230
You write them in binary.

581
00:29:52,230 --> 00:29:53,364
You add them all up.

582
00:29:53,364 --> 00:29:55,030
So you'd multiply
that by n or whatever.

583
00:29:55,030 --> 00:29:59,230
And the polynomial in that
value is weakly polynomial.

584
00:29:59,230 --> 00:30:02,578
Pseudopolynomial
you omit the log.

585
00:30:02,578 --> 00:30:03,078
OK.

586
00:30:03,078 --> 00:30:06,370
So I want polynomial on
n and the largest number.

587
00:30:06,370 --> 00:30:12,730

588
00:30:12,730 --> 00:30:15,460
And strongly polynomial, you
omit that term altogether.

589
00:30:15,460 --> 00:30:19,770
So you just polynomial
n the number of numbers.

590
00:30:19,770 --> 00:30:20,270
OK?

591
00:30:20,270 --> 00:30:22,686
So there's a different world
of algorithms which we're not

592
00:30:22,686 --> 00:30:24,500
going to talk about
here, which is weakly

593
00:30:24,500 --> 00:30:27,020
polynomial algorithms versus
strongly polynomial algorithms.

594
00:30:27,020 --> 00:30:28,895
I'm not aware of any
lower bounds about that,

595
00:30:28,895 --> 00:30:30,650
but there are famous
open questions like,

596
00:30:30,650 --> 00:30:34,200
can you solve linear programming
in strongly polynomial time?

597
00:30:34,200 --> 00:30:35,245
We don't know.

598
00:30:35,245 --> 00:30:36,620
There's no hardness
notion there.

599
00:30:36,620 --> 00:30:40,080
So we're not going to talk
about it any more than that.

600
00:30:40,080 --> 00:30:41,970
What we care about more
is this distinction

601
00:30:41,970 --> 00:30:43,500
between pseudopolynomial.

602
00:30:43,500 --> 00:30:46,670
This is polynomial when the
numbers are written in unary,

603
00:30:46,670 --> 00:30:49,540
and this polynomial when the
numbers are written in binary.

604
00:30:49,540 --> 00:30:53,450
So these two notions correspond
to these two notions.

605
00:30:53,450 --> 00:30:57,530
So in particular, if you
believe P does not equal NP,

606
00:30:57,530 --> 00:31:00,140
then weakly NP-hard
means there is

607
00:31:00,140 --> 00:31:04,320
no weakly polynomial algorithm.

608
00:31:04,320 --> 00:31:07,390
But there might be a
pseudopolynomial algorithm.

609
00:31:07,390 --> 00:31:10,630
Strongly NP-hard means there's
no M polynomial algorithm,

610
00:31:10,630 --> 00:31:13,390
and so therefore there's no
weakly polynomial algorithm.

611
00:31:13,390 --> 00:31:13,890
Adam.

612
00:31:13,890 --> 00:31:16,098
AUDIENCE: So the difference
between weakly polynomial

613
00:31:16,098 --> 00:31:19,760
and strongly polynomial is that
we don't even necessarily give

614
00:31:19,760 --> 00:31:24,234
ourselves time to read all the
numbers and put it in binary?

615
00:31:24,234 --> 00:31:26,400
PROFESSOR: I didn't want
to get too much into models

616
00:31:26,400 --> 00:31:28,233
of computation, but the
model of computation

617
00:31:28,233 --> 00:31:32,680
here is that you're allowed to
read an entire number in one

618
00:31:32,680 --> 00:31:33,190
time step.

619
00:31:33,190 --> 00:31:35,970
So if you've taken 6.851:
Advanced Data Structures,

620
00:31:35,970 --> 00:31:38,430
this is like a word RAM.

621
00:31:38,430 --> 00:31:40,867
So that's the only reason
this would be reasonable.

622
00:31:40,867 --> 00:31:42,450
Otherwise you couldn't
read the input.

623
00:31:42,450 --> 00:31:43,850
That would be pretty hard.

624
00:31:43,850 --> 00:31:46,984
So the model is you could
take a constant number

625
00:31:46,984 --> 00:31:48,650
of your numbers, do
something with them,

626
00:31:48,650 --> 00:31:50,340
output another number
of the same type

627
00:31:50,340 --> 00:31:52,140
roughly in constant time.

628
00:31:52,140 --> 00:31:55,280
And you want to do a polynomial
number of such steps, usually

629
00:31:55,280 --> 00:31:57,770
arithmetic operations.

630
00:31:57,770 --> 00:32:00,950
Here you don't have to be
so careful about the model

631
00:32:00,950 --> 00:32:04,230
because any reasonable
encoding, you

632
00:32:04,230 --> 00:32:06,209
could read it and do
whatever you want with it.

633
00:32:06,209 --> 00:32:08,500
If you don't care about the
exponent in the polynomial,

634
00:32:08,500 --> 00:32:10,090
like all models are equivalent.

635
00:32:10,090 --> 00:32:13,452
If you believe the Strong
Church-Turing Thesis-- anyway.

636
00:32:13,452 --> 00:32:15,160
This one you have to
be a little bit more

637
00:32:15,160 --> 00:32:18,010
careful what the model is.

638
00:32:18,010 --> 00:32:18,510
Good.

639
00:32:18,510 --> 00:32:22,380
So let me draw my
favorite diagram

640
00:32:22,380 --> 00:32:23,440
with the difficulty axis.

641
00:32:23,440 --> 00:32:27,540

642
00:32:27,540 --> 00:32:30,060
But now instead of P,
I'm going to distinguish

643
00:32:30,060 --> 00:32:32,680
between weakly polynomial,
pseudopolynomial,

644
00:32:32,680 --> 00:32:34,470
and strongly polynomial.

645
00:32:34,470 --> 00:32:38,190
So these things are pseudopoly.

646
00:32:38,190 --> 00:32:41,780

647
00:32:41,780 --> 00:32:44,390
These things are weakly poly.

648
00:32:44,390 --> 00:32:49,390

649
00:32:49,390 --> 00:32:53,440
And these things
are strongly poly.

650
00:32:53,440 --> 00:32:55,230
This is on the
algorithm side, upper

651
00:32:55,230 --> 00:32:59,660
bounds-- be on the left of
the particular position.

652
00:32:59,660 --> 00:33:06,570
And then on the hardness side
we have-- let me use red.

653
00:33:06,570 --> 00:33:09,550
It's more dramatic.

654
00:33:09,550 --> 00:33:12,880
This thing is weakly NP-hard.

655
00:33:12,880 --> 00:33:17,540

656
00:33:17,540 --> 00:33:23,040
This is if P does
not equal NP then

657
00:33:23,040 --> 00:33:25,100
you're strictly to the
right of pseudopoly.

658
00:33:25,100 --> 00:33:26,795
So there's no
pseudopoly problem.

659
00:33:26,795 --> 00:33:29,410
There's also weakly NP-hard.

660
00:33:29,410 --> 00:33:34,060
And then strongly
NP-hard excludes

661
00:33:34,060 --> 00:33:42,150
even a weakly polynomial
algorithm, so strictly

662
00:33:42,150 --> 00:33:44,259
to the right of that position.

663
00:33:44,259 --> 00:33:46,300
So obviously, strongly
NP-hard is a better result

664
00:33:46,300 --> 00:33:47,850
because it's smaller
than this class.

665
00:33:47,850 --> 00:33:50,510

666
00:33:50,510 --> 00:33:54,520
But for example, 2-partition,
which is only weakly NP-hard,

667
00:33:54,520 --> 00:33:56,350
has a pseudopolynomial
algorithm.

668
00:33:56,350 --> 00:33:58,805
You've probably even seen
one in your algorithms class

669
00:33:58,805 --> 00:34:01,560
if you've ever done
anything like Knapsack

670
00:34:01,560 --> 00:34:03,790
as a dynamic program.

671
00:34:03,790 --> 00:34:07,016
That is a dynamic program
probably originally done

672
00:34:07,016 --> 00:34:07,765
for a 2-partition.

673
00:34:07,765 --> 00:34:16,460

674
00:34:16,460 --> 00:34:16,960
OK.

675
00:34:16,960 --> 00:34:20,494
So that problem is
somewhere right in here.

676
00:34:20,494 --> 00:34:23,060

677
00:34:23,060 --> 00:34:26,110
Weakly NP-hard-- whoops.

678
00:34:26,110 --> 00:34:28,228
AUDIENCE: I think the
diagram that's is backward,

679
00:34:28,228 --> 00:34:28,769
but I don't--

680
00:34:28,769 --> 00:34:28,896
AUDIENCE: Yeah.

681
00:34:28,896 --> 00:34:29,389
Diagram is--

682
00:34:29,389 --> 00:34:30,805
AUDIENCE: If a
problem is strongly

683
00:34:30,805 --> 00:34:33,159
polynomial it ends [INAUDIBLE]
a weakly polynomial.

684
00:34:33,159 --> 00:34:35,970
PROFESSOR: So the
middle one's right.

685
00:34:35,970 --> 00:34:37,570
Thank you.

686
00:34:37,570 --> 00:34:39,210
That seemed funny.

687
00:34:39,210 --> 00:34:42,210
But strongly polynomial
is this tightest class.

688
00:34:42,210 --> 00:34:43,680
That's the best result.

689
00:34:43,680 --> 00:34:47,170
And pseudopoly is
the worst result.

690
00:34:47,170 --> 00:34:50,908
Did I get my arrows
in the right place?

691
00:34:50,908 --> 00:34:53,300
AUDIENCE: You've
got to shift over.

692
00:34:53,300 --> 00:34:56,540
PROFESSOR: Shift over one.

693
00:34:56,540 --> 00:34:58,960
Strongly NP-hard.

694
00:34:58,960 --> 00:34:59,460
Whoops.

695
00:34:59,460 --> 00:35:04,860

696
00:35:04,860 --> 00:35:06,720
So weakly NP-hard is here.

697
00:35:06,720 --> 00:35:09,280
Strongly NP-hard is there.

698
00:35:09,280 --> 00:35:11,780
OK.

699
00:35:11,780 --> 00:35:12,610
Cool.

700
00:35:12,610 --> 00:35:14,780
So let's check.

701
00:35:14,780 --> 00:35:17,360
So 2-partition
should be pseudopoly,

702
00:35:17,360 --> 00:35:20,339
so left of this line,
but weakly NP-hard still

703
00:35:20,339 --> 00:35:21,130
right of that line.

704
00:35:21,130 --> 00:35:22,632
That looks good.

705
00:35:22,632 --> 00:35:25,710
So this is 2-partition.

706
00:35:25,710 --> 00:35:27,230
3-partition is out here.

707
00:35:27,230 --> 00:35:31,405

708
00:35:31,405 --> 00:35:33,690
I mean, I'd draw
this is a region,

709
00:35:33,690 --> 00:35:36,490
but it's more like a
point in my old diagram

710
00:35:36,490 --> 00:35:38,590
because 3-partitions
are actually E and NP.

711
00:35:38,590 --> 00:35:40,950
So it's strongly NP-complete.

712
00:35:40,950 --> 00:35:42,680
So it's like right
at the edge there.

713
00:35:42,680 --> 00:35:45,590
Anyway, there's no
pseudopolynomial algorithm

714
00:35:45,590 --> 00:35:47,820
for 3-partition,
unlike 2-partition.

715
00:35:47,820 --> 00:35:50,350
That's the point of all that.

716
00:35:50,350 --> 00:35:50,960
Let's do some.

717
00:35:50,960 --> 00:35:53,200
Shall we?

718
00:35:53,200 --> 00:35:55,900
NP-hardcore time.

719
00:35:55,900 --> 00:35:59,175
So that'll be over here.

720
00:35:59,175 --> 00:36:10,530

721
00:36:10,530 --> 00:36:11,030
OK.

722
00:36:11,030 --> 00:36:12,841
The first reduction is
going to be pretty--

723
00:36:12,841 --> 00:36:14,296
AUDIENCE: May I ask a
question before we move on?

724
00:36:14,296 --> 00:36:14,962
PROFESSOR: Yeah.

725
00:36:14,962 --> 00:36:17,710
AUDIENCE: So why is there
a no corresponding notion

726
00:36:17,710 --> 00:36:19,730
for problems are not numeric?

727
00:36:19,730 --> 00:36:22,347
Like why can't for a
graph problem we say,

728
00:36:22,347 --> 00:36:24,680
well, we're going to examine
this graph problem assuming

729
00:36:24,680 --> 00:36:27,010
we're using an inefficient
encoding of our graph

730
00:36:27,010 --> 00:36:29,220
to see how hard it is?

731
00:36:29,220 --> 00:36:31,650
PROFESSOR: I guess you could
try to define this in terms

732
00:36:31,650 --> 00:36:33,108
for graphs, but I
don't think there

733
00:36:33,108 --> 00:36:36,987
is such an obvious
inefficient notion of graphs.

734
00:36:36,987 --> 00:36:38,570
I mean, the obvious
inefficient notion

735
00:36:38,570 --> 00:36:41,320
is like use a matrix instead
of an adjacency list.

736
00:36:41,320 --> 00:36:42,780
But that's polynomially
equivalent.

737
00:36:42,780 --> 00:36:46,450
So I mean there certainly
are other notions

738
00:36:46,450 --> 00:36:52,361
you could imagine, but there
aren't any in the literature.

739
00:36:52,361 --> 00:36:53,970
All right.

740
00:36:53,970 --> 00:36:55,890
So just to warn you, the
first reduction we do

741
00:36:55,890 --> 00:36:57,850
is going to be a
little bit trivial.

742
00:36:57,850 --> 00:37:00,800
So don't get too excited yet.

743
00:37:00,800 --> 00:37:03,760
But this is where
3-partition comes from.

744
00:37:03,760 --> 00:37:08,500
Then we'll do lots of cool ones.

745
00:37:08,500 --> 00:37:11,850
So multiprocessor scheduling.

746
00:37:11,850 --> 00:37:19,570
Let's say I have n jobs, and
they have completion times.

747
00:37:19,570 --> 00:37:21,059
And that's it.

748
00:37:21,059 --> 00:37:22,600
You can start them
whenever you want.

749
00:37:22,600 --> 00:37:26,174

750
00:37:26,174 --> 00:37:27,590
And then on the
other hand, I have

751
00:37:27,590 --> 00:37:31,240
p processors to run those jobs.

752
00:37:31,240 --> 00:37:34,400
Each processor is
sequential and identical.

753
00:37:34,400 --> 00:37:36,780
So the model is you
assign jobs to processors.

754
00:37:36,780 --> 00:37:38,692
Job can only be
on one processor,

755
00:37:38,692 --> 00:37:39,775
and it runs to completion.

756
00:37:39,775 --> 00:37:42,270
Then it can run
another job, and so on.

757
00:37:42,270 --> 00:37:46,670
My goal-- I'll state
the decision version--

758
00:37:46,670 --> 00:37:56,735
is to finish all jobs in
time less than or equal to t.

759
00:37:56,735 --> 00:37:59,560

760
00:37:59,560 --> 00:38:00,060
OK?

761
00:38:00,060 --> 00:38:05,350
So I claim this problem is
NP-hard of some variety.

762
00:38:05,350 --> 00:38:12,330
Let's start with a
reduction from partition.

763
00:38:12,330 --> 00:38:17,450

764
00:38:17,450 --> 00:38:18,790
Sorry.

765
00:38:18,790 --> 00:38:21,900
Partition is a synonym
for 2-partition.

766
00:38:21,900 --> 00:38:23,010
Usually we omit the two.

767
00:38:23,010 --> 00:38:26,190

768
00:38:26,190 --> 00:38:30,110
So reduction from partition.

769
00:38:30,110 --> 00:38:31,660
This problem over here.

770
00:38:31,660 --> 00:38:33,740
So now I'm given some integers.

771
00:38:33,740 --> 00:38:36,640
I want to split them
in half basically.

772
00:38:36,640 --> 00:38:38,340
Any suggestions
on what I could do

773
00:38:38,340 --> 00:38:40,380
to turn that into a
multiprocessor scheduling

774
00:38:40,380 --> 00:38:41,732
problem?

775
00:38:41,732 --> 00:38:43,507
AUDIENCE: Two processors.

776
00:38:43,507 --> 00:38:44,590
PROFESSOR: Two processors.

777
00:38:44,590 --> 00:38:45,620
Yeah.

778
00:38:45,620 --> 00:38:46,790
p equals 2.

779
00:38:46,790 --> 00:38:48,380
That is the reduction.

780
00:38:48,380 --> 00:38:51,110
I guess, technically, I also
have to specify what t is,

781
00:38:51,110 --> 00:38:52,420
but it's over there.

782
00:38:52,420 --> 00:38:56,900
So you set t to be the
sum of the A's over 2.

783
00:38:56,900 --> 00:38:59,320
And you don't change A.
You just leave it alone.

784
00:38:59,320 --> 00:39:02,150
So you just feed in the same
A i's into this problem.

785
00:39:02,150 --> 00:39:04,031
And that is 2-partition.

786
00:39:04,031 --> 00:39:04,530
OK.

787
00:39:04,530 --> 00:39:06,300
Let's do a reduction
from-- so now we

788
00:39:06,300 --> 00:39:08,820
know the problem is at
least weakly NP-hard,

789
00:39:08,820 --> 00:39:11,590
but in fact, it is strongly
NP-hard, because we

790
00:39:11,590 --> 00:39:13,200
can reduce from 3-partition.

791
00:39:13,200 --> 00:39:16,240
What do you do?

792
00:39:16,240 --> 00:39:17,901
AUDIENCE: P equals n over 3.

793
00:39:17,901 --> 00:39:20,750
PROFESSOR: P equals n over 3.

794
00:39:20,750 --> 00:39:21,820
That's it.

795
00:39:21,820 --> 00:39:23,240
You set t accordingly.

796
00:39:23,240 --> 00:39:26,730
Sum of the A's over p.

797
00:39:26,730 --> 00:39:28,240
Done.

798
00:39:28,240 --> 00:39:28,980
OK.

799
00:39:28,980 --> 00:39:31,945
So this problem
comes from the paper

800
00:39:31,945 --> 00:39:33,540
that introduces
3-partition, which

801
00:39:33,540 --> 00:39:36,550
is by Gary and Johnson, the
same people who wrote the book.

802
00:39:36,550 --> 00:39:39,919
So, I mean, this
basically is 3-partition.

803
00:39:39,919 --> 00:39:41,210
That's why they cared about it.

804
00:39:41,210 --> 00:39:43,232
But here's a practical
motivation for it.

805
00:39:43,232 --> 00:39:46,470

806
00:39:46,470 --> 00:39:48,020
Cool.

807
00:39:48,020 --> 00:39:49,629
Let's do something
more interesting.

808
00:39:49,629 --> 00:39:50,920
And I kind of want a projector.

809
00:39:50,920 --> 00:39:59,780

810
00:39:59,780 --> 00:40:02,750
Any questions about--
I think you've

811
00:40:02,750 --> 00:40:05,810
asked enough questions
about pseudopoly,

812
00:40:05,810 --> 00:40:08,710
weakly poly, strongly
poly, as I erase them.

813
00:40:08,710 --> 00:40:09,460
Don't forget them.

814
00:40:09,460 --> 00:40:12,210

815
00:40:12,210 --> 00:40:14,090
But I think for
the rest of today

816
00:40:14,090 --> 00:40:17,710
we're just going to be doing
strong polynomial reductions

817
00:40:17,710 --> 00:40:19,465
from 3-partition.

818
00:40:19,465 --> 00:40:21,700
I think next class we
might do some weak ones,

819
00:40:21,700 --> 00:40:26,070
but today we're going
to really use the fact

820
00:40:26,070 --> 00:40:27,850
that it-- use the strongness.

821
00:40:27,850 --> 00:40:29,700
And you'll see why,
because we really

822
00:40:29,700 --> 00:40:32,431
want to encode some
numbers in unary.

823
00:40:32,431 --> 00:40:32,930
OK.

824
00:40:32,930 --> 00:40:37,630
Let's start with a
problem-- rectangle packing.

825
00:40:37,630 --> 00:40:40,150
And this is going to lead us
to a whole bunch of other types

826
00:40:40,150 --> 00:40:41,870
of packing problems.

827
00:40:41,870 --> 00:40:43,920
So this is what you might
call packing rectangles

828
00:40:43,920 --> 00:40:45,500
into a rectangle.

829
00:40:45,500 --> 00:40:54,860
So I'm given n rectangles, and
I'm given a target rectangle.

830
00:40:54,860 --> 00:41:00,289

831
00:41:00,289 --> 00:41:02,580
So when I say I'm given a
rectangle, what I really mean

832
00:41:02,580 --> 00:41:04,670
is I'm given the dimensions--
the width and the height--

833
00:41:04,670 --> 00:41:05,231
as integers.

834
00:41:05,231 --> 00:41:07,730
We are usually going to assume
all our numbers are integers,

835
00:41:07,730 --> 00:41:08,320
as I said.

836
00:41:08,320 --> 00:41:11,470

837
00:41:11,470 --> 00:41:12,010
Do they fit?

838
00:41:12,010 --> 00:41:15,150

839
00:41:15,150 --> 00:41:20,310
So what I'd like, in a solution,
is to rotate and translate

840
00:41:20,310 --> 00:41:22,620
the given rectangles
so that they're

841
00:41:22,620 --> 00:41:24,870
disjointed from each
other, they can't overlap,

842
00:41:24,870 --> 00:41:27,590
and they all fit inside
the target rectangle.

843
00:41:27,590 --> 00:41:28,090
All right.

844
00:41:28,090 --> 00:41:31,280
So this might be the
target rectangle.

845
00:41:31,280 --> 00:41:32,740
And then, I don't
know, maybe this

846
00:41:32,740 --> 00:41:36,280
is my set of rectangles
appropriately packed.

847
00:41:36,280 --> 00:41:41,310

848
00:41:41,310 --> 00:41:42,690
So here maybe the answer is yes.

849
00:41:42,690 --> 00:41:44,606
If they don't fit inside
the target rectangle,

850
00:41:44,606 --> 00:41:45,760
the answer is no.

851
00:41:45,760 --> 00:41:48,630
This problem is
strongly NP-hard,

852
00:41:48,630 --> 00:41:51,770
but I'm pretty sure we don't
know whether it's E and NP.

853
00:41:51,770 --> 00:41:55,380

854
00:41:55,380 --> 00:41:57,080
So there are lots
of open problems.

855
00:41:57,080 --> 00:42:01,180
I don't mean to indicate
everything is known.

856
00:42:01,180 --> 00:42:03,690
I should double check that
this is definitely not known,

857
00:42:03,690 --> 00:42:05,140
but I'm pretty sure it's open.

858
00:42:05,140 --> 00:42:06,640
Because of this
rotation issue there

859
00:42:06,640 --> 00:42:08,490
are kind of a lot of
things to worry about.

860
00:42:08,490 --> 00:42:09,900
So it's not clear
how efficiently

861
00:42:09,900 --> 00:42:11,502
you can encode a solution.

862
00:42:11,502 --> 00:42:13,210
Maybe you need a ton
of bits of precision

863
00:42:13,210 --> 00:42:14,589
to say how things are rotated.

864
00:42:14,589 --> 00:42:16,380
Here they're all rotated
at the same angle.

865
00:42:16,380 --> 00:42:17,046
They may not be.

866
00:42:17,046 --> 00:42:18,670
Who knows.

867
00:42:18,670 --> 00:42:28,790
So we will consider a special
case, which is exact packing.

868
00:42:28,790 --> 00:42:32,040
This also makes for a
stronger hardness result.

869
00:42:32,040 --> 00:42:35,155
So exact packing means
there are no gaps.

870
00:42:35,155 --> 00:42:38,730

871
00:42:38,730 --> 00:42:41,820
None of this stuff.

872
00:42:41,820 --> 00:42:43,340
That's forbidden.

873
00:42:43,340 --> 00:42:44,900
So if you have no
gaps and you look

874
00:42:44,900 --> 00:42:46,320
at a corner of the
rectangle, that

875
00:42:46,320 --> 00:42:48,403
must mean there is a
rectangle right there filling

876
00:42:48,403 --> 00:42:50,650
the corner, which means
there's no rotation.

877
00:42:50,650 --> 00:42:54,020
Well, you could rotate
by multiples of 90.

878
00:42:54,020 --> 00:42:56,265
But just know there
are four rotations.

879
00:42:56,265 --> 00:43:03,310
Well, I guess two for
rectangles-- integer

880
00:43:03,310 --> 00:43:04,690
times 90 degrees.

881
00:43:04,690 --> 00:43:07,200

882
00:43:07,200 --> 00:43:10,446
So then the problem is an
NP, because also then you

883
00:43:10,446 --> 00:43:11,945
can show at that
point-- because you

884
00:43:11,945 --> 00:43:14,403
have integer rectangles packing
into an integer rectangle--

885
00:43:14,403 --> 00:43:17,460
by induction, the
translations are integers.

886
00:43:17,460 --> 00:43:20,022
Therefore, there are
succinct encodings of them.

887
00:43:20,022 --> 00:43:26,600

888
00:43:26,600 --> 00:43:27,100
OK.

889
00:43:27,100 --> 00:43:29,330
We don't have to do this,
but just to point out,

890
00:43:29,330 --> 00:43:31,950
this is one way to make
the problem in E and NP.

891
00:43:31,950 --> 00:43:34,554
Now they are
assisting solutions.

892
00:43:34,554 --> 00:43:36,470
So we're going to prove
both of these problems

893
00:43:36,470 --> 00:43:37,780
are strongly NP-hard.

894
00:43:37,780 --> 00:43:41,120

895
00:43:41,120 --> 00:43:43,070
I think I'll skip
the weak NP-hardness

896
00:43:43,070 --> 00:43:48,310
proof because it's not really
any harder-- no pun unintended.

897
00:43:48,310 --> 00:43:51,702
So let's go there.

898
00:43:51,702 --> 00:44:07,530

899
00:44:07,530 --> 00:44:11,960
So the basic idea again, we're
reducing from 3-partition.

900
00:44:11,960 --> 00:44:23,440

901
00:44:23,440 --> 00:44:25,280
So that means we're
given, on any instance

902
00:44:25,280 --> 00:44:27,820
of 3-partition, n integers.

903
00:44:27,820 --> 00:44:30,660
We want to represent those
integers as rectangles.

904
00:44:30,660 --> 00:44:33,890
So kind of the obvious way to
do that is we take each a i

905
00:44:33,890 --> 00:44:35,920
and we convert it
into a rectangle.

906
00:44:35,920 --> 00:44:38,580
Let's say it's a i by 1.

907
00:44:38,580 --> 00:44:40,240
That seems pretty obvious.

908
00:44:40,240 --> 00:44:43,340
This is what you might call
the a i gadget, since we're

909
00:44:43,340 --> 00:44:46,280
going to map this feature
of our given instance

910
00:44:46,280 --> 00:44:50,461
to this feature of our
constructed instance.

911
00:44:50,461 --> 00:44:51,960
All that would be
left at this point

912
00:44:51,960 --> 00:44:57,620
is what is the target rectangle,
which I didn't give a name.

913
00:44:57,620 --> 00:45:02,830
So let me call the
target rectangle

914
00:45:02,830 --> 00:45:05,521
B. I think that's what
I used in my notes.

915
00:45:05,521 --> 00:45:06,021
Yep.

916
00:45:06,021 --> 00:45:09,390

917
00:45:09,390 --> 00:45:14,945
So let's say B is going
to be a rectangle.

918
00:45:14,945 --> 00:45:18,720

919
00:45:18,720 --> 00:45:20,912
What is the height
of the rectangle?

920
00:45:20,912 --> 00:45:22,150
AUDIENCE: n over 3.

921
00:45:22,150 --> 00:45:24,910
PROFESSOR: n over 3.

922
00:45:24,910 --> 00:45:25,410
Yes.

923
00:45:25,410 --> 00:45:26,540
Right.

924
00:45:26,540 --> 00:45:28,380
And then the width?

925
00:45:28,380 --> 00:45:31,460
AUDIENCE: The sum
divided by n over 3.

926
00:45:31,460 --> 00:45:33,160
PROFESSOR: The target sum, t.

927
00:45:33,160 --> 00:45:41,221

928
00:45:41,221 --> 00:45:41,720
Cool.

929
00:45:41,720 --> 00:45:48,160
So the intent is that the
rectangles will look something

930
00:45:48,160 --> 00:45:51,250
like this.

931
00:45:51,250 --> 00:45:55,690
And always, however, if I
fit three in here-- or maybe

932
00:45:55,690 --> 00:45:57,660
I could do more
than three, but we

933
00:45:57,660 --> 00:46:00,160
know that won't happen with the
actual 3-partition instances

934
00:46:00,160 --> 00:46:02,480
we get, because we can
assume there are always

935
00:46:02,480 --> 00:46:04,955
three of them-- but anyway,
we're not constraining

936
00:46:04,955 --> 00:46:05,830
there are only three.

937
00:46:05,830 --> 00:46:07,288
You put in however
many rectangles.

938
00:46:07,288 --> 00:46:08,871
Add up to exactly
the target sum.

939
00:46:08,871 --> 00:46:09,370
Boom.

940
00:46:09,370 --> 00:46:11,160
You've got the target sum.

941
00:46:11,160 --> 00:46:13,720
And there's just enough
space for all of them

942
00:46:13,720 --> 00:46:15,150
if you pack them this way.

943
00:46:15,150 --> 00:46:16,106
Question?

944
00:46:16,106 --> 00:46:19,383
AUDIENCE: Shouldn't we
specify that the a i rectangle

945
00:46:19,383 --> 00:46:22,894
is a i times n over 3 plus
1 to make sure that we

946
00:46:22,894 --> 00:46:24,510
can't accidentally rotate them?

947
00:46:24,510 --> 00:46:25,176
PROFESSOR: Yeah.

948
00:46:25,176 --> 00:46:28,570
So part of my confusion in
drawing this-- and I worry--

949
00:46:28,570 --> 00:46:30,970
is you could take one of these
rectangles and rotate it.

950
00:46:30,970 --> 00:46:33,060
And then this
reduction is wrong.

951
00:46:33,060 --> 00:46:35,420
So this reduction is wrong.

952
00:46:35,420 --> 00:46:39,630
So I will cheat and
make this epsilon,

953
00:46:39,630 --> 00:46:41,520
and then multiply
this by epsilon.

954
00:46:41,520 --> 00:46:43,027
This is one way to fix it.

955
00:46:43,027 --> 00:46:44,860
Of course, now I have
to scale everything up

956
00:46:44,860 --> 00:46:45,630
by 1 over epsilon.

957
00:46:45,630 --> 00:46:47,450
And I have to tell
you what epsilon is.

958
00:46:47,450 --> 00:46:49,075
You were suggesting
some multiple of n,

959
00:46:49,075 --> 00:46:50,820
which is a good suggestion.

960
00:46:50,820 --> 00:46:55,010
I think as long as we make
this much smaller than 1,

961
00:46:55,010 --> 00:46:56,670
then it's not
possible to rotate,

962
00:46:56,670 --> 00:46:59,430
because these guys
are length at least 1,

963
00:46:59,430 --> 00:47:00,550
because they're integers.

964
00:47:00,550 --> 00:47:03,050
So if I tried to rotate, it has
to be a multiple 90 degrees.

965
00:47:03,050 --> 00:47:05,840
So I think as long as this
is strictly less than 1,

966
00:47:05,840 --> 00:47:07,660
we are OK.

967
00:47:07,660 --> 00:47:09,950
I didn't change the
intended solution.

968
00:47:09,950 --> 00:47:12,660
I just made everything narrower.

969
00:47:12,660 --> 00:47:18,530
And so I just need to set
epsilon less than 3 over n.

970
00:47:18,530 --> 00:47:22,240
It would be that inequality.

971
00:47:22,240 --> 00:47:24,840
But I want integers, so I
should scale everything up

972
00:47:24,840 --> 00:47:25,780
by n over 3.

973
00:47:25,780 --> 00:47:30,970
So just multiply all the numbers
by n over 3, and you're done.

974
00:47:30,970 --> 00:47:33,250
In fact, you can be
a little simpler.

975
00:47:33,250 --> 00:47:35,560
And I drew this
diagram long ago,

976
00:47:35,560 --> 00:47:37,045
so I might as well
show it to you.

977
00:47:37,045 --> 00:47:39,850
You can just add n over
3 to all your integers.

978
00:47:39,850 --> 00:47:42,740
That will also work,
under the assumption

979
00:47:42,740 --> 00:47:46,250
that you can only take three
numbers and add them up.

980
00:47:46,250 --> 00:47:49,555
Then you will always be adding
3 times n over 3 horizontally.

981
00:47:49,555 --> 00:47:52,550

982
00:47:52,550 --> 00:47:54,552
So they a i's here
are the yellow part

983
00:47:54,552 --> 00:47:56,010
of these rectangles,
and then we're

984
00:47:56,010 --> 00:47:58,040
just adding this fixed
n over 3 to all of them.

985
00:47:58,040 --> 00:48:03,380
So this is a 4, a 4, a
4, a 4, a 5, 5, 5, 6, 7.

986
00:48:03,380 --> 00:48:05,980
And that happens to
be a positive instance

987
00:48:05,980 --> 00:48:06,610
of 3-partition.

988
00:48:06,610 --> 00:48:08,080
There is a solution.

989
00:48:08,080 --> 00:48:09,860
This is one way to do it.

990
00:48:09,860 --> 00:48:12,130
So we're just adding
n overall here,

991
00:48:12,130 --> 00:48:14,360
because we have
3 times n over 3.

992
00:48:14,360 --> 00:48:21,345
And the length of these
is always smaller.

993
00:48:21,345 --> 00:48:24,580

994
00:48:24,580 --> 00:48:28,840
Rotation should not be possible,
because each of these guys

995
00:48:28,840 --> 00:48:30,910
is going to be length
strictly larger than n

996
00:48:30,910 --> 00:48:32,830
over 3 because we add
an integer to n over

997
00:48:32,830 --> 00:48:36,130
3-- a positive integer-- and
the height here is n over 3.

998
00:48:36,130 --> 00:48:38,560
So that just barely works.

999
00:48:38,560 --> 00:48:40,409
Same thing, more
or less, just this

1000
00:48:40,409 --> 00:48:42,200
is scaling by a
multiplicative factor here.

1001
00:48:42,200 --> 00:48:43,670
We're doing an additive
thing, because we

1002
00:48:43,670 --> 00:48:45,211
have this luxury of
knowing there are

1003
00:48:45,211 --> 00:48:47,500
three items in every triple.

1004
00:48:47,500 --> 00:48:48,350
Cool.

1005
00:48:48,350 --> 00:48:49,150
Rectangle packing.

1006
00:48:49,150 --> 00:48:49,651
Question.

1007
00:48:49,651 --> 00:48:51,608
AUDIENCE: This is a
question about 3-partition.

1008
00:48:51,608 --> 00:48:53,670
Is it assuming that they
are positive integers?

1009
00:48:53,670 --> 00:48:54,370
PROFESSOR: Yes.

1010
00:48:54,370 --> 00:48:55,620
All the integers are positive.

1011
00:48:55,620 --> 00:48:59,230

1012
00:48:59,230 --> 00:49:01,360
You don't have to, but we can.

1013
00:49:01,360 --> 00:49:03,250
So we will.

1014
00:49:03,250 --> 00:49:05,934
Makes our life a lot easier.

1015
00:49:05,934 --> 00:49:06,600
Other questions?

1016
00:49:06,600 --> 00:49:09,410

1017
00:49:09,410 --> 00:49:12,210
OK.

1018
00:49:12,210 --> 00:49:15,050
Time for some puzzles.

1019
00:49:15,050 --> 00:49:19,550
So I think I'll show you
some real life puzzles first.

1020
00:49:19,550 --> 00:49:22,480
There's this notion of
an edge-matching puzzle,

1021
00:49:22,480 --> 00:49:25,100
which goes back to the 1890s.

1022
00:49:25,100 --> 00:49:30,370
I believe this one is from
the late 1890s, early 1900s.

1023
00:49:30,370 --> 00:49:31,800
So it's one of the older ones.

1024
00:49:31,800 --> 00:49:33,925
At least when I was growing
up, we had these puzzle

1025
00:49:33,925 --> 00:49:35,000
all over the place.

1026
00:49:35,000 --> 00:49:38,800
So what's going on here is
you have physical triangles,

1027
00:49:38,800 --> 00:49:43,150
and these half frogs are drawn
on the edges of the triangles.

1028
00:49:43,150 --> 00:49:45,110
And your goal is to pack
all of these triangles

1029
00:49:45,110 --> 00:49:46,500
into the big triangle.

1030
00:49:46,500 --> 00:49:47,130
That's easy.

1031
00:49:47,130 --> 00:49:50,910
It's a regular triangulation.

1032
00:49:50,910 --> 00:49:53,740
But you need to half
frogs to match up.

1033
00:49:53,740 --> 00:49:56,199

1034
00:49:56,199 --> 00:49:56,740
I don't know.

1035
00:49:56,740 --> 00:50:02,630
The hind end of the white-- I'm
sorry-- yellow-speckled frog

1036
00:50:02,630 --> 00:50:07,510
matches the front end of the
yellow-black-speckled frog,

1037
00:50:07,510 --> 00:50:08,710
as drawn here.

1038
00:50:08,710 --> 00:50:12,140
This is a valid solution, but
if I rotated this tile 120

1039
00:50:12,140 --> 00:50:14,870
degrees, it's not
a valid solution

1040
00:50:14,870 --> 00:50:18,350
even though it's all hinds
matching to fronts and so on.

1041
00:50:18,350 --> 00:50:18,950
OK?

1042
00:50:18,950 --> 00:50:20,270
Rules clear?

1043
00:50:20,270 --> 00:50:21,940
So these are
edge-matching puzzles.

1044
00:50:21,940 --> 00:50:23,550
This is formulated
in a different way.

1045
00:50:23,550 --> 00:50:24,758
This is not a valid solution.

1046
00:50:24,758 --> 00:50:27,150
The goal is to get these
colors to all match up.

1047
00:50:27,150 --> 00:50:32,030
So in general, you can think of
there being a color on an edge.

1048
00:50:32,030 --> 00:50:34,520
And here it happens to be
composed of these two colors.

1049
00:50:34,520 --> 00:50:36,395
And it would have to
match both of the colors

1050
00:50:36,395 --> 00:50:37,290
on the other side.

1051
00:50:37,290 --> 00:50:40,074
So it's essentially like
having a color on each edge.

1052
00:50:40,074 --> 00:50:41,740
Here, we also have a
color on each edge,

1053
00:50:41,740 --> 00:50:45,030
but we also have a sign, which
is the front or the hind part

1054
00:50:45,030 --> 00:50:45,940
of the frog.

1055
00:50:45,940 --> 00:50:48,580
There's the yellow frog, the
red frog, the green frog,

1056
00:50:48,580 --> 00:50:50,300
the orange frog.

1057
00:50:50,300 --> 00:50:55,810
So in general, we're
going to formulate this.

1058
00:50:55,810 --> 00:50:57,131
I'll get over here.

1059
00:50:57,131 --> 00:51:05,780

1060
00:51:05,780 --> 00:51:06,280
OK.

1061
00:51:06,280 --> 00:51:11,640
There are many types of these
puzzles I'll try to capture.

1062
00:51:11,640 --> 00:51:13,370
It's not exactly
either one of those.

1063
00:51:13,370 --> 00:51:20,740

1064
00:51:20,740 --> 00:51:23,820
If you've ever studied
something called Wang tiles,

1065
00:51:23,820 --> 00:51:26,310
this is exactly that model.

1066
00:51:26,310 --> 00:51:30,650
So I'll just throw
in the word there.

1067
00:51:30,650 --> 00:51:38,290
But what we have
are n unit squares.

1068
00:51:38,290 --> 00:51:39,415
Those are called the tiles.

1069
00:51:39,415 --> 00:51:43,300

1070
00:51:43,300 --> 00:51:51,240
Each one has four
colors-- a, b, c, d.

1071
00:51:51,240 --> 00:52:06,130
So one per edge.

1072
00:52:06,130 --> 00:52:11,070

1073
00:52:11,070 --> 00:52:17,165
And you are also given
a target rectangle.

1074
00:52:17,165 --> 00:52:19,540
It's going to be integer,
because these are unit squares.

1075
00:52:19,540 --> 00:52:24,190

1076
00:52:24,190 --> 00:52:28,995
And you want to pack-- probably
exactly pack so there are not

1077
00:52:28,995 --> 00:52:37,410
going be any gaps-- the squares
into the rectangle with colors

1078
00:52:37,410 --> 00:52:37,910
matching.

1079
00:52:37,910 --> 00:52:43,880

1080
00:52:43,880 --> 00:52:49,790
So whenever I have two
squares that share an edge,

1081
00:52:49,790 --> 00:52:51,590
the color that's
written here better

1082
00:52:51,590 --> 00:52:53,737
be the same color
that's written there.

1083
00:52:53,737 --> 00:52:54,570
Those are the rules.

1084
00:52:54,570 --> 00:52:57,370
If you're on the
boundary, no restriction.

1085
00:52:57,370 --> 00:53:00,150
But if you're an interior
edge, you restrict in that way.

1086
00:53:00,150 --> 00:53:00,840
OK?

1087
00:53:00,840 --> 00:53:04,000
This actually closely
matches what is currently

1088
00:53:04,000 --> 00:53:06,720
maybe the most famous
edge-matching puzzle called

1089
00:53:06,720 --> 00:53:08,670
Eternity II.

1090
00:53:08,670 --> 00:53:10,250
This one is still unsolved.

1091
00:53:10,250 --> 00:53:12,650
Well, the creator
has a solution.

1092
00:53:12,650 --> 00:53:15,210
And if you ever find it, or one
of the many other solutions--

1093
00:53:15,210 --> 00:53:18,590
who knows-- you
win $2 million US.

1094
00:53:18,590 --> 00:53:19,824
So time to get rich.

1095
00:53:19,824 --> 00:53:20,740
AUDIENCE: [INAUDIBLE].

1096
00:53:20,740 --> 00:53:24,080

1097
00:53:24,080 --> 00:53:25,560
PROFESSOR: Well, yeah.

1098
00:53:25,560 --> 00:53:28,720
I guess that's the way
to make the most money

1099
00:53:28,720 --> 00:53:29,955
is first solve P equals NP.

1100
00:53:29,955 --> 00:53:32,500
And then solve
Eternity II, I guess.

1101
00:53:32,500 --> 00:53:35,800
But you could easily solve this
puzzle without P equals NP.

1102
00:53:35,800 --> 00:53:38,990
There are actually a lot of
almost solutions out there.

1103
00:53:38,990 --> 00:53:42,710
I believe this is
one of the leaders.

1104
00:53:42,710 --> 00:53:47,170
This guy, Louis
Verhaard, got-- so this

1105
00:53:47,170 --> 00:53:49,930
is a complete solution
with all the pieces,

1106
00:53:49,930 --> 00:53:51,130
but not all the edges match.

1107
00:53:51,130 --> 00:53:52,880
So it's hard to find
them, but here's one,

1108
00:53:52,880 --> 00:53:54,554
for example, that mismatches.

1109
00:53:54,554 --> 00:53:56,720
So I didn't explain, but
everything is a square tile

1110
00:53:56,720 --> 00:53:58,636
here, and there's a
different shape and color.

1111
00:53:58,636 --> 00:54:01,370
But it's basically a color from
a mathematical perspective.

1112
00:54:01,370 --> 00:54:02,520
Have to match them all up.

1113
00:54:02,520 --> 00:54:05,750
Here he got 467 matches
out of the 480 edges.

1114
00:54:05,750 --> 00:54:07,990
And that won him
already $10,000.

1115
00:54:07,990 --> 00:54:10,999
And I believe it's found
with a computer-aided search.

1116
00:54:10,999 --> 00:54:11,790
AUDIENCE: Is that--

1117
00:54:11,790 --> 00:54:13,081
AUDIENCE: [INTERPOSING VOICES].

1118
00:54:13,081 --> 00:54:15,536
AUDIENCE: That's
not the person who--

1119
00:54:15,536 --> 00:54:17,420
PROFESSOR: I don't
know for sure.

1120
00:54:17,420 --> 00:54:20,570
I would guess that
it's Louis's daughter.

1121
00:54:20,570 --> 00:54:22,440
Here's a different
almost solution

1122
00:54:22,440 --> 00:54:25,660
where there are some missing
tiles but everything matches.

1123
00:54:25,660 --> 00:54:27,310
And then at the bottom
of his web page,

1124
00:54:27,310 --> 00:54:28,050
you should check it out.

1125
00:54:28,050 --> 00:54:28,550
It's funny.

1126
00:54:28,550 --> 00:54:31,040
It says, "And here is a
solution to Eternity II."

1127
00:54:31,040 --> 00:54:32,610
I looked at this
for a long time,

1128
00:54:32,610 --> 00:54:36,390
and I was like I don't see any
edge matches, but you guys are

1129
00:54:36,390 --> 00:54:38,860
smart, so you
probably know there's

1130
00:54:38,860 --> 00:54:44,235
one other cheat you could
possibly do in this puzzle.

1131
00:54:44,235 --> 00:54:46,199
AUDIENCE: Add Different tiles?

1132
00:54:46,199 --> 00:54:47,490
PROFESSOR: Add different tiles?

1133
00:54:47,490 --> 00:54:48,174
Maybe.

1134
00:54:48,174 --> 00:54:49,840
Although these are
nicely-printed tiles.

1135
00:54:49,840 --> 00:54:55,040
So I would guess he bought two
sets and just mixed some parts.

1136
00:54:55,040 --> 00:54:56,852
I wrote a program to
check yes, indeed,

1137
00:54:56,852 --> 00:54:58,060
some tiles are repeated here.

1138
00:54:58,060 --> 00:54:59,960
I forget exactly how many.

1139
00:54:59,960 --> 00:55:01,560
10 or 20 or something.

1140
00:55:01,560 --> 00:55:03,500
It's still pretty cool.

1141
00:55:03,500 --> 00:55:04,724
It looks like it's done.

1142
00:55:04,724 --> 00:55:05,640
AUDIENCE: [INAUDIBLE].

1143
00:55:05,640 --> 00:55:08,050
PROFESSOR: But there's no
complete actual solution

1144
00:55:08,050 --> 00:55:10,005
using each piece exactly once.

1145
00:55:10,005 --> 00:55:12,490
It's probably clear
here, but you only

1146
00:55:12,490 --> 00:55:16,530
get one version of each square.

1147
00:55:16,530 --> 00:55:17,890
OK.

1148
00:55:17,890 --> 00:55:20,550
So there's your motivation
for solving edge-matching.

1149
00:55:20,550 --> 00:55:24,290
So you might wonder, oh, can
I solve it in polynomial time?

1150
00:55:24,290 --> 00:55:27,060
And the answer is no
unless P equals NP.

1151
00:55:27,060 --> 00:55:32,630
And here we're going to use
essentially rectangle packing

1152
00:55:32,630 --> 00:55:35,290
and this reduction.

1153
00:55:35,290 --> 00:55:37,740
So how could I--
again, we're going

1154
00:55:37,740 --> 00:55:39,360
to reduce from 3-partition.

1155
00:55:39,360 --> 00:55:43,000
How could I convert a
number a i into something

1156
00:55:43,000 --> 00:55:45,640
like a rectangle
using edge-matching?

1157
00:55:45,640 --> 00:55:51,080

1158
00:55:51,080 --> 00:55:54,280
I should probably copy over
the one that we had in the end,

1159
00:55:54,280 --> 00:56:01,359
which was a i goes to
n over 3 plus a i by 1,

1160
00:56:01,359 --> 00:56:02,400
because we want integers.

1161
00:56:02,400 --> 00:56:05,673

1162
00:56:05,673 --> 00:56:06,173
Yeah.

1163
00:56:06,173 --> 00:56:11,063
AUDIENCE: So you make it so
that there is sort of one color,

1164
00:56:11,063 --> 00:56:13,019
and that's for
[INAUDIBLE] most things.

1165
00:56:13,019 --> 00:56:15,382
And that's [INAUDIBLE]
kind of on the outside

1166
00:56:15,382 --> 00:56:16,931
of each rectangle.

1167
00:56:16,931 --> 00:56:18,910
And then put together
each rectangle.

1168
00:56:18,910 --> 00:56:25,370
If you need like-- if the
rectangle is like a i by 1,

1169
00:56:25,370 --> 00:56:28,316
you're going to need a i
squares, such that there's

1170
00:56:28,316 --> 00:56:30,280
like one color for
that rectangle that

1171
00:56:30,280 --> 00:56:34,884
is only used to join the other
squares of that rectangle.

1172
00:56:34,884 --> 00:56:35,550
PROFESSOR: Good.

1173
00:56:35,550 --> 00:56:39,250
So we're going to convert this
something by one rectangle

1174
00:56:39,250 --> 00:56:41,560
into something
different squares.

1175
00:56:41,560 --> 00:56:43,720
And we're just going to
sub-divide like that.

1176
00:56:43,720 --> 00:56:46,840
And we're going to
surround all these edges

1177
00:56:46,840 --> 00:56:48,050
with the same color.

1178
00:56:48,050 --> 00:56:51,440

1179
00:56:51,440 --> 00:56:52,520
That will work.

1180
00:56:52,520 --> 00:56:54,960
AUDIENCE: And the interior
edges [INAUDIBLE].

1181
00:56:54,960 --> 00:56:56,800
PROFESSOR: The interior
edges-- all right.

1182
00:56:56,800 --> 00:56:58,960
So we're going to
take a i, and we're

1183
00:56:58,960 --> 00:57:07,850
going to convert it into-- OK.

1184
00:57:07,850 --> 00:57:12,770
Don't make me draw all of them--
the width here, let's say,

1185
00:57:12,770 --> 00:57:16,605
will be n over 3 plus a i.

1186
00:57:16,605 --> 00:57:18,480
And we're going to use
a special color-- I'll

1187
00:57:18,480 --> 00:57:20,310
call it black-- on the outside.

1188
00:57:20,310 --> 00:57:23,560
And this color I'm
going to call--

1189
00:57:23,560 --> 00:57:29,270
I need some red so it's slightly
visible-- I'm going to call i.

1190
00:57:29,270 --> 00:57:33,160
This is going to be a
different color for each a i.

1191
00:57:33,160 --> 00:57:38,622

1192
00:57:38,622 --> 00:57:40,330
This will require a
little bit more work.

1193
00:57:40,330 --> 00:57:43,430
You could also use a different--
you could use i1, i2, i3--

1194
00:57:43,430 --> 00:57:48,370
but I would really force this
to go together in this way.

1195
00:57:48,370 --> 00:57:50,390
If I'm trying to be
conservative on colors--

1196
00:57:50,390 --> 00:57:54,590
only use n of them-- then
I will put those all i.

1197
00:57:54,590 --> 00:57:57,770
And then as long as none of
these matched to the boundary,

1198
00:57:57,770 --> 00:58:00,360
I'm OK.

1199
00:58:00,360 --> 00:58:02,450
I guess even if I
used the i1, i2, i3,

1200
00:58:02,450 --> 00:58:04,830
it's possible some of
those match the boundary.

1201
00:58:04,830 --> 00:58:06,950
And then weird
stuff could happen.

1202
00:58:06,950 --> 00:58:08,980
But as long as
all these i colors

1203
00:58:08,980 --> 00:58:11,689
match up with each other, you
have to build this rectangle.

1204
00:58:11,689 --> 00:58:14,230
And then we don't care about
how the rectangles are assembled

1205
00:58:14,230 --> 00:58:16,050
with respect to each other.

1206
00:58:16,050 --> 00:58:18,800
So we're basically simulating
this reduction rectangle

1207
00:58:18,800 --> 00:58:20,080
packing.

1208
00:58:20,080 --> 00:58:20,580
OK.

1209
00:58:20,580 --> 00:58:25,020
The one I have drawn here
is slightly different.

1210
00:58:25,020 --> 00:58:26,860
I don't remember why
we did it this way.

1211
00:58:26,860 --> 00:58:31,030
This is [INAUDIBLE] work with
Marty Dumaine, the cameramen.

1212
00:58:31,030 --> 00:58:36,140
And here, just I guess to
be as simple as possible,

1213
00:58:36,140 --> 00:58:39,456
we made the width of each
of the rectangles just a i.

1214
00:58:39,456 --> 00:58:41,670
That has a problem
that you could rotate.

1215
00:58:41,670 --> 00:58:43,740
But to prevent rotation,
we use a different color

1216
00:58:43,740 --> 00:58:44,762
horizontal and vertical.

1217
00:58:44,762 --> 00:58:46,470
So the top edges and
the bottom edges all

1218
00:58:46,470 --> 00:58:48,365
have the colored percent sign.

1219
00:58:48,365 --> 00:58:50,490
I think this is a limitation
of the drawing program

1220
00:58:50,490 --> 00:58:52,220
I was using at
the time actually.

1221
00:58:52,220 --> 00:58:54,670
And dollar signs on the
left and right side.

1222
00:58:54,670 --> 00:58:56,650
And then we're going
to build frame.

1223
00:58:56,650 --> 00:58:59,660
This is what you might call
infrastructure for the proof.

1224
00:58:59,660 --> 00:59:01,450
This is one gadget happens.

1225
00:59:01,450 --> 00:59:02,540
You just execute it once.

1226
00:59:02,540 --> 00:59:04,190
This we execute for
each of the a i's.

1227
00:59:04,190 --> 00:59:07,250
We're just going to have
one copy of this big frame.

1228
00:59:07,250 --> 00:59:11,236
The goal the frame is to hide
the boundary so that none

1229
00:59:11,236 --> 00:59:13,110
of these tiles could
match with the boundary,

1230
00:59:13,110 --> 00:59:14,818
because when they
match the boundary then

1231
00:59:14,818 --> 00:59:16,970
you're breaking a rectangle
in half and bad things

1232
00:59:16,970 --> 00:59:18,690
could happen.

1233
00:59:18,690 --> 00:59:20,180
So instead, what
we're going to do

1234
00:59:20,180 --> 00:59:22,390
is all of these capital
letters on the outside--

1235
00:59:22,390 --> 00:59:25,660
and I ran out of letters and
used a couple of symbols--

1236
00:59:25,660 --> 00:59:28,310
appear exactly once
in the reduction.

1237
00:59:28,310 --> 00:59:29,770
So they can't
match anyone, which

1238
00:59:29,770 --> 00:59:32,170
means they have to
be on the boundary.

1239
00:59:32,170 --> 00:59:35,350
So those guys have to
be on the boundary.

1240
00:59:35,350 --> 00:59:39,570
And then all these other
colors appear exactly twice,

1241
00:59:39,570 --> 00:59:43,690
so you have to join these tiles
together in exactly this way.

1242
00:59:43,690 --> 00:59:45,580
And now the boundary is gone.

1243
00:59:45,580 --> 00:59:48,450
And we have set up dollar
signs on the left side

1244
00:59:48,450 --> 00:59:50,450
and the right side, and
percent signs on the top

1245
00:59:50,450 --> 00:59:52,030
and the bottom sides.

1246
00:59:52,030 --> 00:59:57,440
In reality, these would
be whatever t wide and n

1247
00:59:57,440 --> 00:59:59,810
over 3 tall.

1248
00:59:59,810 --> 01:00:01,840
This is just some
different notation.

1249
01:00:01,840 --> 01:00:03,204
And that's it.

1250
01:00:03,204 --> 01:00:04,870
Now you're simulating
rectangle packing.

1251
01:00:04,870 --> 01:00:05,369
Question?

1252
01:00:05,369 --> 01:00:07,800
AUDIENCE: Why do you need
two rows at the bottom?

1253
01:00:07,800 --> 01:00:10,482
PROFESSOR: So this two rows
is to indicate, for whatever

1254
01:00:10,482 --> 01:00:12,190
reason, because in
edge-matching puzzles,

1255
01:00:12,190 --> 01:00:14,835
usually the target shape is
not a rectangle, but a square.

1256
01:00:14,835 --> 01:00:16,210
And we wanted the
stronger result

1257
01:00:16,210 --> 01:00:18,450
at packing unit
squares into a square

1258
01:00:18,450 --> 01:00:20,960
with edge-matching
results E as NP-hard.

1259
01:00:20,960 --> 01:00:23,190
So the point here is
you just add however

1260
01:00:23,190 --> 01:00:26,050
many rows or columns you
need to make it a square.

1261
01:00:26,050 --> 01:00:26,550
Yep.

1262
01:00:26,550 --> 01:00:27,385
Good question.

1263
01:00:27,385 --> 01:00:27,940
Jason?

1264
01:00:27,940 --> 01:00:30,310
AUDIENCE: So your different
symbols, I believe,

1265
01:00:30,310 --> 01:00:32,995
are also to let you build this
into the rectangle later on.

1266
01:00:32,995 --> 01:00:37,160
Otherwise, you'll run into
issues with rotating things.

1267
01:00:37,160 --> 01:00:38,290
PROFESSOR: We'll get there.

1268
01:00:38,290 --> 01:00:38,790
Yeah.

1269
01:00:38,790 --> 01:00:41,270
So I have different
symbols here and here

1270
01:00:41,270 --> 01:00:42,520
in order to prevent rotation.

1271
01:00:42,520 --> 01:00:43,061
That's right.

1272
01:00:43,061 --> 01:00:44,440
Instead of making them longer.

1273
01:00:44,440 --> 01:00:45,770
I could've, instead,
made these longer

1274
01:00:45,770 --> 01:00:47,311
like we had with
the rectangle thing,

1275
01:00:47,311 --> 01:00:49,309
but I guess, at the
time, I wasn't thinking

1276
01:00:49,309 --> 01:00:50,600
of teaching a class about this.

1277
01:00:50,600 --> 01:00:53,635
So I didn't reuse my previous
reduction for this one.

1278
01:00:53,635 --> 01:00:56,126
But oh, well.

1279
01:00:56,126 --> 01:00:58,550
Yeah.

1280
01:00:58,550 --> 01:01:00,760
But the reason there are
dollar signs in there

1281
01:01:00,760 --> 01:01:06,010
like red or some actual
color is because probably

1282
01:01:06,010 --> 01:01:08,990
black and white printing
was more common then.

1283
01:01:08,990 --> 01:01:11,000
OK.

1284
01:01:11,000 --> 01:01:11,530
Cool.

1285
01:01:11,530 --> 01:01:13,120
That was one puzzle.

1286
01:01:13,120 --> 01:01:15,510
And now key point.

1287
01:01:15,510 --> 01:01:19,060
What if we did this
reduction from partition?

1288
01:01:19,060 --> 01:01:22,090
So with partition, instead
of having n over three groups

1289
01:01:22,090 --> 01:01:24,510
here, we just have two groups?

1290
01:01:24,510 --> 01:01:25,450
And same thing.

1291
01:01:25,450 --> 01:01:27,888
Why not do that?

1292
01:01:27,888 --> 01:01:29,817
AUDIENCE: So that would
be a weakly NP-hard.

1293
01:01:29,817 --> 01:01:31,900
PROFESSOR: That would be
a weak NP-hard reduction.

1294
01:01:31,900 --> 01:01:34,792
Now, this problem here--
edge-matching puzzle,

1295
01:01:34,792 --> 01:01:36,500
n unit squares of four
colors-- are there

1296
01:01:36,500 --> 01:01:39,060
any numbers in this problem?

1297
01:01:39,060 --> 01:01:39,560
AUDIENCE: 4

1298
01:01:39,560 --> 01:01:43,610
PROFESSOR: Other than 4 and n?

1299
01:01:43,610 --> 01:01:45,850
Are there any numbers
that are inputs?

1300
01:01:45,850 --> 01:01:47,752
AUDIENCE: I guess
the colors have

1301
01:01:47,752 --> 01:01:48,960
to be represented as numbers.

1302
01:01:48,960 --> 01:01:50,520
PROFESSOR: The
colors do you have

1303
01:01:50,520 --> 01:01:55,690
to be represented as numbers,
but this is sort of a sideline.

1304
01:01:55,690 --> 01:01:57,820
Usually, when we're
talking about colors,

1305
01:01:57,820 --> 01:02:00,510
all we care about is whether
the colors are equal or not.

1306
01:02:00,510 --> 01:02:03,770
So you don't normally
think of those as numbers.

1307
01:02:03,770 --> 01:02:05,360
You can think of
them as vertices

1308
01:02:05,360 --> 01:02:06,360
in a graph or something.

1309
01:02:06,360 --> 01:02:08,540
I mean, they're more like
combinatorial objects.

1310
01:02:08,540 --> 01:02:11,100
You're never adding
two colors together.

1311
01:02:11,100 --> 01:02:11,864
Yes?

1312
01:02:11,864 --> 01:02:13,256
AUDIENCE: The other
point is that the number

1313
01:02:13,256 --> 01:02:14,756
of different colors
that you can get

1314
01:02:14,756 --> 01:02:16,465
is at most 4 times n
because [INAUDIBLE].

1315
01:02:16,465 --> 01:02:18,672
PROFESSOR: The number of
colors is in most 4 times n.

1316
01:02:18,672 --> 01:02:21,150
Yeah, you could write down
a color as 2 to 2 to the n,

1317
01:02:21,150 --> 01:02:22,820
but why?

1318
01:02:22,820 --> 01:02:24,740
It's supposed to be
an efficient encoding.

1319
01:02:24,740 --> 01:02:26,624
So there are really
no numbers here.

1320
01:02:26,624 --> 01:02:28,790
So it doesn't even make
sense to say this problem is

1321
01:02:28,790 --> 01:02:30,480
strongly NP-hard.

1322
01:02:30,480 --> 01:02:33,270
But even worse, if I
started with 2-partition,

1323
01:02:33,270 --> 01:02:37,180
and I did this reduction exactly
as drawn but not as tall,

1324
01:02:37,180 --> 01:02:42,710
I could still make it a square,
but everything would break.

1325
01:02:42,710 --> 01:02:46,325
Because for 2-partition to
be hard, those numbers--

1326
01:02:46,325 --> 01:02:49,390
the a i's-- have to be
exponential in value.

1327
01:02:49,390 --> 01:02:52,110
If I have an
exponential value a i,

1328
01:02:52,110 --> 01:02:53,850
when I convert it
into a rectangle,

1329
01:02:53,850 --> 01:02:56,760
or actually I convert it
into a bunch of tiles,

1330
01:02:56,760 --> 01:02:59,610
I will have
exponentially many tiles.

1331
01:02:59,610 --> 01:03:02,009
This construction will
be of exponential size.

1332
01:03:02,009 --> 01:03:04,050
So I will get exponentially
many different colors

1333
01:03:04,050 --> 01:03:05,140
on the boundary.

1334
01:03:05,140 --> 01:03:07,014
So that's very bad.

1335
01:03:07,014 --> 01:03:08,430
Even if you're
clever and you say,

1336
01:03:08,430 --> 01:03:10,089
oh, well, these tiles
are all the same,

1337
01:03:10,089 --> 01:03:11,630
so maybe I'll encode
them efficiently

1338
01:03:11,630 --> 01:03:14,349
and say there's an exponentially
many of this one tile.

1339
01:03:14,349 --> 01:03:16,140
The ones in the boundary
are all different.

1340
01:03:16,140 --> 01:03:17,825
So it's not a valid reduction.

1341
01:03:17,825 --> 01:03:19,450
You should always
take a problem that's

1342
01:03:19,450 --> 01:03:21,030
supposed to run
in polynomial time

1343
01:03:21,030 --> 01:03:23,590
and produce a result
of polynomial size.

1344
01:03:23,590 --> 01:03:25,410
So if I start with
something where

1345
01:03:25,410 --> 01:03:27,030
the input is
polynomial size but it

1346
01:03:27,030 --> 01:03:29,500
has exponentially
large a i's, I'd

1347
01:03:29,500 --> 01:03:35,170
get an exponential size puzzle,
which is boring to solve.

1348
01:03:35,170 --> 01:03:36,760
I don't know.

1349
01:03:36,760 --> 01:03:39,090
It's not a valid
NP-hardness reduction.

1350
01:03:39,090 --> 01:03:41,700
This is why we want to
start from 3-partition.

1351
01:03:41,700 --> 01:03:43,940
Because then I know even
if what I'm doing here

1352
01:03:43,940 --> 01:03:45,767
is representing
the a i's in unary.

1353
01:03:45,767 --> 01:03:47,350
I take the a i and
said, OK, I'm going

1354
01:03:47,350 --> 01:03:48,641
to have that many square tiles.

1355
01:03:48,641 --> 01:03:51,220
But that is exactly
unary representation.

1356
01:03:51,220 --> 01:03:54,020
And we know with 3-partition
that will have polynomial size.

1357
01:03:54,020 --> 01:03:55,660
And so we're good.

1358
01:03:55,660 --> 01:03:57,550
This is why we care
about strong NP-hardness

1359
01:03:57,550 --> 01:04:00,050
so much, because a lot
of puzzles you can only

1360
01:04:00,050 --> 01:04:01,607
represent numbers in unary.

1361
01:04:01,607 --> 01:04:03,440
Then you're forced to
work with 3-partition.

1362
01:04:03,440 --> 01:04:06,090

1363
01:04:06,090 --> 01:04:08,180
OK.

1364
01:04:08,180 --> 01:04:12,570
Next puzzle is signed
edge-matching puzzles

1365
01:04:12,570 --> 01:04:13,690
like the lizards.

1366
01:04:13,690 --> 01:04:17,694
Suppose same set up,
but now the colors

1367
01:04:17,694 --> 01:04:18,860
aren't supposed to be equal.

1368
01:04:18,860 --> 01:04:21,210
They're supposed
to be opposites.

1369
01:04:21,210 --> 01:04:23,340
So I'm just going to
modify this diagram,

1370
01:04:23,340 --> 01:04:26,890
and I will use capital letters
to denote tails of lizards,

1371
01:04:26,890 --> 01:04:30,160
and lowercase letters to
represent heads of lizards.

1372
01:04:30,160 --> 01:04:32,060
And little b only
matches capital B.

1373
01:04:32,060 --> 01:04:33,270
It does not match little b.

1374
01:04:33,270 --> 01:04:36,130
You can't put two heads
together or two tails together.

1375
01:04:36,130 --> 01:04:40,380
Well, you can
reduce these things,

1376
01:04:40,380 --> 01:04:42,970
which are called unsigned
edge-matching puzzles,

1377
01:04:42,970 --> 01:04:45,520
to these things,
which are called

1378
01:04:45,520 --> 01:04:51,340
signed edge-matching puzzles,
with this easy gadget.

1379
01:04:51,340 --> 01:04:54,180
If you have a tile
with, let's just say,

1380
01:04:54,180 --> 01:04:55,820
colors ABCD-- some
of them might be

1381
01:04:55,820 --> 01:05:00,060
equal-- I'm going to replace
that one tile with these four

1382
01:05:00,060 --> 01:05:03,370
tiles and scale everything
up by a factor of 2-- scale

1383
01:05:03,370 --> 01:05:05,750
the target shape
by a factor of 2.

1384
01:05:05,750 --> 01:05:12,660
These colors appear exactly once
with each sign, and so again,

1385
01:05:12,660 --> 01:05:15,670
because there's a frame and
all the boundary is eaten up,

1386
01:05:15,670 --> 01:05:18,490
you're forced to match
these guys to each other.

1387
01:05:18,490 --> 01:05:22,420
And therefore you're forced
to make this 2 by 2 tile.

1388
01:05:22,420 --> 01:05:25,230
And so that 2 by
2 tile is supposed

1389
01:05:25,230 --> 01:05:27,360
to represent this 1 by 1 tile.

1390
01:05:27,360 --> 01:05:30,320
And the claim is signs
no longer matter,

1391
01:05:30,320 --> 01:05:33,790
because we put little a, big
A, little b, big B, little c

1392
01:05:33,790 --> 01:05:35,350
big C, and so on.

1393
01:05:35,350 --> 01:05:38,960
So if I took another
tile like over here,

1394
01:05:38,960 --> 01:05:41,510
and it has something
like capital D,

1395
01:05:41,510 --> 01:05:43,690
lowercase d, that's
going to match

1396
01:05:43,690 --> 01:05:47,930
with this lowercase b lowercase
b, if and only if b equals d.

1397
01:05:47,930 --> 01:05:50,650
So if the original
colors are equal,

1398
01:05:50,650 --> 01:05:53,450
the resulting colors will
be equal and opposite.

1399
01:05:53,450 --> 01:05:55,930
So it'll be the same
letter of the alphabet,

1400
01:05:55,930 --> 01:05:59,460
but with opposite signs, and
so everything will match up,

1401
01:05:59,460 --> 01:06:01,689
because this capital
letter match here,

1402
01:06:01,689 --> 01:06:03,480
and this lowercase
letter will match there.

1403
01:06:03,480 --> 01:06:05,390
Is that clear?

1404
01:06:05,390 --> 01:06:07,360
So it really becomes
the same puzzle,

1405
01:06:07,360 --> 01:06:10,510
and this one's going to be
solvable only if this one is.

1406
01:06:10,510 --> 01:06:13,510
So we get strong--
well, just NP-hardness

1407
01:06:13,510 --> 01:06:15,790
of signed edge-matching puzzles.

1408
01:06:15,790 --> 01:06:17,600
Cool.

1409
01:06:17,600 --> 01:06:19,085
Next puzzle.

1410
01:06:19,085 --> 01:06:20,460
These were all on
the same paper.

1411
01:06:20,460 --> 01:06:21,510
It was a fun paper.

1412
01:06:21,510 --> 01:06:22,650
This is even older.

1413
01:06:22,650 --> 01:06:23,377
Jigsaw puzzles.

1414
01:06:23,377 --> 01:06:24,960
This is not the
oldest jigsaw puzzles.

1415
01:06:24,960 --> 01:06:26,700
It's one of the newest.

1416
01:06:26,700 --> 01:06:29,380
It's our course poster
turned into a jigsaw puzzle.

1417
01:06:29,380 --> 01:06:31,630
If you want to make your own
jigsaw puzzles, go there.

1418
01:06:31,630 --> 01:06:33,730
They go back to the
1760s when they were made

1419
01:06:33,730 --> 01:06:37,290
with jigsaws, hence the name.

1420
01:06:37,290 --> 01:06:39,700
But basically, we
have square pieces,

1421
01:06:39,700 --> 01:06:42,150
and each side of
the-- I'll assume

1422
01:06:42,150 --> 01:06:43,990
that's a special kind
of jigsaw puzzle,

1423
01:06:43,990 --> 01:06:46,900
most common-- each edge
can either be straight.

1424
01:06:46,900 --> 01:06:48,540
That means it's on the boundary.

1425
01:06:48,540 --> 01:06:51,860
It can be a pocked or a tab.

1426
01:06:51,860 --> 01:06:55,210
And each pocket and tab is
slightly differently shaped,

1427
01:06:55,210 --> 01:06:58,980
although maybe not on this
picture, usually they are.

1428
01:06:58,980 --> 01:07:02,320
I'm going to allow that some
of the pockets and the tabs

1429
01:07:02,320 --> 01:07:03,979
have the same shape.

1430
01:07:03,979 --> 01:07:05,770
That's what you might
call ambiguous mates.

1431
01:07:05,770 --> 01:07:08,010
Most jigsaw puzzles
sold in the world do not

1432
01:07:08,010 --> 01:07:10,180
have ambiguous mates,
but let's say they do.

1433
01:07:10,180 --> 01:07:13,415
And to make it
NP-hardcore, there

1434
01:07:13,415 --> 01:07:15,000
is no image on the pieces.

1435
01:07:15,000 --> 01:07:16,460
It's just a white puzzle.

1436
01:07:16,460 --> 01:07:17,390
Now those are sold.

1437
01:07:17,390 --> 01:07:22,280
You can buy all white or are
all single color puzzles.

1438
01:07:22,280 --> 01:07:24,857

1439
01:07:24,857 --> 01:07:26,690
But usually they don't
have ambiguous mates.

1440
01:07:26,690 --> 01:07:28,209
That's like the ultimate combo.

1441
01:07:28,209 --> 01:07:30,000
If you don't assume
either of those things,

1442
01:07:30,000 --> 01:07:31,070
then the problem is easy.

1443
01:07:31,070 --> 01:07:32,297
So we don't care about that.

1444
01:07:32,297 --> 01:07:34,380
But our paper is about how
to solve jigsaw puzzles

1445
01:07:34,380 --> 01:07:36,290
in the practical case.

1446
01:07:36,290 --> 01:07:39,950
But in our situation,
I mean, that basically

1447
01:07:39,950 --> 01:07:42,320
is edge-matching
puzzles with science.

1448
01:07:42,320 --> 01:07:45,840
This is actually probably why
I care about signed puzzles

1449
01:07:45,840 --> 01:07:47,170
the most.

1450
01:07:47,170 --> 01:07:48,470
I have lowercase letters.

1451
01:07:48,470 --> 01:07:50,480
Those are going to
correspond to pockets.

1452
01:07:50,480 --> 01:07:51,570
I have uppercase letters.

1453
01:07:51,570 --> 01:07:53,153
Those are going to
correspond to tabs.

1454
01:07:53,153 --> 01:07:55,120
And of course, a tab
must meet a pocket,

1455
01:07:55,120 --> 01:07:58,779
same as a lowercase letter
must be an uppercase letter.

1456
01:07:58,779 --> 01:08:01,700
And so that is the same thing.

1457
01:08:01,700 --> 01:08:03,290
I would like my
target shape to be

1458
01:08:03,290 --> 01:08:05,569
a square because that's clean.

1459
01:08:05,569 --> 01:08:08,167
So whenever I have a
unique color, which is one

1460
01:08:08,167 --> 01:08:09,750
that I know has to
be on the boundary,

1461
01:08:09,750 --> 01:08:11,166
I'm going to make
it a flat thing.

1462
01:08:11,166 --> 01:08:13,153
And then I know in this
series of reductions,

1463
01:08:13,153 --> 01:08:14,819
I should draw this
series of reductions,

1464
01:08:14,819 --> 01:08:15,860
because it's kind of fun.

1465
01:08:15,860 --> 01:08:22,580

1466
01:08:22,580 --> 01:08:27,960
So far I kind of started
with rectangle packing.

1467
01:08:27,960 --> 01:08:30,581
I guess technically we
started with 3-partition.

1468
01:08:30,581 --> 01:08:32,609
I'll draw it like this.

1469
01:08:32,609 --> 01:08:35,760

1470
01:08:35,760 --> 01:08:44,490
We reduce that to
edge-matching puzzles.

1471
01:08:44,490 --> 01:08:50,134
Then we reduce that to
signed edge-matching puzzles.

1472
01:08:50,134 --> 01:08:57,359

1473
01:08:57,359 --> 01:09:01,590
Then we reduced that
to jigsaw puzzles.

1474
01:09:01,590 --> 01:09:03,819
And if you follow this
series of reductions

1475
01:09:03,819 --> 01:09:06,390
and see what you get, we
know that the boundary shape

1476
01:09:06,390 --> 01:09:10,210
will be a square because that
frame gadget is a square.

1477
01:09:10,210 --> 01:09:12,160
And if we make all the
unique things flat,

1478
01:09:12,160 --> 01:09:14,254
then the shape will
actually be square.

1479
01:09:14,254 --> 01:09:16,420
There's a reason I'm drawing
it this way, because we

1480
01:09:16,420 --> 01:09:19,580
have another one.

1481
01:09:19,580 --> 01:09:23,145
So the next puzzle--
you might ask well,

1482
01:09:23,145 --> 01:09:25,420
if Eternity II was an
edge-matching puzzle,

1483
01:09:25,420 --> 01:09:26,735
what was Eternity I?

1484
01:09:26,735 --> 01:09:30,660
Well, it's something called
a polyform packing puzzle.

1485
01:09:30,660 --> 01:09:34,020
These are-- if you take
an equilateral triangle

1486
01:09:34,020 --> 01:09:37,480
and cut in half like
that, that's a shape.

1487
01:09:37,480 --> 01:09:41,040
If you take k copies
of that shape,

1488
01:09:41,040 --> 01:09:45,632
join them edge to edge
along matching edge lengths,

1489
01:09:45,632 --> 01:09:46,840
you can get all these shapes.

1490
01:09:46,840 --> 01:09:49,310
It's like Tetris, but
instead of the squares

1491
01:09:49,310 --> 01:09:51,900
you start with that shape and
you join a bunch more of them

1492
01:09:51,900 --> 01:09:52,400
together.

1493
01:09:52,400 --> 01:09:53,649
I don't know exactly how many.

1494
01:09:53,649 --> 01:09:55,440
They may not even be
all the same area.

1495
01:09:55,440 --> 01:09:59,270
And your goal is to fit
inside this big dodecagon

1496
01:09:59,270 --> 01:10:01,820
or something.

1497
01:10:01,820 --> 01:10:03,040
This was solved.

1498
01:10:03,040 --> 01:10:08,235
One million pounds were
acquired by two people.

1499
01:10:08,235 --> 01:10:11,495
I think they were
mathematicians,

1500
01:10:11,495 --> 01:10:13,500
Alex and Oliver, in 2000.

1501
01:10:13,500 --> 01:10:15,980
So actually quite soon
after the puzzle was posed,

1502
01:10:15,980 --> 01:10:18,770
I think within less than a year.

1503
01:10:18,770 --> 01:10:24,110
So there were articles about how
the insurance company was not

1504
01:10:24,110 --> 01:10:25,750
happy.

1505
01:10:25,750 --> 01:10:28,291
That's why you get insured
against a puzzle being solved,

1506
01:10:28,291 --> 01:10:28,790
I guess.

1507
01:10:28,790 --> 01:10:32,330
But in Eternity II, as a
consequence, it is much harder.

1508
01:10:32,330 --> 01:10:33,850
So no one had solved
it yet, but it

1509
01:10:33,850 --> 01:10:36,380
will happen someday I'm sure.

1510
01:10:36,380 --> 01:10:39,800
So this gives you a clear sense
of what the shapes look like.

1511
01:10:39,800 --> 01:10:44,590
So I want to prove these puzzles
are NP-hard also by reduction

1512
01:10:44,590 --> 01:10:47,340
from jigsaw puzzles.

1513
01:10:47,340 --> 01:10:50,450
So let's just bring
up the picture.

1514
01:10:50,450 --> 01:10:52,000
So we just did this reduction.

1515
01:10:52,000 --> 01:10:53,760
It actually works in both ways.

1516
01:10:53,760 --> 01:10:55,240
They're really the same puzzle.

1517
01:10:55,240 --> 01:10:58,180
This does not work so
easily in both ways.

1518
01:10:58,180 --> 01:11:00,420
But I'm going to
take a jigsaw piece.

1519
01:11:00,420 --> 01:11:02,860
I'm going to turn it into
roughly a square made up

1520
01:11:02,860 --> 01:11:03,850
of little squares.

1521
01:11:03,850 --> 01:11:06,479
I'm not going to work
on the half triangles,

1522
01:11:06,479 --> 01:11:08,270
although I think it
wouldn't be any harder.

1523
01:11:08,270 --> 01:11:10,860
It's a lot easier to
think about square puzzles

1524
01:11:10,860 --> 01:11:11,660
more like Tetris.

1525
01:11:11,660 --> 01:11:13,070
These are polyominos.

1526
01:11:13,070 --> 01:11:16,060
So polyomino packing
is this type of puzzle.

1527
01:11:16,060 --> 01:11:19,020
They also exist, but no one
has won one million pounds

1528
01:11:19,020 --> 01:11:20,000
from them.

1529
01:11:20,000 --> 01:11:21,990
So that's why I showed Eternity.

1530
01:11:21,990 --> 01:11:24,520
So almost a square, but then
in the middle of the edge

1531
01:11:24,520 --> 01:11:28,970
we're going to write in binary
what this shape was here.

1532
01:11:28,970 --> 01:11:34,940
I mean, if there was a color
over here and a shape here,

1533
01:11:34,940 --> 01:11:37,670
all we care about is whether
they're the same or different.

1534
01:11:37,670 --> 01:11:42,420
So there's only 4n
different colors out there.

1535
01:11:42,420 --> 01:11:44,890
So we're going to
take log of 4n bits

1536
01:11:44,890 --> 01:11:46,450
and write them in this way.

1537
01:11:46,450 --> 01:11:49,400
And if it was indented,
whenever we have a 1,

1538
01:11:49,400 --> 01:11:50,940
we're going to indent here.

1539
01:11:50,940 --> 01:11:55,030
And if it's a tab instead of a
pocket, wherever we have a 1,

1540
01:11:55,030 --> 01:11:57,250
we're going to outdent.

1541
01:11:57,250 --> 01:11:57,900
OK.

1542
01:11:57,900 --> 01:12:02,360
So these are all
different codes.

1543
01:12:02,360 --> 01:12:07,050
And so none of them fit
together, for example.

1544
01:12:07,050 --> 01:12:09,250
And let's see.

1545
01:12:09,250 --> 01:12:10,711
Does anything match up?

1546
01:12:10,711 --> 01:12:13,120
AUDIENCE: Yes.

1547
01:12:13,120 --> 01:12:15,420
PROFESSOR: This one
matches with this one,

1548
01:12:15,420 --> 01:12:19,147
because if I rotate it around,
stick it on, it will match up.

1549
01:12:19,147 --> 01:12:21,730
So you have to make sure you get
the orientations to the codes

1550
01:12:21,730 --> 01:12:23,590
all right, but you can do this.

1551
01:12:23,590 --> 01:12:25,420
And two things will
fit together and make

1552
01:12:25,420 --> 01:12:30,120
a nice clean seem, if and only
if the original colors matched.

1553
01:12:30,120 --> 01:12:32,820
And so this
represents that puzzle

1554
01:12:32,820 --> 01:12:38,600
where we've blown everything
up by like a logarithmic factor

1555
01:12:38,600 --> 01:12:41,400
in each dimension.

1556
01:12:41,400 --> 01:12:46,280
But the number of pieces is
staying the same, in a sense.

1557
01:12:46,280 --> 01:12:49,775
So that was this reduction
to polyomino packing.

1558
01:12:49,775 --> 01:12:56,140

1559
01:12:56,140 --> 01:13:00,010
For fun, we close the loop, and
reduce from polyomino packing

1560
01:13:00,010 --> 01:13:02,980
to edge-matching in this way.

1561
01:13:02,980 --> 01:13:04,600
So we're going to
take our polyomino,

1562
01:13:04,600 --> 01:13:06,200
carve it up into
little squares, turn

1563
01:13:06,200 --> 01:13:08,440
them into edge-matching puzzle.

1564
01:13:08,440 --> 01:13:11,170
And here I actually
want to allow rotation,

1565
01:13:11,170 --> 01:13:14,580
so I'm going to change these
colors to all percent signs.

1566
01:13:14,580 --> 01:13:17,934
And now it's just the
same puzzle again.

1567
01:13:17,934 --> 01:13:19,350
So we have to use
the frame again.

1568
01:13:19,350 --> 01:13:20,766
And so if you want,
you could just

1569
01:13:20,766 --> 01:13:23,170
keep following these reductions
over and over and over.

1570
01:13:23,170 --> 01:13:25,670
I think every time you do it,
you increase the scale factor

1571
01:13:25,670 --> 01:13:27,850
by like a log factor.

1572
01:13:27,850 --> 01:13:28,930
But it's kind of fun.

1573
01:13:28,930 --> 01:13:30,471
I mean, it really
shows these puzzles

1574
01:13:30,471 --> 01:13:34,230
are very close to
identical in that

1575
01:13:34,230 --> 01:13:36,490
we didn't have to blow up
the puzzle size by very much

1576
01:13:36,490 --> 01:13:38,560
to go from one
puzzle to the next.

1577
01:13:38,560 --> 01:13:41,637
So usually we're just thinking
about polynomial blow up here.

1578
01:13:41,637 --> 01:13:43,220
We have a very small
notion of blowup,

1579
01:13:43,220 --> 01:13:45,500
which is some tight sense
in which these puzzles are

1580
01:13:45,500 --> 01:13:48,540
almost the same.

1581
01:13:48,540 --> 01:13:49,500
OK.

1582
01:13:49,500 --> 01:13:51,702
End of paper.

1583
01:13:51,702 --> 01:13:58,220
A fun open problem
is this reduction

1584
01:13:58,220 --> 01:14:02,270
used log n by log n-- order
log n by log n pieces.

1585
01:14:02,270 --> 01:14:06,520
What if your pieces
only have area log n?

1586
01:14:06,520 --> 01:14:09,850
So maybe they're root log n by
root log n or something that.

1587
01:14:09,850 --> 01:14:13,710
I'm sure it should still be in
NP-hard, but you never know.

1588
01:14:13,710 --> 01:14:15,980
For example, they're
constant size.

1589
01:14:15,980 --> 01:14:20,740

1590
01:14:20,740 --> 01:14:24,420
Actually, well, let's say,
if they're size 2, its easy.

1591
01:14:24,420 --> 01:14:26,840
Leave it at that even if
the shape is very messy.

1592
01:14:26,840 --> 01:14:28,870
But if there are also 2
by 2 blocks it's easy.

1593
01:14:28,870 --> 01:14:31,110
So clearly small
shapes are too easy.

1594
01:14:31,110 --> 01:14:32,960
But probably logarithmic
area is where

1595
01:14:32,960 --> 01:14:34,199
it starts to get interesting.

1596
01:14:34,199 --> 01:14:34,740
I don't know.

1597
01:14:34,740 --> 01:14:36,040
What about log log area?

1598
01:14:36,040 --> 01:14:41,466
That's probably neither NP-hard
nor polynomial, but oh, well.

1599
01:14:41,466 --> 01:14:41,965
Cool.

1600
01:14:41,965 --> 01:14:46,720

1601
01:14:46,720 --> 01:14:52,210
So I want to talk about one
more problem-- one more hardness

1602
01:14:52,210 --> 01:14:57,370
proof in this similar vein.

1603
01:14:57,370 --> 01:14:58,965
It's about packing.

1604
01:14:58,965 --> 01:15:01,150
I already erased
packing rectangles

1605
01:15:01,150 --> 01:15:04,530
into rectangles or
rectangles into a square.

1606
01:15:04,530 --> 01:15:07,909
What about squares
into a square?

1607
01:15:07,909 --> 01:15:10,200
I don't know if you can tell
if that's a square and not

1608
01:15:10,200 --> 01:15:11,310
a rectangle.

1609
01:15:11,310 --> 01:15:11,810
OK.

1610
01:15:11,810 --> 01:15:14,720
This is a nice paper.

1611
01:15:14,720 --> 01:15:17,355
We've used it for other hardness
proofs, which we'll probably

1612
01:15:17,355 --> 01:15:18,520
talk about next class.

1613
01:15:18,520 --> 01:15:21,620
So I'm given a bunch of squares,
and I'm given a target square.

1614
01:15:21,620 --> 01:15:23,370
Do these squares fit in there?

1615
01:15:23,370 --> 01:15:26,760
And again, we will
probably use exact-- well,

1616
01:15:26,760 --> 01:15:28,900
initially we won't
be exact packing.

1617
01:15:28,900 --> 01:15:31,660
But let's say that
the squares can only

1618
01:15:31,660 --> 01:15:32,930
rotate by a multiple of 90.

1619
01:15:32,930 --> 01:15:35,590
In other words,
they can't rotate.

1620
01:15:35,590 --> 01:15:39,780
We will fix that by
making exact packing.

1621
01:15:39,780 --> 01:15:44,030
Why don't I jump
to the reduction?

1622
01:15:44,030 --> 01:15:47,420
The heart of the reduction
is this idea-- we're just

1623
01:15:47,420 --> 01:15:48,852
going to add a big number here.

1624
01:15:48,852 --> 01:15:50,810
I am going to use capital
B for the big number.

1625
01:15:50,810 --> 01:15:52,270
That's what's in the paper.

1626
01:15:52,270 --> 01:15:54,810
This is a paper from 1990.

1627
01:15:54,810 --> 01:15:58,700
Motivation here is you have a
big grid supercomputer, which

1628
01:15:58,700 --> 01:16:01,590
were popular in
the '80s and '90s.

1629
01:16:01,590 --> 01:16:05,050
And you have a job, which was
a square grid of processors,

1630
01:16:05,050 --> 01:16:05,840
let's say.

1631
01:16:05,840 --> 01:16:08,082
And you want to execute
them all in parallel,

1632
01:16:08,082 --> 01:16:09,540
but they're not
allowed to overlap,

1633
01:16:09,540 --> 01:16:12,020
because that would slow
your supercomputing down.

1634
01:16:12,020 --> 01:16:14,740
But you are allowed
gaps, let's say.

1635
01:16:14,740 --> 01:16:19,430
So I'm just going to take
each of my a i numbers,

1636
01:16:19,430 --> 01:16:21,770
add this huge number to it.

1637
01:16:21,770 --> 01:16:23,470
So they're all
roughly the same size.

1638
01:16:23,470 --> 01:16:25,553
This is the trick we did
at the beginning of class

1639
01:16:25,553 --> 01:16:26,720
with the 3-partition.

1640
01:16:26,720 --> 01:16:27,220
All right.

1641
01:16:27,220 --> 01:16:29,610
All these numbers-- all these
sizes are almost the same.

1642
01:16:29,610 --> 01:16:31,985
I've drawn them quite different,
but imagine they're just

1643
01:16:31,985 --> 01:16:33,710
like tiny fluctuations.

1644
01:16:33,710 --> 01:16:36,440
And then I make the
height of this rectangle.

1645
01:16:36,440 --> 01:16:38,510
For whatever reason I
transposed my image.

1646
01:16:38,510 --> 01:16:40,595
That's probably why I
was confused earlier.

1647
01:16:40,595 --> 01:16:44,550
And I just make the height
three times the big number--

1648
01:16:44,550 --> 01:16:47,400
because I want three pieces
to come together-- plus t,

1649
01:16:47,400 --> 01:16:49,320
my target sum of the a i's.

1650
01:16:49,320 --> 01:16:52,160
So this is a huge thing
plus a super tiny thing.

1651
01:16:52,160 --> 01:16:54,657
But what it's saying is
well, you could have slop.

1652
01:16:54,657 --> 01:16:56,365
They're almost the
same size, but there's

1653
01:16:56,365 --> 01:16:58,010
that little bit of extra.

1654
01:16:58,010 --> 01:17:00,380
And that little bit of extra
has to add up to exactly t.

1655
01:17:00,380 --> 01:17:04,490
So this is one triple with
the desired target sum.

1656
01:17:04,490 --> 01:17:07,869
And then I want to get
n over three of them.

1657
01:17:07,869 --> 01:17:09,660
Now here's where things
get a little dicey.

1658
01:17:09,660 --> 01:17:13,270
You say, OK, let's just
say I take the largest one,

1659
01:17:13,270 --> 01:17:15,655
or actually I'll go all
the way up to B plus t.

1660
01:17:15,655 --> 01:17:18,850
I know that every number
I have is smaller than t,

1661
01:17:18,850 --> 01:17:21,350
because I just saw the
sum of three of them is t.

1662
01:17:21,350 --> 01:17:23,940
So I'm always going
to have a gap here.

1663
01:17:23,940 --> 01:17:26,270
And let's say I just
packed the next three there

1664
01:17:26,270 --> 01:17:27,100
and then the next three there.

1665
01:17:27,100 --> 01:17:29,340
And so I'll leave enough
room that even with the slop

1666
01:17:29,340 --> 01:17:30,890
I could fit everything in.

1667
01:17:30,890 --> 01:17:34,370
So each one is B plus t, and
the number of them is n over 3.

1668
01:17:34,370 --> 01:17:36,280
So that'll be the
width of my rectangle.

1669
01:17:36,280 --> 01:17:37,940
Looks like a lot
of slop, but that's

1670
01:17:37,940 --> 01:17:41,550
because I drew this with the
squares very different in size.

1671
01:17:41,550 --> 01:17:47,080
If we compute the
amount of slop,

1672
01:17:47,080 --> 01:17:52,610
the maximum, if you
look at this distance,

1673
01:17:52,610 --> 01:17:54,860
it's at most t, certainly.

1674
01:17:54,860 --> 01:17:57,760
Even if a i were 0,
which is not allowed,

1675
01:17:57,760 --> 01:17:59,110
then this distance would be t.

1676
01:17:59,110 --> 01:18:01,000
So it's going to be
even smaller than that.

1677
01:18:01,000 --> 01:18:04,670
But the gaps here
are always at most t.

1678
01:18:04,670 --> 01:18:14,150
So we can take-- so
this is total slop

1679
01:18:14,150 --> 01:18:20,140
is t times the height.

1680
01:18:20,140 --> 01:18:23,340
So that was like the width
of one sliver of slop,

1681
01:18:23,340 --> 01:18:25,160
and then the height
is 3B plus t.

1682
01:18:25,160 --> 01:18:30,734

1683
01:18:30,734 --> 01:18:32,400
And then times n over
3, because there's

1684
01:18:32,400 --> 01:18:34,410
n over 3 of those things.

1685
01:18:34,410 --> 01:18:37,820
And hopefully this works.

1686
01:18:37,820 --> 01:18:41,820
I want to say this is
less than B squared

1687
01:18:41,820 --> 01:18:50,210
if B is bigger than t times n.

1688
01:18:50,210 --> 01:18:51,320
3s cancel.

1689
01:18:51,320 --> 01:18:53,430
So if B is, I think
this term won't matter,

1690
01:18:53,430 --> 01:18:56,370
because B is going
to be bigger than t.

1691
01:18:56,370 --> 01:19:01,710
So maybe put a 2 there
for extra safety.

1692
01:19:01,710 --> 01:19:03,570
Then you're totally dwarfed.

1693
01:19:03,570 --> 01:19:05,920
So just dividing
both sides by B we're

1694
01:19:05,920 --> 01:19:08,550
getting 3 times t
times n over part 3.

1695
01:19:08,550 --> 01:19:09,500
That's 2 times n.

1696
01:19:09,500 --> 01:19:11,850
OK.

1697
01:19:11,850 --> 01:19:12,390
Cool.

1698
01:19:12,390 --> 01:19:15,044
So the point is the
total area of slop

1699
01:19:15,044 --> 01:19:16,960
that I have here is less
than a single square,

1700
01:19:16,960 --> 01:19:19,494
because a single square
is even bigger than this.

1701
01:19:19,494 --> 01:19:21,410
So you're not going to
be able to pack anymore

1702
01:19:21,410 --> 01:19:25,960
squares, and that's
a vague argument,

1703
01:19:25,960 --> 01:19:28,210
but enough hand-waving
later, and you've

1704
01:19:28,210 --> 01:19:30,890
proved that, in fact, any
packing of these squares

1705
01:19:30,890 --> 01:19:32,620
will give you 3-partition.

1706
01:19:32,620 --> 01:19:36,100
That requires more
work, but this is

1707
01:19:36,100 --> 01:19:40,800
some intuition why it is true.

1708
01:19:40,800 --> 01:19:41,300
OK.

1709
01:19:41,300 --> 01:19:44,839
So this was actually packing
squares into a rectangle.

1710
01:19:44,839 --> 01:19:46,630
But that wasn't the
problem I started with.

1711
01:19:46,630 --> 01:19:49,550
I wanted to pack
squares into a square.

1712
01:19:49,550 --> 01:19:52,080
So for that you need an
infrastructure gadget

1713
01:19:52,080 --> 01:19:54,350
like the frame that
we made before.

1714
01:19:54,350 --> 01:19:59,420
And this is kind of acute
number theory-ish trick.

1715
01:19:59,420 --> 01:20:01,460
I'm going to take
some integer x.

1716
01:20:01,460 --> 01:20:02,500
We'll choose it later.

1717
01:20:02,500 --> 01:20:05,690
It's just going to be big
enough-- something like n.

1718
01:20:05,690 --> 01:20:08,580
And we have one
giant square, which

1719
01:20:08,580 --> 01:20:11,580
is x times x plus 1 minus 1.

1720
01:20:11,580 --> 01:20:14,430
But they're all squares,
so by the same amount.

1721
01:20:14,430 --> 01:20:16,805
And then we're going to take
these medium-sized squares

1722
01:20:16,805 --> 01:20:19,300
of size x plus 1 and the
small squares-- so much

1723
01:20:19,300 --> 01:20:21,970
smaller-- of size x.

1724
01:20:21,970 --> 01:20:25,096
And because this
is just one smaller

1725
01:20:25,096 --> 01:20:26,720
than what it's supposed
to be-- I mean,

1726
01:20:26,720 --> 01:20:31,800
if it was x times x plus 1 it
would sort of come to here.

1727
01:20:31,800 --> 01:20:35,590
So when you pack these guys up
you go just one too far there.

1728
01:20:35,590 --> 01:20:38,440
But there's exactly
enough room for one more.

1729
01:20:38,440 --> 01:20:41,290
If I put x plus one
extra, this is x.

1730
01:20:41,290 --> 01:20:44,610
That's the one, and so on.

1731
01:20:44,610 --> 01:20:48,935
So this leaves, as
a gap, a rectangle.

1732
01:20:48,935 --> 01:20:50,310
Now this is not
the only solution

1733
01:20:50,310 --> 01:20:51,970
these guys could
slide down, but you

1734
01:20:51,970 --> 01:20:53,980
can show that will only
make your life harder.

1735
01:20:53,980 --> 01:20:56,270
And the paper does that.

1736
01:20:56,270 --> 01:20:58,040
That's sort of the
easy part of the proof.

1737
01:20:58,040 --> 01:21:00,210
And so now you're
left with a rectangle,

1738
01:21:00,210 --> 01:21:03,710
which is 1 by this thing.

1739
01:21:03,710 --> 01:21:11,520
You multiply everything
by the 3B plus t,

1740
01:21:11,520 --> 01:21:14,360
because that was what we
wanted one of our dimensions

1741
01:21:14,360 --> 01:21:16,350
to be-- the smaller one.

1742
01:21:16,350 --> 01:21:18,030
So that scaled up the rectangle.

1743
01:21:18,030 --> 01:21:22,010
And then the horizontal-- the
width may not match exactly.

1744
01:21:22,010 --> 01:21:24,092
But if there's too
much space here,

1745
01:21:24,092 --> 01:21:25,800
and let me just set
x to be large enough,

1746
01:21:25,800 --> 01:21:27,260
then there will be extra space.

1747
01:21:27,260 --> 01:21:29,446
And just throw in a
bunch of B by B blocks

1748
01:21:29,446 --> 01:21:30,820
there to fill up
the extra space.

1749
01:21:30,820 --> 01:21:32,820
So you can figure out how
much extra space there

1750
01:21:32,820 --> 01:21:34,460
is and fill it in.

1751
01:21:34,460 --> 01:21:36,950
So they you go-- packing
squares into a square.

1752
01:21:36,950 --> 01:21:39,060
And this is strong
NP-hardness of this.

1753
01:21:39,060 --> 01:21:42,270
Even when the squares are
only of polynomial area,

1754
01:21:42,270 --> 01:21:43,930
this problem is hard,
which is actually

1755
01:21:43,930 --> 01:21:46,780
the case you care about when
each of these 1 by 1 squares

1756
01:21:46,780 --> 01:21:48,440
is a processor.

1757
01:21:48,440 --> 01:21:51,416
Now this is not exact packing,
and so you might wonder oh,

1758
01:21:51,416 --> 01:21:53,540
what if I rotate the squares,
and then crazy things

1759
01:21:53,540 --> 01:21:54,560
could happen.

1760
01:21:54,560 --> 01:21:57,730
Probably not, but you
could also just compute

1761
01:21:57,730 --> 01:21:59,513
how much extra slop
there is, because you

1762
01:21:59,513 --> 01:22:01,469
know the area of
the input squares,

1763
01:22:01,469 --> 01:22:03,260
and you know the area
of the target square.

1764
01:22:03,260 --> 01:22:07,020
And just add a whole bunch
of 1 by 1 little chips,

1765
01:22:07,020 --> 01:22:08,820
and that will fill
in exactly the space.

1766
01:22:08,820 --> 01:22:09,986
Then you have exact packing.

1767
01:22:09,986 --> 01:22:12,060
Then you don't even have
to worry about rotation.

1768
01:22:12,060 --> 01:22:13,801
So that makes
proof even cleaner.

1769
01:22:13,801 --> 01:22:15,550
I think that wasn't
in the original paper,

1770
01:22:15,550 --> 01:22:17,780
but it's a nice little addition.

1771
01:22:17,780 --> 01:22:21,230
And that is our packing
through 3-partition.

1772
01:22:21,230 --> 01:22:24,300
Next class we'll
do more 3-partition

1773
01:22:24,300 --> 01:22:26,980
for different types of problems.

1774
01:22:26,980 --> 01:22:29,720
So in case you lose lots of
pieces in your jigsaw puzzle,

1775
01:22:29,720 --> 01:22:33,680
we have the one-piece
jigsaw puzzle.

1776
01:22:33,680 --> 01:22:37,690
This is all the pieces are
in one giant connected mess.

1777
01:22:37,690 --> 01:22:44,012
And still it is not
so trivial to solve.

1778
01:22:44,012 --> 01:22:44,511
Wow.

1779
01:22:44,511 --> 01:22:48,401

1780
01:22:48,401 --> 01:22:49,650
AUDIENCE: [INTERPOSING VOICES]

1781
01:22:49,650 --> 01:22:50,525
PROFESSOR: All right.

1782
01:22:50,525 --> 01:22:53,954
This is the one-piece jigsaw
puzzle in solve state.

1783
01:22:53,954 --> 01:22:56,345
It's the Simpson's addition.

1784
01:22:56,345 --> 01:22:58,740
It's-- you get it.

1785
01:22:58,740 --> 01:22:59,990
AUDIENCE: [INTERPOSING VOICES]

1786
01:22:59,990 --> 01:23:01,790
AUDIENCE: And then
you put that in.

1787
01:23:01,790 --> 01:23:03,290
And then you put
it in your slop.

1788
01:23:03,290 --> 01:23:04,790
AUDIENCE: Yep. [INAUDIBLE].

1789
01:23:04,790 --> 01:23:06,340
PROFESSOR: Ta-da.

