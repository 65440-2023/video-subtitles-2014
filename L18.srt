1
0-1:59:36,500 --> 0-1:59:36,570

2
0-1:59:36,570 --> 0-1:59:38,930
The following content is
provided under a Creative

3
0-1:59:38,930 --> 0-1:59:40,310
Commons license.

4
0-1:59:40,310 --> 0-1:59:42,550
Your support will help
MIT OpenCourseWare

5
0-1:59:42,550 --> 0-1:59:46,650
continue to offer high quality
educational resources for free.

6
0-1:59:46,650 --> 0-1:59:49,200
To make a donation, or to
view additional materials

7
0-1:59:49,200 --> 0-1:59:53,100
from hundreds of MIT courses,
visit MIT OpenCourseWare

8
0-1:59:53,100 --> 0-1:59:53,763
at ocw.mit.edu.

9
0-1:59:53,763 --> 00:00:02,225

10
00:00:02,225 --> 00:00:03,100
PROFESSOR: All right.

11
00:00:03,100 --> 00:00:05,660
Today, more games.

12
00:00:05,660 --> 00:00:08,040
Last time in
general, we're going

13
00:00:08,040 --> 00:00:12,810
to look at this categorization
of different types of games.

14
00:00:12,810 --> 00:00:16,080
So far we've been focusing on
the one-player category, which

15
00:00:16,080 --> 00:00:19,300
normally think of as
puzzles or not games at all.

16
00:00:19,300 --> 00:00:23,670
But today we're going to branch
out in the other directions.

17
00:00:23,670 --> 00:00:26,720
And we're going to talk about
zero-player games, which

18
00:00:26,720 --> 00:00:30,650
arguably are also not
games, and two-player games.

19
00:00:30,650 --> 00:00:33,830
But to fill out this
space, we probably

20
00:00:33,830 --> 00:00:40,240
won't get out here yet to
EXPTIME and Undecidable games.

21
00:00:40,240 --> 00:00:43,580
But we will stick to this chunk.

22
00:00:43,580 --> 00:00:45,710
We're going to start
with zero-player games,

23
00:00:45,710 --> 00:00:50,050
also simulations-- Game of Life
is the classic example here.

24
00:00:50,050 --> 00:00:53,770
And these can be very hard,
despite being very simple

25
00:00:53,770 --> 00:00:56,390
and not really
having any choices.

26
00:00:56,390 --> 00:01:00,310
So as a funny equality here,
the sliding block puzzles

27
00:01:00,310 --> 00:01:02,540
and things that we
looked at last time

28
00:01:02,540 --> 00:01:06,370
where you have agency, you have
a choice of which move to make,

29
00:01:06,370 --> 00:01:07,950
will remain PSPACE
complete even when

30
00:01:07,950 --> 00:01:10,840
you don't have that choice.

31
00:01:10,840 --> 00:01:12,560
This category is
not so interesting.

32
00:01:12,560 --> 00:01:15,690
If you a polynomially
bounded zero-player game,

33
00:01:15,690 --> 00:01:16,535
that is a computer.

34
00:01:16,535 --> 00:01:19,920
And it can just compute
something for polynomial time.

35
00:01:19,920 --> 00:01:23,630
And recall, this polynomially
bounded number of moves.

36
00:01:23,630 --> 00:01:27,009
And this is an exponentially
bounded number of moves.

37
00:01:27,009 --> 00:01:29,050
Although you can actually
go a little bit higher.

38
00:01:29,050 --> 00:01:32,160
And we'll talk about that
and get even harder problems

39
00:01:32,160 --> 00:01:35,720
when you have potentially
infinitely many moves.

40
00:01:35,720 --> 00:01:37,564
And then we'll go
into two-player,

41
00:01:37,564 --> 00:01:38,980
in particular,
two-player bounded,

42
00:01:38,980 --> 00:01:43,710
where we get another
PSPACE completeness result.

43
00:01:43,710 --> 00:01:49,080
As you may recall from time ago,
all of these versions of games

44
00:01:49,080 --> 00:01:52,950
have constraint
logic variations.

45
00:01:52,950 --> 00:01:55,930
So we've focused on this one.

46
00:01:55,930 --> 00:02:01,880
But I'll mention this one, and
this one, and this one today.

47
00:02:01,880 --> 00:02:03,070
And they're all complete.

48
00:02:03,070 --> 00:02:07,330
So we can use them
to reduce things.

49
00:02:07,330 --> 00:02:09,620
But before we get
to constraint logic,

50
00:02:09,620 --> 00:02:12,490
I'm going to be talking about
both more classical ways

51
00:02:12,490 --> 00:02:14,130
of proving hardness
in these classes,

52
00:02:14,130 --> 00:02:17,480
and then also the
constraint logic way.

53
00:02:17,480 --> 00:02:20,450
And we'll start with
the Game of Life.

54
00:02:20,450 --> 00:02:22,610
Let me write down a
definition of the game in case

55
00:02:22,610 --> 00:02:28,090
you haven't seen it,
or if you've forgotten.

56
00:02:28,090 --> 00:02:29,985
So this was invented by Conway.

57
00:02:29,985 --> 00:02:38,260

58
00:02:38,260 --> 00:02:40,570
'70s.

59
00:02:40,570 --> 00:02:44,385
So you have two types of
cells-- living cells, which

60
00:02:44,385 --> 00:02:47,300
are the black cells;
and dead cells,

61
00:02:47,300 --> 00:02:48,870
those are the white cells.

62
00:02:48,870 --> 00:02:52,800
And you have this iteration--
every cell in parallel updates.

63
00:02:52,800 --> 00:02:56,050
In general, this is called
a cellular automaton.

64
00:02:56,050 --> 00:03:00,410
And if we have a
living cell, it will

65
00:03:00,410 --> 00:03:07,705
continue to live if and only
if it has two or three living

66
00:03:07,705 --> 00:03:08,205
neighbors.

67
00:03:08,205 --> 00:03:13,720

68
00:03:13,720 --> 00:03:16,010
This is among the
eight neighbors

69
00:03:16,010 --> 00:03:18,590
in the 8-way adjacency.

70
00:03:18,590 --> 00:03:22,230
And then if we have
a dead cell, then it

71
00:03:22,230 --> 00:03:29,210
becomes living-- it's
born, if you will-- if

72
00:03:29,210 --> 00:03:33,590
and only if it has exactly
three living neighbors.

73
00:03:33,590 --> 00:03:38,710

74
00:03:38,710 --> 00:03:40,680
And so those are the rules.

75
00:03:40,680 --> 00:03:43,330
We don't really need
to know the rules

76
00:03:43,330 --> 00:03:45,580
except for verifying that
very small gadgets work.

77
00:03:45,580 --> 00:03:47,990
Most of what I'll talk
about are higher level

78
00:03:47,990 --> 00:03:50,040
than specifics of these rules.

79
00:03:50,040 --> 00:03:52,250
But some things you
should know is sometimes

80
00:03:52,250 --> 00:03:54,589
you get a periodic
pattern like this pulsar.

81
00:03:54,589 --> 00:03:56,550
Sometimes you get
a static pattern.

82
00:03:56,550 --> 00:03:59,690
These things don't change
because for example, on the 2

83
00:03:59,690 --> 00:04:01,840
by 2 square, each
of the living cells

84
00:04:01,840 --> 00:04:04,780
has exactly three neighbors.

85
00:04:04,780 --> 00:04:05,920
And so it lives.

86
00:04:05,920 --> 00:04:09,710
And each of the dead cells has
not exactly three neighbors.

87
00:04:09,710 --> 00:04:12,750
And so I guess one or two.

88
00:04:12,750 --> 00:04:13,870
And so they remain dead.

89
00:04:13,870 --> 00:04:14,850
And so nothing changes.

90
00:04:14,850 --> 00:04:16,930
That's called still life.

91
00:04:16,930 --> 00:04:20,060
There's tons of
puns in this area.

92
00:04:20,060 --> 00:04:21,790
And so that's well and good.

93
00:04:21,790 --> 00:04:24,289
And so one question you might
ask is, given a pattern,

94
00:04:24,289 --> 00:04:25,080
is it a still life?

95
00:04:25,080 --> 00:04:26,650
Well, that's easy to check.

96
00:04:26,650 --> 00:04:28,260
Is it periodic?

97
00:04:28,260 --> 00:04:30,480
That's harder to check.

98
00:04:30,480 --> 00:04:32,690
Does it ever die out
and become nothing?

99
00:04:32,690 --> 00:04:34,840
That's actually kind of common.

100
00:04:34,840 --> 00:04:39,220
And that, we will prove,
is very hard to check.

101
00:04:39,220 --> 00:04:41,730
But all these
questions are related,

102
00:04:41,730 --> 00:04:44,390
other than still
life, which is easy.

103
00:04:44,390 --> 00:04:47,980
So some other cool things you
should know about are gliders.

104
00:04:47,980 --> 00:04:51,010
Gliders are a kind
of periodic pattern,

105
00:04:51,010 --> 00:04:53,210
but with a diagonal offset.

106
00:04:53,210 --> 00:04:55,540
So they go off to infinity
in a diagonal direction,

107
00:04:55,540 --> 00:04:56,680
unless they hit something.

108
00:04:56,680 --> 00:04:58,400
Then something might happen.

109
00:04:58,400 --> 00:05:00,410
But in the absence
of anything else

110
00:05:00,410 --> 00:05:03,100
they'll just keep
going on for infinity.

111
00:05:03,100 --> 00:05:06,880
So this is a little different
from most of our games.

112
00:05:06,880 --> 00:05:08,780
Most of our games we
have a finite board.

113
00:05:08,780 --> 00:05:11,080
There's some rectangular thing.

114
00:05:11,080 --> 00:05:13,200
Sometimes Life is
played on a torus.

115
00:05:13,200 --> 00:05:15,000
So when you go off
the south edge,

116
00:05:15,000 --> 00:05:17,390
you end up on the
north edge, and so on.

117
00:05:17,390 --> 00:05:21,260
In that setting, Life is
going to be PSPACE complete.

118
00:05:21,260 --> 00:05:29,830
So in general for
zero-player games,

119
00:05:29,830 --> 00:05:36,320
if we have a polynomial number
of moves, then of course

120
00:05:36,320 --> 00:05:40,070
we're going to be
in polynomial time.

121
00:05:40,070 --> 00:05:41,860
If we have an unbounded
number of moves

122
00:05:41,860 --> 00:05:46,830
but a polynomial space,
basically, then we're

123
00:05:46,830 --> 00:05:50,110
going to get PSPACE.

124
00:05:50,110 --> 00:05:50,610
OK.

125
00:05:50,610 --> 00:05:51,230
No surprise.

126
00:05:51,230 --> 00:05:57,680
So the finite versions of
Life will be like that.

127
00:05:57,680 --> 00:06:02,830
But if we have infinite
space, normally we

128
00:06:02,830 --> 00:06:04,400
can't think about
infinite space.

129
00:06:04,400 --> 00:06:07,110
But with Life it's meaningful
to have an infinite board.

130
00:06:07,110 --> 00:06:10,490
But initially only a finite
rectangle has any stuff in it.

131
00:06:10,490 --> 00:06:14,500
So if you just encode all of the
positions of the living cells

132
00:06:14,500 --> 00:06:17,620
and say, well everything
outside of that is dead,

133
00:06:17,620 --> 00:06:19,705
then you can think
about infinite space.

134
00:06:19,705 --> 00:06:24,850
And here we will get that
the problem is undecidable.

135
00:06:24,850 --> 00:06:29,070
So there's no finite
algorithm to solve it.

136
00:06:29,070 --> 00:06:31,072
So that's cool.

137
00:06:31,072 --> 00:06:33,530
And I'm going to tell you a
little bit about both of these.

138
00:06:33,530 --> 00:06:35,440
Spaceship is like
a glider, but it

139
00:06:35,440 --> 00:06:38,490
goes in one dimension
instead of diagonally.

140
00:06:38,490 --> 00:06:40,640
So usually horizontally.

141
00:06:40,640 --> 00:06:42,140
There are many
spaceships out there.

142
00:06:42,140 --> 00:06:45,660
This is one particularly
efficient one.

143
00:06:45,660 --> 00:06:48,100
And one of the coolest
things is this thing

144
00:06:48,100 --> 00:06:51,910
called Gosper glider gun,
invented by Bill Gosper,

145
00:06:51,910 --> 00:06:54,270
I think while he was at MIT.

146
00:06:54,270 --> 00:06:55,670
It's this construction up here.

147
00:06:55,670 --> 00:06:57,740
And it creates gliders.

148
00:06:57,740 --> 00:06:59,720
And so they just
go off to infinity.

149
00:06:59,720 --> 00:07:03,520
And you just keep making more,
and more, and more of them.

150
00:07:03,520 --> 00:07:06,460
So in some infinite sense, this
thing is periodic, I guess.

151
00:07:06,460 --> 00:07:09,866
But at any finite time you have
maybe n of these coming out.

152
00:07:09,866 --> 00:07:11,490
And you just keep
making more and more.

153
00:07:11,490 --> 00:07:14,310

154
00:07:14,310 --> 00:07:16,300
Gliders and glider
guns are the key things

155
00:07:16,300 --> 00:07:20,222
you should know about
for hardness proofs.

156
00:07:20,222 --> 00:07:23,400
First I'm just going to show you
a couple of pictures of fairly

157
00:07:23,400 --> 00:07:24,640
recent hardness proofs.

158
00:07:24,640 --> 00:07:28,787
This is an explicit construction
of a particular Turing machine.

159
00:07:28,787 --> 00:07:31,370
I think it is a Turing machine
that given a number represented

160
00:07:31,370 --> 00:07:34,340
in unary doubles that number.

161
00:07:34,340 --> 00:07:37,920
So it's a fairly clean
machine, which is in here.

162
00:07:37,920 --> 00:07:40,170
And there's two stacks.

163
00:07:40,170 --> 00:07:41,930
So you can think of
a Turing machine,

164
00:07:41,930 --> 00:07:43,500
normally you have a tape.

165
00:07:43,500 --> 00:07:46,770
And you have your head
at some cell in the tape.

166
00:07:46,770 --> 00:07:48,970
You can think of that as a
stack going to your left,

167
00:07:48,970 --> 00:07:50,680
and a stack going to your right.

168
00:07:50,680 --> 00:07:52,720
Each time you can pop off
an item from the stack

169
00:07:52,720 --> 00:07:54,887
and push it onto the other side.

170
00:07:54,887 --> 00:07:56,720
That would be the same
as moving to the left

171
00:07:56,720 --> 00:07:58,329
or moving to the right.

172
00:07:58,329 --> 00:07:59,870
So this is implementing
what's called

173
00:07:59,870 --> 00:08:01,430
a pushdown automaton
with two stacks,

174
00:08:01,430 --> 00:08:04,760
but basically a Turing
machine with one tape.

175
00:08:04,760 --> 00:08:05,780
And you can do that.

176
00:08:05,780 --> 00:08:07,700
And this is done
algorithmically.

177
00:08:07,700 --> 00:08:10,880
So he also applied it to a
universal Turing machine,

178
00:08:10,880 --> 00:08:12,089
if you're more a fan of that.

179
00:08:12,089 --> 00:08:14,671
That's the Turing machine that
takes a Turing machine as input

180
00:08:14,671 --> 00:08:15,400
and simulates it.

181
00:08:15,400 --> 00:08:16,525
So that's the code in here.

182
00:08:16,525 --> 00:08:18,289
It's much bigger.

183
00:08:18,289 --> 00:08:22,810
Now this construction relies
on the tape being finite.

184
00:08:22,810 --> 00:08:27,120
So it proves PSPACE completeness
for the polynomial space

185
00:08:27,120 --> 00:08:27,620
version.

186
00:08:27,620 --> 00:08:31,980
It will remain in this
rectangle, as big as it is.

187
00:08:31,980 --> 00:08:35,170
And it will run the machine.

188
00:08:35,170 --> 00:08:37,010
If it ran out of
tape, then the machine

189
00:08:37,010 --> 00:08:39,900
might crash or not
do the thing that it

190
00:08:39,900 --> 00:08:42,470
was supposed to do if
it was a Turing machine.

191
00:08:42,470 --> 00:08:44,570
So that's fine for
PSPACE hardness,

192
00:08:44,570 --> 00:08:46,460
because simulating a
Turing machine is hard.

193
00:08:46,460 --> 00:08:48,060
I mentioned that last time.

194
00:08:48,060 --> 00:08:49,840
But not good for undecidability.

195
00:08:49,840 --> 00:08:51,130

196
00:08:51,130 --> 00:08:56,180
Same guy a year later came
up with a Turing machine that

197
00:08:56,180 --> 00:08:59,120
grows itself automatically.

198
00:08:59,120 --> 00:09:04,020
So it's a little hard to see,
but this is the original thing.

199
00:09:04,020 --> 00:09:06,470
And then as you run
it longer and longer,

200
00:09:06,470 --> 00:09:10,170
this machine moves
along this dotted line.

201
00:09:10,170 --> 00:09:11,110
So it's moved here.

202
00:09:11,110 --> 00:09:15,080
This is like the dirt
that it leaves behind.

203
00:09:15,080 --> 00:09:17,700
And simultaneously
it's been building

204
00:09:17,700 --> 00:09:20,400
larger and larger versions
of its stacks, so by the time

205
00:09:20,400 --> 00:09:23,180
it needs to use it,
it will be available.

206
00:09:23,180 --> 00:09:25,770
Because space is
bounded by time.

207
00:09:25,770 --> 00:09:29,370
So limit on the rate of growth.

208
00:09:29,370 --> 00:09:31,250
Very complicated, obviously.

209
00:09:31,250 --> 00:09:33,350
But extremely powerful.

210
00:09:33,350 --> 00:09:35,990
This establishes that
some version of Life

211
00:09:35,990 --> 00:09:39,552
like, will the thing ever
stop growing, is undecidable.

212
00:09:39,552 --> 00:09:41,760
Cause if the machine halts,
you could make this thing

213
00:09:41,760 --> 00:09:44,290
just stop.

214
00:09:44,290 --> 00:09:52,620
It will non answer the question
of, given a life setup,

215
00:09:52,620 --> 00:09:55,430
will everything
eventually disappear?

216
00:09:55,430 --> 00:09:57,750
At least not easily.

217
00:09:57,750 --> 00:10:00,220
So I'm going to talk about
that version and a somewhat

218
00:10:00,220 --> 00:10:02,310
older proof, partly
because I like old proofs.

219
00:10:02,310 --> 00:10:04,180
And it's a very epic proof.

220
00:10:04,180 --> 00:10:06,860
So this one, I don't
understand the details of.

221
00:10:06,860 --> 00:10:10,510
But they are online if you
want to study this thing.

222
00:10:10,510 --> 00:10:16,010
There is another proof by
Berlekamp, Conway, and Guy

223
00:10:16,010 --> 00:10:18,290
in their series of books
called Winning Ways, which

224
00:10:18,290 --> 00:10:21,380
is a very cool set of books.

225
00:10:21,380 --> 00:10:23,450
Interested in two-player
games in particular.

226
00:10:23,450 --> 00:10:26,100
But they have this chapter
about life being undecidable.

227
00:10:26,100 --> 00:10:29,780

228
00:10:29,780 --> 00:10:31,180
At a high level
it's very simple.

229
00:10:31,180 --> 00:10:33,100
It's just if you
have a glider, that's

230
00:10:33,100 --> 00:10:34,790
going to represent a 1 bit.

231
00:10:34,790 --> 00:10:37,900
If you don't have a glider
in a particular area,

232
00:10:37,900 --> 00:10:39,590
that's going to
represent a zero bit.

233
00:10:39,590 --> 00:10:41,690
And so you can think
of streams of bits

234
00:10:41,690 --> 00:10:45,480
and doing stuff
with them over time.

235
00:10:45,480 --> 00:10:48,310
And so that's cool.

236
00:10:48,310 --> 00:10:51,900
Everything's going to be
oriented diagonally, of course.

237
00:10:51,900 --> 00:10:54,290
Now one useful structure.

238
00:10:54,290 --> 00:10:56,340
That's going to be our wire.

239
00:10:56,340 --> 00:10:58,720
We can also build a terminator.

240
00:10:58,720 --> 00:11:00,060
They call these eaters.

241
00:11:00,060 --> 00:11:01,580
So this is a
particular construction

242
00:11:01,580 --> 00:11:03,780
where-- and this
is frame-by-frame--

243
00:11:03,780 --> 00:11:07,130
if the glider comes
in here, it basically

244
00:11:07,130 --> 00:11:09,840
gets eaten by the eater,
and the eater remains.

245
00:11:09,840 --> 00:11:12,770
The notation, by the
way, is that the dots

246
00:11:12,770 --> 00:11:16,090
are going to be newly born
positions in the next step.

247
00:11:16,090 --> 00:11:19,220
And the holes are going
to die in the next step.

248
00:11:19,220 --> 00:11:21,800
So you can see the transition.

249
00:11:21,800 --> 00:11:22,540
Stuff happens.

250
00:11:22,540 --> 00:11:24,206
These are just things
you need to check.

251
00:11:24,206 --> 00:11:27,184
And boom, it ends up
just the eater remains.

252
00:11:27,184 --> 00:11:28,600
The eater is
otherwise still life.

253
00:11:28,600 --> 00:11:30,600
So it will just hang out.

254
00:11:30,600 --> 00:11:32,510
So you can send
gliders into an eater,

255
00:11:32,510 --> 00:11:34,380
and they'll just disappear.

256
00:11:34,380 --> 00:11:41,370
One thing to note is
that the exact offset

257
00:11:41,370 --> 00:11:43,921
of this stream versus the
eater is very critical.

258
00:11:43,921 --> 00:11:45,420
You do something a
little different,

259
00:11:45,420 --> 00:11:48,180
eater might explode or
do something else weird.

260
00:11:48,180 --> 00:11:52,110
So if you're going to
build these, be careful.

261
00:11:52,110 --> 00:11:54,280
We'll talk a little bit
more about parity and things

262
00:11:54,280 --> 00:11:55,860
in a moment.

263
00:11:55,860 --> 00:11:56,360
OK.

264
00:11:56,360 --> 00:12:01,650
So here's a fun thing you can
do with a glider gun up top,

265
00:12:01,650 --> 00:12:03,770
and a stream of bits.

266
00:12:03,770 --> 00:12:05,930
So if you have a stream
of bits coming in here.

267
00:12:05,930 --> 00:12:10,330
And you have a glider gun
shooting one, one, one, one

268
00:12:10,330 --> 00:12:13,970
down, then if you
set up your gliders

269
00:12:13,970 --> 00:12:16,400
with the exact right
offsets-- so I've

270
00:12:16,400 --> 00:12:18,690
got to shift that
gun to be precise--

271
00:12:18,690 --> 00:12:21,110
and then when gliders
hit each other,

272
00:12:21,110 --> 00:12:23,030
they annihilate each other.

273
00:12:23,030 --> 00:12:26,430
Nothing is left with
this particular offset.

274
00:12:26,430 --> 00:12:28,820
So what that means
is in some sense

275
00:12:28,820 --> 00:12:30,060
you're negating the signal.

276
00:12:30,060 --> 00:12:32,830
If a 1 comes in here,
it'll hit another 1.

277
00:12:32,830 --> 00:12:35,220
And then 0 will come out here.

278
00:12:35,220 --> 00:12:37,594
But in particular,
if there's a 0 here,

279
00:12:37,594 --> 00:12:40,010
there will be nothing to stop
this guy from going through,

280
00:12:40,010 --> 00:12:41,550
so you get a 1 out.

281
00:12:41,550 --> 00:12:43,700
So this isn't really a
negation, because whenever

282
00:12:43,700 --> 00:12:45,850
it's horizontal, it's
going to be one way.

283
00:12:45,850 --> 00:12:48,100
And whenever it's negative,
it's going to be inverted.

284
00:12:48,100 --> 00:12:49,300
But this is really a turn.

285
00:12:49,300 --> 00:12:51,310
So if I turn this and
then turn it back,

286
00:12:51,310 --> 00:12:55,220
which I think is the next
image, I can now turn a wire.

287
00:12:55,220 --> 00:12:58,470
So this is progress, but
already a little challenging.

288
00:12:58,470 --> 00:13:01,830
So we have this input wire
gets turned by the gun.

289
00:13:01,830 --> 00:13:03,800
Turn back, turn back, turn back.

290
00:13:03,800 --> 00:13:08,790
So sufficiently zoomed out,
you can do arbitrary turns.

291
00:13:08,790 --> 00:13:11,170
You can use this to delay
signals, which is useful,

292
00:13:11,170 --> 00:13:14,560
because timing is really
sensitive here with the wires

293
00:13:14,560 --> 00:13:19,290
and when there's a
one bit or a zero bit.

294
00:13:19,290 --> 00:13:21,060
Another thing you
can do with this

295
00:13:21,060 --> 00:13:24,660
is get a parity offset shift.

296
00:13:24,660 --> 00:13:26,730
Because there are actually
many different offsets

297
00:13:26,730 --> 00:13:31,920
of the gliders that all lead to
evaporation and into nothing.

298
00:13:31,920 --> 00:13:34,540
So you have to believe
this a little bit,

299
00:13:34,540 --> 00:13:36,950
but there are enough
different offsets here

300
00:13:36,950 --> 00:13:40,960
that by doing a bunch of
turns like in this picture,

301
00:13:40,960 --> 00:13:43,520
with slightly different
offsets of each of these guns,

302
00:13:43,520 --> 00:13:47,850
you can shift your signal to be
anywhere you want on the grid.

303
00:13:47,850 --> 00:13:50,000
That's good, because
all the gadgets will

304
00:13:50,000 --> 00:13:53,730
require very careful alignment.

305
00:13:53,730 --> 00:13:56,450
So, that's a shift.

306
00:13:56,450 --> 00:14:02,870
So now here's how we can do
AND and OR gates pretty easily.

307
00:14:02,870 --> 00:14:06,450
So on the one hand, if
we have two streams A, B,

308
00:14:06,450 --> 00:14:07,950
and we want to make
the end of them.

309
00:14:07,950 --> 00:14:10,070
We're going to use
a single glider gun

310
00:14:10,070 --> 00:14:12,280
to kind of merge them together.

311
00:14:12,280 --> 00:14:16,420
So a 1 is going to get
through here if and only

312
00:14:16,420 --> 00:14:18,990
if there was a 0 here.

313
00:14:18,990 --> 00:14:20,880
And in that case, it
will prevent any A

314
00:14:20,880 --> 00:14:23,330
from getting through.

315
00:14:23,330 --> 00:14:26,910
So if B was false, there's a 0,
then there'll be a glider here.

316
00:14:26,910 --> 00:14:32,817
And it will annihilate whatever
was an A, so the AND will be 0.

317
00:14:32,817 --> 00:14:34,650
On the other hand, maybe
both of them are 0.

318
00:14:34,650 --> 00:14:36,175
Then the glider will just
go up here to the eater

319
00:14:36,175 --> 00:14:37,170
and disappear.

320
00:14:37,170 --> 00:14:39,140
So that's also fine.

321
00:14:39,140 --> 00:14:44,540
And if A is zero, then there
will be nothing over there,

322
00:14:44,540 --> 00:14:45,830
obviously.

323
00:14:45,830 --> 00:14:48,580
And if they're both one,
then A will get through,

324
00:14:48,580 --> 00:14:52,980
because B will prevent the
gun here from getting there.

325
00:14:52,980 --> 00:14:54,905
So A and B have to be
sort of offset in time,

326
00:14:54,905 --> 00:14:57,030
because it takes a little
bit longer for the signal

327
00:14:57,030 --> 00:15:00,300
to get here, but
you get the And.

328
00:15:00,300 --> 00:15:07,880
And similarly for the OR, if
you want to send up a gun here,

329
00:15:07,880 --> 00:15:10,460
and then it's essentially
getting negated on the right.

330
00:15:10,460 --> 00:15:12,760
So for there to be
an output in the OR,

331
00:15:12,760 --> 00:15:14,450
there must be nothing here.

332
00:15:14,450 --> 00:15:17,800
And so for a glider
to be blocked,

333
00:15:17,800 --> 00:15:20,170
either A blocks
it or B blocks it.

334
00:15:20,170 --> 00:15:23,710
So then the output
is the OR of A and B.

335
00:15:23,710 --> 00:15:28,194
And because everything
here is horizontal,

336
00:15:28,194 --> 00:15:29,360
we're not negating anything.

337
00:15:29,360 --> 00:15:30,080
That's actually annoying.

338
00:15:30,080 --> 00:15:32,250
It would be better if
we had an AND and an OR.

339
00:15:32,250 --> 00:15:34,922
Or an AND or an OR, cause
then it would be done.

340
00:15:34,922 --> 00:15:36,005
So we still need negation.

341
00:15:36,005 --> 00:15:40,816

342
00:15:40,816 --> 00:15:41,440
Yeah, question.

343
00:15:41,440 --> 00:15:44,830
AUDIENCE: If you go
back into this line,

344
00:15:44,830 --> 00:15:47,148
you are going to have
this A and B output

345
00:15:47,148 --> 00:15:49,583
there as well, to
get the terminator.

346
00:15:49,583 --> 00:15:51,702
In the right-hand diagram.

347
00:15:51,702 --> 00:15:52,410
PROFESSOR: Right.

348
00:15:52,410 --> 00:15:52,840
Right.

349
00:15:52,840 --> 00:15:53,010
Sorry.

350
00:15:53,010 --> 00:15:54,820
So there should also
be an eater here,

351
00:15:54,820 --> 00:15:58,180
because this is
not fully occupied.

352
00:15:58,180 --> 00:15:58,850
Good.

353
00:15:58,850 --> 00:16:00,308
But because this
is fully occupied,

354
00:16:00,308 --> 00:16:01,560
we don't need an eater there.

355
00:16:01,560 --> 00:16:03,620
Cause this is fully occupied,
we don't need and eater here.

356
00:16:03,620 --> 00:16:05,245
You could put them
in for good measure.

357
00:16:05,245 --> 00:16:09,550
But, cool.

358
00:16:09,550 --> 00:16:12,500
So before I show
you the next gadget,

359
00:16:12,500 --> 00:16:16,860
I need another fun tool
called the kick back.

360
00:16:16,860 --> 00:16:20,370
So this is of somewhat weirder
offset between two gliders.

361
00:16:20,370 --> 00:16:23,710
So one's coming in this way,
the other is coming in this way.

362
00:16:23,710 --> 00:16:25,440
And stuff happens.

363
00:16:25,440 --> 00:16:30,100
And then this glider
goes backwards.

364
00:16:30,100 --> 00:16:32,380
Returns along its original spot.

365
00:16:32,380 --> 00:16:33,490
So this is really cool.

366
00:16:33,490 --> 00:16:35,210
It means if you're
sending a glider,

367
00:16:35,210 --> 00:16:37,020
if you can kind of
head it off at the pass

368
00:16:37,020 --> 00:16:38,880
with the perpendicular
glider, you

369
00:16:38,880 --> 00:16:42,329
can cause that glider to come
back the way it was going.

370
00:16:42,329 --> 00:16:47,430
Which I think exactly
the same offset, even.

371
00:16:47,430 --> 00:16:50,260
So this is useful
for a lot of things.

372
00:16:50,260 --> 00:16:53,690
In particular, it lets
us build a crossover.

373
00:16:53,690 --> 00:16:55,579
So the idea with a
crossover is that instead

374
00:16:55,579 --> 00:17:02,089
of every-- a glider gun produces
gliders at a certain rate.

375
00:17:02,089 --> 00:17:04,400
Call that rate one.

376
00:17:04,400 --> 00:17:08,550
When it's so dense, if
you cross two streams,

377
00:17:08,550 --> 00:17:10,955
you're guaranteed collisions
and something unintentional

378
00:17:10,955 --> 00:17:12,050
will happen.

379
00:17:12,050 --> 00:17:13,920
But if I could just
thin out the stream so

380
00:17:13,920 --> 00:17:18,790
that every 10th
position is a glider,

381
00:17:18,790 --> 00:17:22,500
and then we only look at the
bits, you know, modular 10,

382
00:17:22,500 --> 00:17:24,650
then there will be no
problem to do crossings.

383
00:17:24,650 --> 00:17:27,570
You just have to set up the
parity so that the gap happens

384
00:17:27,570 --> 00:17:29,130
whenever the other guy happens.

385
00:17:29,130 --> 00:17:30,050
And vice versa.

386
00:17:30,050 --> 00:17:33,230
So they'll never
collide with each other.

387
00:17:33,230 --> 00:17:35,070
Even if it's all ones.

388
00:17:35,070 --> 00:17:39,050
So here's how you
thin out a stream.

389
00:17:39,050 --> 00:17:43,400
We have a single
glider here, which

390
00:17:43,400 --> 00:17:47,560
is just going to be kicked back
and forth, just hanging out.

391
00:17:47,560 --> 00:17:52,100
And on the other hand, we
have these guns-- G1, G2, G3.

392
00:17:52,100 --> 00:17:55,920
So this is going to
replace a single gun.

393
00:17:55,920 --> 00:18:01,690
So this is the notation for
the kickback minute mechanism.

394
00:18:01,690 --> 00:18:06,110
So mostly these guys are
just going to shoot off.

395
00:18:06,110 --> 00:18:09,500
But they're set up so that
if this glider comes here,

396
00:18:09,500 --> 00:18:11,300
he gets kicked back.

397
00:18:11,300 --> 00:18:13,330
And also we lose
one glider here,

398
00:18:13,330 --> 00:18:15,150
but they're going to
eat it all up anyway,

399
00:18:15,150 --> 00:18:17,360
so it doesn't matter.

400
00:18:17,360 --> 00:18:18,680
And same thing over here.

401
00:18:18,680 --> 00:18:22,720
So this guy is mostly ones,
but every once in awhile

402
00:18:22,720 --> 00:18:24,630
this glider will come
in and get kickback,

403
00:18:24,630 --> 00:18:28,310
and consume one of the
gliders down this G2 stream.

404
00:18:28,310 --> 00:18:30,050
So there will be a
couple holes here.

405
00:18:30,050 --> 00:18:32,220
And then if you basically
negate that stream,

406
00:18:32,220 --> 00:18:34,660
so you send another
glider down through here,

407
00:18:34,660 --> 00:18:37,500
then only every once in
awhile will you have a glider.

408
00:18:37,500 --> 00:18:40,550
And by controlling this width,
you can control the rate.

409
00:18:40,550 --> 00:18:42,450
And I think in this
proof, you just

410
00:18:42,450 --> 00:18:44,000
need all of them the same rate.

411
00:18:44,000 --> 00:18:48,580
Sufficiently large
to allow crossovers.

412
00:18:48,580 --> 00:18:49,460
OK.

413
00:18:49,460 --> 00:18:51,110
Cool.

414
00:18:51,110 --> 00:18:53,889
So that's thinning
and crossover.

415
00:18:53,889 --> 00:18:54,930
AUDIENCE: Quick question.

416
00:18:54,930 --> 00:18:55,180
PROFESSOR: Yeah.

417
00:18:55,180 --> 00:18:56,763
AUDIENCE: Are glider
gun constructions

418
00:18:56,763 --> 00:18:58,912
that we know about, or
as least know about it

419
00:18:58,912 --> 00:19:01,180
at the time [INAUDIBLE]
enough that you can't just

420
00:19:01,180 --> 00:19:05,155
set the rate of fire from
the gun construction use.

421
00:19:05,155 --> 00:19:07,446
AUDIENCE: There's a gun for
every period either greater

422
00:19:07,446 --> 00:19:09,146
than or equal to 14.

423
00:19:09,146 --> 00:19:10,740
PROFESSOR: Oh, cool.

424
00:19:10,740 --> 00:19:12,087
According to--

425
00:19:12,087 --> 00:19:12,920
AUDIENCE: Wikipedia.

426
00:19:12,920 --> 00:19:13,795
PROFESSOR: Wikipedia.

427
00:19:13,795 --> 00:19:16,420
Must be true.

428
00:19:16,420 --> 00:19:19,560
I'll make a weak claim
to the extent to which I

429
00:19:19,560 --> 00:19:21,647
know glider guns, these
are not like easily

430
00:19:21,647 --> 00:19:22,605
variable constructions.

431
00:19:22,605 --> 00:19:25,590
They're kind of magical,
and they just work.

432
00:19:25,590 --> 00:19:28,056
There are probably many
different glider guns,

433
00:19:28,056 --> 00:19:29,180
each with a different rate.

434
00:19:29,180 --> 00:19:31,460
But I don't think there's
a general purpose glider

435
00:19:31,460 --> 00:19:33,604
gun with an arbitrary rate.

436
00:19:33,604 --> 00:19:35,020
Now there might
be one by now that

437
00:19:35,020 --> 00:19:39,370
has a slow enough
rate that we're OK.

438
00:19:39,370 --> 00:19:40,690
But I don't know.

439
00:19:40,690 --> 00:19:43,320
So this certainly guarantees
that yeah, you could do it.

440
00:19:43,320 --> 00:19:46,670
It's a little bit messy, but
maybe there's a simpler one.

441
00:19:46,670 --> 00:19:51,270
Life is still actively studied
so there are many more guns

442
00:19:51,270 --> 00:19:54,950
and there were in
the early '80s so I

443
00:19:54,950 --> 00:19:57,500
think I won't go through
this construction in detail,

444
00:19:57,500 --> 00:20:01,220
but using orders
and some kickbacks

445
00:20:01,220 --> 00:20:03,580
and some crazy
ideas with guns, you

446
00:20:03,580 --> 00:20:05,514
could build a split and a not.

447
00:20:05,514 --> 00:20:08,240
Is that OK?

448
00:20:08,240 --> 00:20:11,420
In particular, we're using
this idea of rate limiting,

449
00:20:11,420 --> 00:20:12,770
so there's a lot of zeroes here.

450
00:20:12,770 --> 00:20:15,130
And this is, whatever,
10 spots-- there's

451
00:20:15,130 --> 00:20:17,360
only one every 10 spots.

452
00:20:17,360 --> 00:20:23,490
And there's two cases, depending
on whether A is there or not.

453
00:20:23,490 --> 00:20:26,240
And by ORing it
together with something,

454
00:20:26,240 --> 00:20:27,990
and then having all
these chain reactions,

455
00:20:27,990 --> 00:20:35,730
we end up with a copy of A
here, and a negated copy of A

456
00:20:35,730 --> 00:20:37,820
hear with different offsets.

457
00:20:37,820 --> 00:20:38,390
Yeah.

458
00:20:38,390 --> 00:20:39,764
AUDIENCE: So for
NOT, isn't there

459
00:20:39,764 --> 00:20:42,588
the super easy gadget
of A equal gun,

460
00:20:42,588 --> 00:20:47,107
and then-- sorry-- the gun
gets through if A is not there.

461
00:20:47,107 --> 00:20:49,190
PROFESSOR: That's what we
had for the turn gadget,

462
00:20:49,190 --> 00:20:50,481
but it always turns the signal.

463
00:20:50,481 --> 00:20:52,387
AUDIENCE: And that's bad?

464
00:20:52,387 --> 00:20:53,970
PROFESSOR: That's
bad because it means

465
00:20:53,970 --> 00:20:57,410
if you think of your gadgets
having inputs horizontally,

466
00:20:57,410 --> 00:21:00,500
then you need to negate
and still be horizontal.

467
00:21:00,500 --> 00:21:02,430
So this negates and
still is horizontal.

468
00:21:02,430 --> 00:21:06,320
In their writeup, they actually
call the turn a NOT gadget.

469
00:21:06,320 --> 00:21:09,909
But I think that's not NOT.

470
00:21:09,909 --> 00:21:11,200
It depends on your perspective.

471
00:21:11,200 --> 00:21:16,560
You definitely need a
direction-preserving NOT.

472
00:21:16,560 --> 00:21:18,660
OK.

473
00:21:18,660 --> 00:21:20,310
So that's cool.

474
00:21:20,310 --> 00:21:23,150
And at this point, they say
just give this to the engineers

475
00:21:23,150 --> 00:21:25,180
and they'll build a computer.

476
00:21:25,180 --> 00:21:28,720
Once you have AND or NOT,
you can build binary logic,

477
00:21:28,720 --> 00:21:30,440
so you can do
CIRCUIT-SAT style things.

478
00:21:30,440 --> 00:21:35,040
And you could make
re-entrant circuits.

479
00:21:35,040 --> 00:21:37,560
And so you can compute
on stuff and build

480
00:21:37,560 --> 00:21:40,570
a Turing machine
with a finite size,

481
00:21:40,570 --> 00:21:43,800
or any machine of finite
size, bounded size.

482
00:21:43,800 --> 00:21:46,910
So that's enough to
prove PSPACE hardness.

483
00:21:46,910 --> 00:21:48,980
But if you want to
prove undecidability,

484
00:21:48,980 --> 00:21:52,280
you need some way to
grow up to infinity.

485
00:21:52,280 --> 00:21:55,960
And their idea is to have a
small number of registers.

486
00:21:55,960 --> 00:21:57,760
Two are enough.

487
00:21:57,760 --> 00:22:05,990
This is called a Minsky machine,
is the two-counter version.

488
00:22:05,990 --> 00:22:11,120
And Minsky proved that you
can simulate a Turing machine

489
00:22:11,120 --> 00:22:12,290
with two counters.

490
00:22:12,290 --> 00:22:13,590
What's a counter?

491
00:22:13,590 --> 00:22:16,290
It stores a
non-negative integer.

492
00:22:16,290 --> 00:22:19,810
And you have three operations--
increment, decrement, and check

493
00:22:19,810 --> 00:22:21,660
whether it's 0.

494
00:22:21,660 --> 00:22:22,930
So it's a little crazy.

495
00:22:22,930 --> 00:22:26,220
But that's enough to
simulate an entire Turing

496
00:22:26,220 --> 00:22:29,910
machine with infinite tape.

497
00:22:29,910 --> 00:22:34,080
So the rough idea is to
store a bit onto the tape.

498
00:22:34,080 --> 00:22:36,560
You double it and
possibly add one.

499
00:22:36,560 --> 00:22:40,730
And if you want to remove
something from the stack,

500
00:22:40,730 --> 00:22:43,040
then you divide by 2.

501
00:22:43,040 --> 00:22:44,560
So with four
registers, you can use

502
00:22:44,560 --> 00:22:47,520
this one to represent
one stack, and this one

503
00:22:47,520 --> 00:22:48,750
to represent the other stack.

504
00:22:48,750 --> 00:22:49,540
Dot, dot, dot.

505
00:22:49,540 --> 00:22:53,170
It's not too hard.

506
00:22:53,170 --> 00:22:56,420
So how are we going to represent
an arbitrary non-negative

507
00:22:56,420 --> 00:22:57,270
integer?

508
00:22:57,270 --> 00:22:59,000
We're going to have
a little 2 by 2

509
00:22:59,000 --> 00:23:04,310
box-- this is drawn diagonally--
somewhere along this ray.

510
00:23:04,310 --> 00:23:07,660
And then we're going to be
able to increment or decrement

511
00:23:07,660 --> 00:23:11,270
the box by sending
a wave of gliders

512
00:23:11,270 --> 00:23:13,230
using these constructions.

513
00:23:13,230 --> 00:23:19,670
Sorry, next slide we'll have the
constructions for incrementing.

514
00:23:19,670 --> 00:23:21,360
Here actually is a
glider that's going

515
00:23:21,360 --> 00:23:23,590
to test whether this
guy's currently zero.

516
00:23:23,590 --> 00:23:26,700
And he happens to be.

517
00:23:26,700 --> 00:23:28,280
And so here's how you test.

518
00:23:28,280 --> 00:23:32,080
I mean, you just send a
glider through the box.

519
00:23:32,080 --> 00:23:34,860
And there may be a cleaner test.

520
00:23:34,860 --> 00:23:36,600
This one is a destructive test.

521
00:23:36,600 --> 00:23:37,850
It destroys the box.

522
00:23:37,850 --> 00:23:40,180
But in particular, it
destroys the glider.

523
00:23:40,180 --> 00:23:43,180
So then you can have a gate
on this side that says, well,

524
00:23:43,180 --> 00:23:46,390
if I didn't get a glider, then
I know that I'm actually 0,

525
00:23:46,390 --> 00:23:49,240
and I can feed that back
to my logic circuit.

526
00:23:49,240 --> 00:23:51,870
If I do get a glider, then
I know this was empty.

527
00:23:51,870 --> 00:23:53,271
So that's pretty easy.

528
00:23:53,271 --> 00:23:55,270
The only catch is then
you've destroyed the box.

529
00:23:55,270 --> 00:23:56,810
You have to create a new box.

530
00:23:56,810 --> 00:23:59,940
And you can do that by sending
two gliders with a slightly

531
00:23:59,940 --> 00:24:00,840
different offset.

532
00:24:00,840 --> 00:24:03,530
This looks like this same as
all the others, but in this one

533
00:24:03,530 --> 00:24:05,410
you end up with
a box at the end.

534
00:24:05,410 --> 00:24:07,320
So if you send like
another one here

535
00:24:07,320 --> 00:24:09,580
and another one timed
just right here,

536
00:24:09,580 --> 00:24:11,080
you'll recreate the
box after you've

537
00:24:11,080 --> 00:24:13,610
discovered that it was there.

538
00:24:13,610 --> 00:24:15,090
So that's cool.

539
00:24:15,090 --> 00:24:16,400
And then this is a swarm.

540
00:24:16,400 --> 00:24:20,000
I think it's actually drawn
somewhat accurately to push

541
00:24:20,000 --> 00:24:23,860
this block forward by 1.

542
00:24:23,860 --> 00:24:25,640
I think it's this stream.

543
00:24:25,640 --> 00:24:27,630
So there are two
constructions here.

544
00:24:27,630 --> 00:24:33,370
One is a wave of gliders that
pulls it a block back by 3,

545
00:24:33,370 --> 00:24:34,970
another one pushes
it forward by 1.

546
00:24:34,970 --> 00:24:39,270
Together you could use this to
increment or decrement by 1.

547
00:24:39,270 --> 00:24:42,590
So I mean, lots of
details to check here.

548
00:24:42,590 --> 00:24:45,610
This one is a
little bit cleaner.

549
00:24:45,610 --> 00:24:48,490
We have one glider here,
a second glide here.

550
00:24:48,490 --> 00:24:49,550
And it ends up moving.

551
00:24:49,550 --> 00:24:52,260
It goes in this
order and then back.

552
00:24:52,260 --> 00:24:56,790
And we end up moving the box
up to here, back three spaces.

553
00:24:56,790 --> 00:25:00,410
I assume these are found
by trial and error.

554
00:25:00,410 --> 00:25:04,000
And then to push a block
forward 1, this is pretty crazy.

555
00:25:04,000 --> 00:25:10,870
Their second wave
of five gliders.

556
00:25:10,870 --> 00:25:12,538
Where's the first wave?

557
00:25:12,538 --> 00:25:14,930
AUDIENCE: Turning the
block into a honey farm.

558
00:25:14,930 --> 00:25:16,550
PROFESSOR: That's right.

559
00:25:16,550 --> 00:25:18,050
Turning the block
into a honey farm,

560
00:25:18,050 --> 00:25:20,370
which is this particular
still life pattern.

561
00:25:20,370 --> 00:25:22,580
Anyway.

562
00:25:22,580 --> 00:25:23,430
Dot, dot, dot.

563
00:25:23,430 --> 00:25:24,930
You check the results.

564
00:25:24,930 --> 00:25:25,430
It works.

565
00:25:25,430 --> 00:25:26,650
It's actually a lot
of fun to implement

566
00:25:26,650 --> 00:25:28,970
these in a life simulator
and check that it works.

567
00:25:28,970 --> 00:25:33,160
But for now I'm showing
you the ancient diagrams,

568
00:25:33,160 --> 00:25:35,740
hand-drawn diagrams.

569
00:25:35,740 --> 00:25:37,120
OK.

570
00:25:37,120 --> 00:25:41,280
So there's like a
catch with this.

571
00:25:41,280 --> 00:25:47,220
In order to generate these
gliders in this very specific

572
00:25:47,220 --> 00:25:52,690
pattern, currently the only
way we have of making gliders

573
00:25:52,690 --> 00:25:54,400
is with the glider gun.

574
00:25:54,400 --> 00:25:56,180
Glider guns are large objects.

575
00:25:56,180 --> 00:25:59,240
And you can't put them
right next to each other.

576
00:25:59,240 --> 00:26:01,050
And even worse, if
you have a glider gun,

577
00:26:01,050 --> 00:26:03,220
it's spitting out gliders
in the middle of it.

578
00:26:03,220 --> 00:26:06,790
You can't put a glider gun
shifted over a little bit

579
00:26:06,790 --> 00:26:09,574
even if you slide it
this way or that way.

580
00:26:09,574 --> 00:26:10,990
If you want to
produce two streams

581
00:26:10,990 --> 00:26:12,531
very close to each
other, one of them

582
00:26:12,531 --> 00:26:15,690
will go through the other glider
gun and destroy the glider gun.

583
00:26:15,690 --> 00:26:19,220
So you can't actually
build this kind of pattern

584
00:26:19,220 --> 00:26:21,560
with glider guns ultimately.

585
00:26:21,560 --> 00:26:23,800
But there's this
trick using kickbacks

586
00:26:23,800 --> 00:26:29,160
to get a glider to go out
far away from any guns.

587
00:26:29,160 --> 00:26:32,520
And this is to-- so
here's your original gun.

588
00:26:32,520 --> 00:26:34,860
And this one has
some holes in it.

589
00:26:34,860 --> 00:26:36,650
So you can get a
glider through here.

590
00:26:36,650 --> 00:26:40,250
And then get this glider to
bounce back and forth until you

591
00:26:40,250 --> 00:26:43,230
have the right timing.

592
00:26:43,230 --> 00:26:48,050
Then this glider will escape
through this little gap.

593
00:26:48,050 --> 00:26:51,660
And then the result is, you
send the glider basically offset

594
00:26:51,660 --> 00:26:53,840
to the right from this gun.

595
00:26:53,840 --> 00:26:55,970
So using that, you can
have a bunch of glider guns

596
00:26:55,970 --> 00:26:58,160
sort of around
where you need it.

597
00:26:58,160 --> 00:26:59,950
Get all the gliders to come up.

598
00:26:59,950 --> 00:27:01,340
And now you're very narrow.

599
00:27:01,340 --> 00:27:03,464
You could have two gliders
right next to each other

600
00:27:03,464 --> 00:27:05,060
without any trouble.

601
00:27:05,060 --> 00:27:07,000
So you do a bunch of
these constructions

602
00:27:07,000 --> 00:27:09,280
at various heights.

603
00:27:09,280 --> 00:27:11,590
So this is the picture of
two glider guns, one shooting

604
00:27:11,590 --> 00:27:12,714
a glider through the other.

605
00:27:12,714 --> 00:27:13,600
That's bad.

606
00:27:13,600 --> 00:27:17,210
So instead, we'll put
these away from it,

607
00:27:17,210 --> 00:27:21,410
and send the gliders offset
to be like that, using

608
00:27:21,410 --> 00:27:23,300
two of these constructions.

609
00:27:23,300 --> 00:27:23,950
OK.

610
00:27:23,950 --> 00:27:28,290
So now we can increment and
decrement, and test for 0.

611
00:27:28,290 --> 00:27:34,380
With this similar trick
we can do some fun stuff

612
00:27:34,380 --> 00:27:38,770
in sending gliders
forward and backward.

613
00:27:38,770 --> 00:27:40,550
So this is cool.

614
00:27:40,550 --> 00:27:42,590
Remember I said that
you could send a glider

615
00:27:42,590 --> 00:27:45,900
and cause it to come
back using the kickback.

616
00:27:45,900 --> 00:27:47,650
So normally if you
want to send the glider

617
00:27:47,650 --> 00:27:50,420
and have it come back,
you need another glider

618
00:27:50,420 --> 00:27:52,840
to be shot this way.

619
00:27:52,840 --> 00:27:55,097
So that's OK in some cases.

620
00:27:55,097 --> 00:27:57,430
But here's a cool construction
where all the gliders are

621
00:27:57,430 --> 00:28:00,120
way down here, and still I
can make the glider go up

622
00:28:00,120 --> 00:28:02,639
and then come back
at some desired time.

623
00:28:02,639 --> 00:28:03,930
And it's the same kind of idea.

624
00:28:03,930 --> 00:28:06,138
You use this construction
to make this glider go back

625
00:28:06,138 --> 00:28:07,750
and forth, spend lots of time.

626
00:28:07,750 --> 00:28:10,720
And then eventually hit this guy
at just the right orientation

627
00:28:10,720 --> 00:28:11,990
to send it back.

628
00:28:11,990 --> 00:28:13,852
And if you have
some more stuff, you

629
00:28:13,852 --> 00:28:16,060
could actually get it to go
back and forth many times

630
00:28:16,060 --> 00:28:19,230
and come over
farther to the right.

631
00:28:19,230 --> 00:28:21,350
Why do I care about this?

632
00:28:21,350 --> 00:28:24,050
For self-destruction.

633
00:28:24,050 --> 00:28:29,340
So the idea is if the Turing
machine says yes, if it stops,

634
00:28:29,340 --> 00:28:32,960
then you want the entire
thing to collapse to nothing.

635
00:28:32,960 --> 00:28:35,577
And so when you get
to this magical state,

636
00:28:35,577 --> 00:28:37,660
you're going to send out
a whole bunch of gliders,

637
00:28:37,660 --> 00:28:40,201
and then turn them around using
the mechanism I just showed--

638
00:28:40,201 --> 00:28:42,100
the boomerang--
and get them to hit

639
00:28:42,100 --> 00:28:46,210
every gadget in the construction
at exactly the right offset

640
00:28:46,210 --> 00:28:47,980
to make them disappear.

641
00:28:47,980 --> 00:28:51,240
This is how you kill an eater
from going from slightly

642
00:28:51,240 --> 00:28:52,820
wrong orientation.

643
00:28:52,820 --> 00:28:54,730
This is how you destroy a gun.

644
00:28:54,730 --> 00:28:56,590
It ends up with nothing.

645
00:28:56,590 --> 00:28:59,500

646
00:28:59,500 --> 00:29:00,000
Oh.

647
00:29:00,000 --> 00:29:00,140
Sorry.

648
00:29:00,140 --> 00:29:00,760
This is a gun.

649
00:29:00,760 --> 00:29:02,240
This is a how you
destroy a square.

650
00:29:02,240 --> 00:29:04,260
We already saw that.

651
00:29:04,260 --> 00:29:08,057
So all of that infrastructure
being able to precisely place

652
00:29:08,057 --> 00:29:10,640
gliders exactly where you need
them, lots of details to check.

653
00:29:10,640 --> 00:29:14,110
But you should be able
to get them all come out

654
00:29:14,110 --> 00:29:14,850
and come back.

655
00:29:14,850 --> 00:29:20,000
And you always hit them in
the backside of the guns.

656
00:29:20,000 --> 00:29:22,200
I think first you kill
all the guns so they

657
00:29:22,200 --> 00:29:23,390
stop generating gliders.

658
00:29:23,390 --> 00:29:25,310
You let the gliders
get eaten by eaters.

659
00:29:25,310 --> 00:29:28,930
And then you go out and destroy
all the eaters and squares

660
00:29:28,930 --> 00:29:29,690
and so on.

661
00:29:29,690 --> 00:29:31,785
So, pretty epic.

662
00:29:31,785 --> 00:29:35,690
But in the end we
get undecidability

663
00:29:35,690 --> 00:29:39,480
of life in an infinite board.

664
00:29:39,480 --> 00:29:43,620
So zero-player is
more interesting

665
00:29:43,620 --> 00:29:45,387
than you might expect.

666
00:29:45,387 --> 00:29:46,970
This is certainly
one of the more epic

667
00:29:46,970 --> 00:29:48,922
proofs in that direction.

668
00:29:48,922 --> 00:29:50,380
Next thing I want
to tell you about

669
00:29:50,380 --> 00:29:53,110
is zero-player constraint logic.

670
00:29:53,110 --> 00:29:55,660
This is called deterministic
constraint logic, as opposed

671
00:29:55,660 --> 00:29:58,000
to nondeterministic
constraint logic, which

672
00:29:58,000 --> 00:29:59,980
we talked about last time.

673
00:29:59,980 --> 00:30:03,100
So let me define it for you.

674
00:30:03,100 --> 00:30:14,570

675
00:30:14,570 --> 00:30:18,390
So in deterministic
constraint logic

676
00:30:18,390 --> 00:30:21,890
we have a little bit more state.

677
00:30:21,890 --> 00:30:25,550
Before it's just in
the state of a machine

678
00:30:25,550 --> 00:30:28,180
is just the orientations
of all the edges.

679
00:30:28,180 --> 00:30:29,770
Now we're also
going to have-- it's

680
00:30:29,770 --> 00:30:31,790
a little hard to see
on this projector--

681
00:30:31,790 --> 00:30:37,309
but there's some highlighted
edges which are active.

682
00:30:37,309 --> 00:30:39,100
So I'll describe what
they are in a moment.

683
00:30:39,100 --> 00:30:42,810
So even if you can't see
them, they are there.

684
00:30:42,810 --> 00:30:48,910
Active literally means that
you just flipped the edge

685
00:30:48,910 --> 00:30:50,674
in the previous step.

686
00:30:50,674 --> 00:30:52,090
So deterministic
constraint logic,

687
00:30:52,090 --> 00:30:54,930
we're going to be flipping
multiple edges at once

688
00:30:54,930 --> 00:30:55,720
in one round.

689
00:30:55,720 --> 00:30:59,560
And in the next round, those
edges are all called active.

690
00:30:59,560 --> 00:31:03,050
And the rest are inactive.

691
00:31:03,050 --> 00:31:04,600
Now that's for edges.

692
00:31:04,600 --> 00:31:09,970
We're going to define a
vertex to be active basically

693
00:31:09,970 --> 00:31:13,690
if that reversal did
something useful.

694
00:31:13,690 --> 00:31:30,050
So if its active incoming
edges have total weight greater

695
00:31:30,050 --> 00:31:31,790
or equal to 2.

696
00:31:31,790 --> 00:31:37,190
So if the just flipped edges
satisfy that vertex possibly

697
00:31:37,190 --> 00:31:40,960
in a new way, then we
call the vertex active.

698
00:31:40,960 --> 00:31:43,740
It's been activated by
what just got flipped.

699
00:31:43,740 --> 00:31:46,155
And then here's what we're
going to do in each round.

700
00:31:46,155 --> 00:31:53,680

701
00:31:53,680 --> 00:32:01,320
We are going to reverse
inactive edges pointing

702
00:32:01,320 --> 00:32:05,570
to active vertices.

703
00:32:05,570 --> 00:32:14,090

704
00:32:14,090 --> 00:32:22,886
And we're going to reverse
active edges pointing

705
00:32:22,886 --> 00:32:23,760
to inactive vertices.

706
00:32:23,760 --> 00:32:37,260

707
00:32:37,260 --> 00:32:41,070
And then these reversed edges
are the new active edges.

708
00:32:41,070 --> 00:32:51,140

709
00:32:51,140 --> 00:32:52,620
OK.

710
00:32:52,620 --> 00:32:56,030
So let's look at an example.

711
00:32:56,030 --> 00:32:57,450
So here's a little gadget.

712
00:32:57,450 --> 00:32:59,075
We're actually going
to use this gadget

713
00:32:59,075 --> 00:33:02,540
in proving PSPACE
completeness of this model.

714
00:33:02,540 --> 00:33:07,630
And initially just
this edge is active.

715
00:33:07,630 --> 00:33:11,700
And if that's all that happens--
now there's some inputs

716
00:33:11,700 --> 00:33:15,010
and outputs here-- if
that's all that happens,

717
00:33:15,010 --> 00:33:16,310
this edge is active.

718
00:33:16,310 --> 00:33:18,990
It alone does not
satisfy this vertex.

719
00:33:18,990 --> 00:33:21,390
So this vertex is inactive.

720
00:33:21,390 --> 00:33:25,050
And in the inactive case,
if the vertex is inactive,

721
00:33:25,050 --> 00:33:27,200
we're supposed to
reverse the active edge.

722
00:33:27,200 --> 00:33:29,340
This is basically bouncing back.

723
00:33:29,340 --> 00:33:30,910
If you try to
satisfy a vertex, you

724
00:33:30,910 --> 00:33:33,320
didn't satisfy it, you
just undo what you did.

725
00:33:33,320 --> 00:33:35,360
You're going to
reverse the edge.

726
00:33:35,360 --> 00:33:38,820
So what's going to
happen here is this guy

727
00:33:38,820 --> 00:33:40,700
will just flip back and forth.

728
00:33:40,700 --> 00:33:42,070
First he's gonna go this way.

729
00:33:42,070 --> 00:33:43,220
Says, oh, I didn't
satisfy this one.

730
00:33:43,220 --> 00:33:44,220
So I'll reverse this edge.

731
00:33:44,220 --> 00:33:45,120
Now it points into here.

732
00:33:45,120 --> 00:33:46,600
Still doesn't
satisfy that vertex.

733
00:33:46,600 --> 00:33:47,590
It's inactive.

734
00:33:47,590 --> 00:33:50,080
So this guy will just
flip back and forth

735
00:33:50,080 --> 00:33:55,300
forever until here we're
drawing the picture where

736
00:33:55,300 --> 00:33:59,370
A reverses, so because
of some gadget below it.

737
00:33:59,370 --> 00:34:02,920
Suppose A reverses at the same
time this one is reversing.

738
00:34:02,920 --> 00:34:04,630
So now this edge is active.

739
00:34:04,630 --> 00:34:06,469
And this edge is active.

740
00:34:06,469 --> 00:34:08,389
Still this guy didn't
satisfy what he wants.

741
00:34:08,389 --> 00:34:11,170
So he's going to reverse
again in the next step.

742
00:34:11,170 --> 00:34:14,500
But this guy did satisfy the
vertex because he has weight 2.

743
00:34:14,500 --> 00:34:18,739
So now it alone
satisfies this vertex.

744
00:34:18,739 --> 00:34:20,719
So now both of these
are going to reverse.

745
00:34:20,719 --> 00:34:22,600
This is the forward case.

746
00:34:22,600 --> 00:34:25,870
We have a active edge
satisfying-- so now

747
00:34:25,870 --> 00:34:28,170
this vertex is active.

748
00:34:28,170 --> 00:34:32,420
We're going to reverse
these inactive edges which

749
00:34:32,420 --> 00:34:34,094
point to the active vertex.

750
00:34:34,094 --> 00:34:35,260
So we end up flipping those.

751
00:34:35,260 --> 00:34:36,885
Now they're pointing
out of the vertex.

752
00:34:36,885 --> 00:34:38,200
This one remains pointing in.

753
00:34:38,200 --> 00:34:40,996
It's no longer active, because
we didn't just flip it.

754
00:34:40,996 --> 00:34:43,370
So we propagate from this
being active to these two being

755
00:34:43,370 --> 00:34:43,870
active.

756
00:34:43,870 --> 00:34:46,280
This is a splitter.

757
00:34:46,280 --> 00:34:48,790
We have the signal and we
split it into two parts.

758
00:34:48,790 --> 00:34:51,510
So it's acting like the
splitter that we know and love

759
00:34:51,510 --> 00:34:53,200
from last lecture.

760
00:34:53,200 --> 00:34:53,700
OK.

761
00:34:53,700 --> 00:34:56,790
Meanwhile, this guy
just reversed again.

762
00:34:56,790 --> 00:34:59,740
But now these two are
simultaneously here.

763
00:34:59,740 --> 00:35:03,590
So together, those two active
edges satisfy the vertex.

764
00:35:03,590 --> 00:35:06,570
So this vertex is active, which
will flip that edge up there.

765
00:35:06,570 --> 00:35:09,540

766
00:35:09,540 --> 00:35:10,590
Yes.

767
00:35:10,590 --> 00:35:14,870
I should say this vertex
is a little bit weird.

768
00:35:14,870 --> 00:35:17,900
You could think of there being
a red to blue conversion here.

769
00:35:17,900 --> 00:35:21,960
This guy only has a
desired weight of 1.

770
00:35:21,960 --> 00:35:24,060
This is basically a
red edge, but it's

771
00:35:24,060 --> 00:35:26,130
subdivided to fix the timing.

772
00:35:26,130 --> 00:35:28,860
So we'll see how to get
rid of that subdivision.

773
00:35:28,860 --> 00:35:31,080
But you can think of
this as a red to blue.

774
00:35:31,080 --> 00:35:33,030
And there's two blue edges here.

775
00:35:33,030 --> 00:35:36,760
But this one edge will
actually satisfy this vertex.

776
00:35:36,760 --> 00:35:40,120
And so then this guy
flips in the next stage.

777
00:35:40,120 --> 00:35:43,480
And then it's just
going to hang out here,

778
00:35:43,480 --> 00:35:46,720
flipping back and
forth along this path.

779
00:35:46,720 --> 00:35:50,110
And meanwhile, this will
go off and do something

780
00:35:50,110 --> 00:35:55,200
until it comes back
and reverses the edge.

781
00:35:55,200 --> 00:35:58,650
And I should say at this
point-- because there

782
00:35:58,650 --> 00:36:00,329
are a lot of timing
issues here, we're

783
00:36:00,329 --> 00:36:02,370
going to set up all the
gadgets so that they only

784
00:36:02,370 --> 00:36:08,340
get an input edge reversed
at times divisible by 4.

785
00:36:08,340 --> 00:36:11,070
So this one happened at time 0.

786
00:36:11,070 --> 00:36:14,300
And then this one we know will
happen at a certain parity

787
00:36:14,300 --> 00:36:15,540
relative to 4.

788
00:36:15,540 --> 00:36:18,050
And so we know when this
guy has gotten flipped,

789
00:36:18,050 --> 00:36:21,120
this one will also
have just been flipped.

790
00:36:21,120 --> 00:36:24,362
And then stuff happens.

791
00:36:24,362 --> 00:36:26,195
And then this edge ends
up getting reversed.

792
00:36:26,195 --> 00:36:28,850

793
00:36:28,850 --> 00:36:30,570
And then more stuff happens.

794
00:36:30,570 --> 00:36:33,170
Then this edge gets
reversed again.

795
00:36:33,170 --> 00:36:35,910
And then the A gets
reversed again.

796
00:36:35,910 --> 00:36:38,330
So this gadget has
sort of three cycles.

797
00:36:38,330 --> 00:36:42,590
When you reverse A, first B will
reverse, then C will reverse,

798
00:36:42,590 --> 00:36:46,986
then B will reverse,
then A will reverse.

799
00:36:46,986 --> 00:36:48,110
It's a little bit overkill.

800
00:36:48,110 --> 00:36:50,390
But we're going to use
this to check two options.

801
00:36:50,390 --> 00:36:51,931
We're just going to
check one of them

802
00:36:51,931 --> 00:36:55,790
twice because that's
what we can build easily.

803
00:36:55,790 --> 00:36:56,290
OK.

804
00:36:56,290 --> 00:37:01,450
So now we want to prove PSPACE
completeness of this model.

805
00:37:01,450 --> 00:37:04,860
The decision question is again,
does a particular edge ever

806
00:37:04,860 --> 00:37:07,420
get reversed?

807
00:37:07,420 --> 00:37:13,100
And so we're going to reduce in
the usual way from quantified

808
00:37:13,100 --> 00:37:14,360
CNF-SAT.

809
00:37:14,360 --> 00:37:18,170
We have our blocks which
represent quantifiers.

810
00:37:18,170 --> 00:37:20,350
They're going to produce
variable settings.

811
00:37:20,350 --> 00:37:21,915
We're going to have
some CNF logic.

812
00:37:21,915 --> 00:37:24,290
And then in the end, this is
actually not quite accurate.

813
00:37:24,290 --> 00:37:26,560
We're going to get some
satisfied signal which

814
00:37:26,560 --> 00:37:29,620
is piped into these guys.

815
00:37:29,620 --> 00:37:31,910
So the first thing
that has to change

816
00:37:31,910 --> 00:37:33,640
are the quantifier gadgets.

817
00:37:33,640 --> 00:37:35,390
In particular, the
existential quantifier

818
00:37:35,390 --> 00:37:42,130
needs to change because before
we let the player decide

819
00:37:42,130 --> 00:37:45,540
whether to choose x or x bar.

820
00:37:45,540 --> 00:37:48,360
So in this case, we're going
to use the gadget you just saw,

821
00:37:48,360 --> 00:37:53,180
the little wheel, which
will try x being false.

822
00:37:53,180 --> 00:37:56,937
Then it will try x being true,
then it will try x being false.

823
00:37:56,937 --> 00:37:58,770
And all we need is that
one of them is true.

824
00:37:58,770 --> 00:38:01,260
So if at any point this
formula is satisfied,

825
00:38:01,260 --> 00:38:03,320
we'll just output that
formula satisfied.

826
00:38:03,320 --> 00:38:05,970
We have four edges here
because everything needs

827
00:38:05,970 --> 00:38:09,000
to work modular 4 in timing.

828
00:38:09,000 --> 00:38:12,670
So there's a little bit
more going on here, which

829
00:38:12,670 --> 00:38:14,360
I will get into in a moment.

830
00:38:14,360 --> 00:38:17,880
On the other hand, universal
quantifier is similar.

831
00:38:17,880 --> 00:38:19,710
I think I will leave it at that.

832
00:38:19,710 --> 00:38:22,630
There's this generator
to try all the options.

833
00:38:22,630 --> 00:38:25,360
This is going to act in
some sense like the one

834
00:38:25,360 --> 00:38:28,250
bit of memory, the latch,
that we had before.

835
00:38:28,250 --> 00:38:29,150
So it's similar.

836
00:38:29,150 --> 00:38:31,530
But I think the details
are not worth getting into.

837
00:38:31,530 --> 00:38:34,172
If you look at the appendix of
Games, Puzzles, Computation,

838
00:38:34,172 --> 00:38:36,130
you'll see an explicit
execution of this thing.

839
00:38:36,130 --> 00:38:37,270
I mean, it's like life.

840
00:38:37,270 --> 00:38:39,420
You just run it through
and see if it works.

841
00:38:39,420 --> 00:38:41,830
And it does.

842
00:38:41,830 --> 00:38:46,600
So what's going on
up here is that when

843
00:38:46,600 --> 00:38:50,550
we set x bar to be false,
we're going to flip this edge.

844
00:38:50,550 --> 00:38:56,316
And we're basically telling
the circuit, hey, x is false.

845
00:38:56,316 --> 00:38:57,690
And then at some
point it's going

846
00:38:57,690 --> 00:39:00,590
to acknowledge and say, OK.

847
00:39:00,590 --> 00:39:01,970
I understand that x is false.

848
00:39:01,970 --> 00:39:04,205

849
00:39:04,205 --> 00:39:07,210
But that's going to be
on a different channel.

850
00:39:07,210 --> 00:39:10,240
So let me illustrate the issue.

851
00:39:10,240 --> 00:39:14,550
So this is how we
used to do CNF logic.

852
00:39:14,550 --> 00:39:22,870
We did ANDs of ORs using OR
vertices and AND vertices.

853
00:39:22,870 --> 00:39:25,485
And that was cool if we had
a signal for what was true

854
00:39:25,485 --> 00:39:27,110
and what was false,
we could throw away

855
00:39:27,110 --> 00:39:29,980
signals we didn't need.

856
00:39:29,980 --> 00:39:33,660
Then this would propagate
and produce a true answer.

857
00:39:33,660 --> 00:39:35,380
Nondeterministically it would.

858
00:39:35,380 --> 00:39:38,570
But deterministically there's
a lot of timing issues here.

859
00:39:38,570 --> 00:39:41,027
Everything has to arrive
at the inputs at exactly

860
00:39:41,027 --> 00:39:41,610
the same time.

861
00:39:41,610 --> 00:39:44,480
And AND will only work if
this edge and this edge

862
00:39:44,480 --> 00:39:47,110
simultaneously reverse.

863
00:39:47,110 --> 00:39:47,620
So OK.

864
00:39:47,620 --> 00:39:50,590
Maybe you could subdivide enough
edges to fix the timing issue.

865
00:39:50,590 --> 00:39:52,370
But it's worse than that.

866
00:39:52,370 --> 00:39:54,950
If you're doing an
AND of two things,

867
00:39:54,950 --> 00:39:58,680
and you discover that
the answer is false,

868
00:39:58,680 --> 00:40:00,470
then all bets are off.

869
00:40:00,470 --> 00:40:03,640
So normally that would be
OK, because we can always

870
00:40:03,640 --> 00:40:04,480
undo what we did.

871
00:40:04,480 --> 00:40:07,700
But we need to guarantee that
the deterministic constraint

872
00:40:07,700 --> 00:40:11,780
machine will exactly undo
what it was supposed to do.

873
00:40:11,780 --> 00:40:14,000
So it's an issue that if
one of these comes in true

874
00:40:14,000 --> 00:40:16,000
and the other's false,
this one will bounce back

875
00:40:16,000 --> 00:40:18,130
and then chaos will happen.

876
00:40:18,130 --> 00:40:20,800
We'll end up getting
edges just randomly

877
00:40:20,800 --> 00:40:23,210
reversing it at annoying times.

878
00:40:23,210 --> 00:40:25,690
So that seems messy.

879
00:40:25,690 --> 00:40:29,240
And so instead we build
this much safer version

880
00:40:29,240 --> 00:40:33,330
called AND prime, OR prime,
and split prime, I guess.

881
00:40:33,330 --> 00:40:39,260
There should be a prime
there where each input

882
00:40:39,260 --> 00:40:40,620
is represented by two things.

883
00:40:40,620 --> 00:40:44,370
First the signal, and
then the acknowledgement.

884
00:40:44,370 --> 00:40:47,340
And so there's some
details to check here.

885
00:40:47,340 --> 00:40:49,530
The OR is particularly messy.

886
00:40:49,530 --> 00:40:53,480
But these are just deterministic
constraint logic machines.

887
00:40:53,480 --> 00:40:58,500
You see this gadget yet
again to try various things.

888
00:40:58,500 --> 00:41:02,790
But in this case, if
input 1 comes at sometime

889
00:41:02,790 --> 00:41:09,500
before input 2, then it will
essentially-- so this comes up.

890
00:41:09,500 --> 00:41:11,590
The signal gets split out here.

891
00:41:11,590 --> 00:41:13,730
And so we send off
the acknowledgement.

892
00:41:13,730 --> 00:41:15,830
And then this edge
will, I think,

893
00:41:15,830 --> 00:41:19,030
just be flipping back and forth.

894
00:41:19,030 --> 00:41:21,550
So it's basically holding
the input for awhile.

895
00:41:21,550 --> 00:41:23,880
And later, the second
input could come in.

896
00:41:23,880 --> 00:41:26,050
And it will trigger
this to happen, and also

897
00:41:26,050 --> 00:41:28,425
trigger the output, and also
trigger the acknowledgement,

898
00:41:28,425 --> 00:41:30,650
cause it does all the things.

899
00:41:30,650 --> 00:41:35,870
So that is roughly
how that works.

900
00:41:35,870 --> 00:41:39,350
So I think the details are not
worth spending more time on.

901
00:41:39,350 --> 00:41:44,070
This is the final thing after
you have all the CNF logic come

902
00:41:44,070 --> 00:41:48,500
out, then this is how
you end up sending

903
00:41:48,500 --> 00:41:56,010
it to satisfy out to the
quantifiers, which are here.

904
00:41:56,010 --> 00:41:57,890
So it's a bit messy.

905
00:41:57,890 --> 00:41:59,860
But the main point
is that this works.

906
00:41:59,860 --> 00:42:03,510
And so hopefully we can use
deterministic constraint logic

907
00:42:03,510 --> 00:42:06,160
to prove lots of interesting
zero-player games are hard.

908
00:42:06,160 --> 00:42:08,410
We don't know very many
interesting zero-player games.

909
00:42:08,410 --> 00:42:11,360
So please help in finding them.

910
00:42:11,360 --> 00:42:13,510
There's one detail I'd
like to get rid of though.

911
00:42:13,510 --> 00:42:18,490
These degree 2 vertices, it
would be nicer to avoid those.

912
00:42:18,490 --> 00:42:23,600
So this is a bunch of reductions
to get rid of degree 2 vertices

913
00:42:23,600 --> 00:42:25,960
and keep things mod 4.

914
00:42:25,960 --> 00:42:28,650
So we're going to
take every edge

915
00:42:28,650 --> 00:42:32,010
and subdivide it into
a path of length 4,

916
00:42:32,010 --> 00:42:37,540
because then if we have two
red edges in the original graph

917
00:42:37,540 --> 00:42:41,510
together, instead of replacing
it by two red paths of length

918
00:42:41,510 --> 00:42:45,100
4, we're going to
replace it by two paths

919
00:42:45,100 --> 00:42:48,195
here, with the first
and last edge being red,

920
00:42:48,195 --> 00:42:50,240
but everything else being blue.

921
00:42:50,240 --> 00:42:53,380
The motivation
for that is now we

922
00:42:53,380 --> 00:42:57,940
just have blue, blue
edges and red, blue edges.

923
00:42:57,940 --> 00:42:59,350
No red, reds.

924
00:42:59,350 --> 00:43:02,880
To get a blue, blue, we just
add on a thing like this

925
00:43:02,880 --> 00:43:04,200
that's forced to be out.

926
00:43:04,200 --> 00:43:06,975
And this will be satisfied if
and only if one of these is in.

927
00:43:06,975 --> 00:43:09,560
So we've done that
kind of trick before.

928
00:43:09,560 --> 00:43:12,090
And red, blue edges, we've
explicitly done before.

929
00:43:12,090 --> 00:43:13,642
So we know how to
deal with those.

930
00:43:13,642 --> 00:43:15,350
And so we do all the
subdivision in order

931
00:43:15,350 --> 00:43:16,516
to get rid of the red, reds.

932
00:43:16,516 --> 00:43:20,210
Also where these guys have
a smaller weight constraint,

933
00:43:20,210 --> 00:43:22,180
just one of them has to be in.

934
00:43:22,180 --> 00:43:27,450
So now we have no
degree 2 vertices.

935
00:43:27,450 --> 00:43:29,920
The other thing is, we
have a non-planar graph.

936
00:43:29,920 --> 00:43:31,795
It would be nice to get
rid of the crossings.

937
00:43:31,795 --> 00:43:34,255
AUDIENCE: Don't you still
have a timing issue?

938
00:43:34,255 --> 00:43:36,817

939
00:43:36,817 --> 00:43:39,150
PROFESSOR: This should preserve
the fact that everything

940
00:43:39,150 --> 00:43:42,250
happens at time 0 mod 4.

941
00:43:42,250 --> 00:43:44,550
So we'll slow everything
down by a factor of 4.

942
00:43:44,550 --> 00:43:47,210
But it shouldn't
be a timing issue.

943
00:43:47,210 --> 00:43:49,720
And because these
things are rigid,

944
00:43:49,720 --> 00:43:53,860
they don't have any timing.

945
00:43:53,860 --> 00:43:54,640
OK.

946
00:43:54,640 --> 00:43:56,360
So next we get rid of crossings.

947
00:43:56,360 --> 00:43:59,380
This actually is a
little easier for once.

948
00:43:59,380 --> 00:44:03,080
This was how we implemented
a red, red, red, red vertex

949
00:44:03,080 --> 00:44:05,550
in the crossover gadget for NCL.

950
00:44:05,550 --> 00:44:08,370
But here it's actually
enough as a crossover,

951
00:44:08,370 --> 00:44:13,265
because we have the luxury
of timing in some sense.

952
00:44:13,265 --> 00:44:14,890
There are a lot of
things that could've

953
00:44:14,890 --> 00:44:16,473
happened undeterministically
that just

954
00:44:16,473 --> 00:44:18,840
can't happen deterministically.

955
00:44:18,840 --> 00:44:19,560
So does it work?

956
00:44:19,560 --> 00:44:22,920
Here I pasted in the figure.

957
00:44:22,920 --> 00:44:25,480
You run it through and you check
that it works in both cases.

958
00:44:25,480 --> 00:44:27,960
If they don't activate at
the same time, then it works.

959
00:44:27,960 --> 00:44:30,418
Activated at the same time, I
don't know what would happen.

960
00:44:30,418 --> 00:44:34,440
But we can offset all the timing
so there are no collisions.

961
00:44:34,440 --> 00:44:36,450
And boom, we get crossovers.

962
00:44:36,450 --> 00:44:49,350
So the conclusion is
deterministic constraint logic

963
00:44:49,350 --> 00:45:07,830
is PSPACE complete for
a planar and OR graphs.

964
00:45:07,830 --> 00:45:12,140
I think I actually
want to also say split.

965
00:45:12,140 --> 00:45:15,520
So normally we think of AND
and OR as the same thing.

966
00:45:15,520 --> 00:45:23,850
But it is helpful to
distinguish them based

967
00:45:23,850 --> 00:45:25,100
on their initial orientations.

968
00:45:25,100 --> 00:45:28,720

969
00:45:28,720 --> 00:45:33,215
An AND would
probably be this way.

970
00:45:33,215 --> 00:45:34,880
Because you want
to activate this,

971
00:45:34,880 --> 00:45:37,550
and you can only do that if both
of these have been activated.

972
00:45:37,550 --> 00:45:40,880
And so this is the output.

973
00:45:40,880 --> 00:45:42,370
For a split, this is the input.

974
00:45:42,370 --> 00:45:44,820
So it's initially not active.

975
00:45:44,820 --> 00:45:46,570
And then it wold look
something like that.

976
00:45:46,570 --> 00:45:48,528
So if you want to
distinguish between these two

977
00:45:48,528 --> 00:45:49,980
vertex-- sorry.

978
00:45:49,980 --> 00:45:53,270
This should be the other way.

979
00:45:53,270 --> 00:45:55,990
If you want to distinguish what
the initial orientations are,

980
00:45:55,990 --> 00:45:58,950
then you also need
to list split here.

981
00:45:58,950 --> 00:46:01,070
So up to you whether you
feel like doing that.

982
00:46:01,070 --> 00:46:04,958

983
00:46:04,958 --> 00:46:05,930
OK.

984
00:46:05,930 --> 00:46:08,330
That's all I want to say
about zero-player games.

985
00:46:08,330 --> 00:46:09,780
Any questions?

986
00:46:09,780 --> 00:46:11,478
AUDIENCE: What should
happen in the end?

987
00:46:11,478 --> 00:46:13,190
Everything is--

988
00:46:13,190 --> 00:46:16,440
PROFESSOR: In the end, if you
satisfy the whole formula then

989
00:46:16,440 --> 00:46:21,810
you will get here,
this edge will reverse.

990
00:46:21,810 --> 00:46:24,930
And so the decision question
is, does this edge reverse?

991
00:46:24,930 --> 00:46:27,080
Either it will or it won't.

992
00:46:27,080 --> 00:46:29,930
In both cases, I think
the behavior's periodic.

993
00:46:29,930 --> 00:46:32,660
Because it's a funny thing.

994
00:46:32,660 --> 00:46:33,745
Yeah.

995
00:46:33,745 --> 00:46:35,620
AUDIENCE: So there were
two decision problems

996
00:46:35,620 --> 00:46:37,525
for nondeterministic
constraint logic.

997
00:46:37,525 --> 00:46:40,990
One of them was can you
reach this configuration.

998
00:46:40,990 --> 00:46:42,970
Another one was can
you fit this edge?

999
00:46:42,970 --> 00:46:44,665
Do you know anything about--

1000
00:46:44,665 --> 00:46:45,290
PROFESSOR: Yes.

1001
00:46:45,290 --> 00:46:48,120

1002
00:46:48,120 --> 00:46:48,620
OK.

1003
00:46:48,620 --> 00:46:50,260
If you want to
solve configuration

1004
00:46:50,260 --> 00:46:55,620
to configuration for DCL,
I think you can basically

1005
00:46:55,620 --> 00:46:57,780
add some red edges here.

1006
00:46:57,780 --> 00:47:00,700
So if this thing
activates-- well,

1007
00:47:00,700 --> 00:47:03,220
you need to do a little bit
more of a construction here.

1008
00:47:03,220 --> 00:47:05,594
But I want to
basically get an edge

1009
00:47:05,594 --> 00:47:06,760
to start flipping over here.

1010
00:47:06,760 --> 00:47:08,160
Whereas before it
was not flipping.

1011
00:47:08,160 --> 00:47:09,701
I think you can get
an edge flipping,

1012
00:47:09,701 --> 00:47:11,506
and then everything inverts.

1013
00:47:11,506 --> 00:47:13,630
And then you will be in
the original configuration,

1014
00:47:13,630 --> 00:47:14,700
except this guy
will be flipping.

1015
00:47:14,700 --> 00:47:16,570
If you set your parity
right, then he'll

1016
00:47:16,570 --> 00:47:19,300
be flipped in a state
where everything else is

1017
00:47:19,300 --> 00:47:20,590
in its original state.

1018
00:47:20,590 --> 00:47:22,061
So, pretty sure.

1019
00:47:22,061 --> 00:47:23,560
I forget whether
that's in the book.

1020
00:47:23,560 --> 00:47:27,040
But I think configuration to
configuration, also PSPACE

1021
00:47:27,040 --> 00:47:29,750
complete for DCL.

1022
00:47:29,750 --> 00:47:30,250
Good.

1023
00:47:30,250 --> 00:47:33,920

1024
00:47:33,920 --> 00:47:39,060
So let's move on to
multiplayer games.

1025
00:47:39,060 --> 00:47:46,940
First I'd like to reduce
to the two-player case.

1026
00:47:46,940 --> 00:47:49,940

1027
00:47:49,940 --> 00:47:52,532
So there's a big difference
between one and two players.

1028
00:47:52,532 --> 00:47:53,990
But there's not so
big a difference

1029
00:47:53,990 --> 00:47:57,070
between two and three and
four and five and six players.

1030
00:47:57,070 --> 00:47:59,260
At least the usual
decision problem

1031
00:47:59,260 --> 00:48:04,685
is, does the first player
have a winning strategy.

1032
00:48:04,685 --> 00:48:09,520

1033
00:48:09,520 --> 00:48:13,080
Can the first player
win, basically.

1034
00:48:13,080 --> 00:48:16,780
Sometimes this is
called a forced win.

1035
00:48:16,780 --> 00:48:19,440
If a player forces a win.

1036
00:48:19,440 --> 00:48:21,990
If you think of it this way,
and all the other players

1037
00:48:21,990 --> 00:48:23,660
are free agents,
then the worst case

1038
00:48:23,660 --> 00:48:26,970
is when they all collude
to try to make you not win.

1039
00:48:26,970 --> 00:48:29,510
So that would be the
opposite of a forced win.

1040
00:48:29,510 --> 00:48:32,420
If it's not possible
for you to force a win,

1041
00:48:32,420 --> 00:48:35,000
that means the players can
somehow work together in order

1042
00:48:35,000 --> 00:48:36,210
to prevent you from winning.

1043
00:48:36,210 --> 00:48:38,460
So in that sense, they are
all essentially one player.

1044
00:48:38,460 --> 00:48:40,940
You can thinking of
them as one hive mind.

1045
00:48:40,940 --> 00:48:42,780
Now in the mechanics
of the game, of course

1046
00:48:42,780 --> 00:48:46,000
there are differences between
two players and three players,

1047
00:48:46,000 --> 00:48:49,140
because they have more
power in some sense.

1048
00:48:49,140 --> 00:48:51,830
They can do three things for
every time you do one thing.

1049
00:48:51,830 --> 00:48:54,550
But at some level that is
just a two-player game again,

1050
00:48:54,550 --> 00:48:57,190
where you are
relatively impoverished

1051
00:48:57,190 --> 00:48:59,310
compared to your opponent.

1052
00:48:59,310 --> 00:49:00,950
So the asymmetric,
but still two-player

1053
00:49:00,950 --> 00:49:03,600
game from a
complexity standpoint.

1054
00:49:03,600 --> 00:49:05,670
So we just need to think
about two-player games

1055
00:49:05,670 --> 00:49:07,490
and their complexity.

1056
00:49:07,490 --> 00:49:10,220
Later we'll add some variations
that make this not true.

1057
00:49:10,220 --> 00:49:14,070
But in a perfect information
deterministic game,

1058
00:49:14,070 --> 00:49:18,420
this is true, this
reduction is true.

1059
00:49:18,420 --> 00:49:20,420
So for a two
players, we're going

1060
00:49:20,420 --> 00:49:23,050
to have-- at least
for the duration

1061
00:49:23,050 --> 00:49:24,720
of this lecture--
the two players will

1062
00:49:24,720 --> 00:49:27,220
be called white and black.

1063
00:49:27,220 --> 00:49:30,610
In Winning Ways for example,
they're called red and blue.

1064
00:49:30,610 --> 00:49:32,630
But this is problematic
because we have

1065
00:49:32,630 --> 00:49:33,870
red and blue edges already.

1066
00:49:33,870 --> 00:49:40,180
And I want red, white edges and
blue, black edges and so on.

1067
00:49:40,180 --> 00:49:44,590
So the players will be white and
black as in chess, checkers--

1068
00:49:44,590 --> 00:49:45,260
not checkers.

1069
00:49:45,260 --> 00:49:46,990
Go, whatever.

1070
00:49:46,990 --> 00:49:50,210
But color renaming.

1071
00:49:50,210 --> 00:49:52,310
OK.

1072
00:49:52,310 --> 00:49:55,420
And I'm going to
focus today on games

1073
00:49:55,420 --> 00:50:06,130
that have a polynomial number
of moves in any execution, which

1074
00:50:06,130 --> 00:50:10,830
places the problem into PSPACE.

1075
00:50:10,830 --> 00:50:13,920
So again, we're going to
aim for PSPACE completeness.

1076
00:50:13,920 --> 00:50:16,840
It's PSPACE because you
can think of this question

1077
00:50:16,840 --> 00:50:21,760
as being equivalent to, do I
have a move such that no matter

1078
00:50:21,760 --> 00:50:25,070
how the opponent
responds to that move--

1079
00:50:25,070 --> 00:50:26,840
so every move for
the opponent, which

1080
00:50:26,840 --> 00:50:31,340
I will call response--
I have another move

1081
00:50:31,340 --> 00:50:37,000
such that no matter what
the opponent does dot,

1082
00:50:37,000 --> 00:50:39,420
dot, dot through the
polynomial number of moves.

1083
00:50:39,420 --> 00:50:41,810
If there's only a
polynomial in many moves,

1084
00:50:41,810 --> 00:50:45,080
then there's only a polynomial
number of quantifiers here.

1085
00:50:45,080 --> 00:50:47,520
And then in the
formula I'm going

1086
00:50:47,520 --> 00:50:50,050
to write whatever
the rules of the game

1087
00:50:50,050 --> 00:50:54,480
are, and then AND it
together with I win.

1088
00:50:54,480 --> 00:50:57,660

1089
00:50:57,660 --> 00:50:59,730
I think you believe
almost all games you

1090
00:50:59,730 --> 00:51:04,560
can write as some Boolean
formula to do that.

1091
00:51:04,560 --> 00:51:07,450
Some polynomial-sized Boolean
formula saying at each

1092
00:51:07,450 --> 00:51:12,260
step you satisfy what you need.

1093
00:51:12,260 --> 00:51:15,230
And so this is a QSAT problem.

1094
00:51:15,230 --> 00:51:20,180

1095
00:51:20,180 --> 00:51:23,740
And therefore, any
two-player game

1096
00:51:23,740 --> 00:51:26,685
where you can write moves and
responses succinctly and have

1097
00:51:26,685 --> 00:51:29,880
a polynomial number
of moves is in PSPACE,

1098
00:51:29,880 --> 00:51:33,271
because you can
reduce it to QSAT.

1099
00:51:33,271 --> 00:51:33,770
OK.

1100
00:51:33,770 --> 00:51:35,840
So that's why
PSPACE is the class

1101
00:51:35,840 --> 00:51:38,840
we care about for
polynomially bounded games.

1102
00:51:38,840 --> 00:51:42,710
So now we want to
prove hardness.

1103
00:51:42,710 --> 00:51:45,020
And first I want to give
you some hard problems

1104
00:51:45,020 --> 00:51:50,280
in this setting starting
with SAT-style games.

1105
00:51:50,280 --> 00:51:56,070

1106
00:51:56,070 --> 00:51:59,545
This is from another paper
by Shaefer, same guy who

1107
00:51:59,545 --> 00:52:03,370
did Shaefer Dichotomy Theorem.

1108
00:52:03,370 --> 00:52:06,680
He also did some
nice stuff on games.

1109
00:52:06,680 --> 00:52:16,720
So first game is just your
favorite flavor of QSAT.

1110
00:52:16,720 --> 00:52:19,290
You can think of it as a game.

1111
00:52:19,290 --> 00:52:22,920
Because QSAT is exactly of this
form, you can think of the game

1112
00:52:22,920 --> 00:52:26,880
as-- in your first move you're
going to choose this variable.

1113
00:52:26,880 --> 00:52:28,790
In your second
move, your opponent

1114
00:52:28,790 --> 00:52:30,300
is going to choose
this variable.

1115
00:52:30,300 --> 00:52:33,020
In the third move you
choose this variable.

1116
00:52:33,020 --> 00:52:33,560
And so on.

1117
00:52:33,560 --> 00:52:36,210
Because play alternates,
you are following

1118
00:52:36,210 --> 00:52:40,550
exactly an alternating
quantifier kind of thing.

1119
00:52:40,550 --> 00:52:45,190
And the goal of player one
is to satisfy this formula.

1120
00:52:45,190 --> 00:52:48,147
The goal player two is to have
it not satisfied in the end.

1121
00:52:48,147 --> 00:52:49,730
And so player one
will win if and only

1122
00:52:49,730 --> 00:52:52,760
if this formula is true.

1123
00:52:52,760 --> 00:52:55,100
So in the game, you think of
it as there are a sequence

1124
00:52:55,100 --> 00:52:57,630
of variables-- x1, x2, x3.

1125
00:52:57,630 --> 00:53:02,140
Play alternates between
assigning xi and xi plus 1.

1126
00:53:02,140 --> 00:53:04,727
Player one's always
assigning the odd variables.

1127
00:53:04,727 --> 00:53:06,810
Player two is always
assigning the even variables.

1128
00:53:06,810 --> 00:53:09,030
And then if the
formula is satisfied,

1129
00:53:09,030 --> 00:53:12,380
then player one wins.

1130
00:53:12,380 --> 00:53:14,910
OK.

1131
00:53:14,910 --> 00:53:23,380
So this is what you
might call the game

1132
00:53:23,380 --> 00:53:32,600
version of a satisfiable formula
is that player one wins if

1133
00:53:32,600 --> 00:53:35,540
and only if the formula
is satisfied in the end.

1134
00:53:35,540 --> 00:53:45,640

1135
00:53:45,640 --> 00:53:47,370
But there's some
other goal conditions

1136
00:53:47,370 --> 00:53:50,860
you might consider
that Schaefer defines.

1137
00:53:50,860 --> 00:53:59,710
One is called Seek,
which is the first player

1138
00:53:59,710 --> 00:54:09,480
to satisfy the formula wins.

1139
00:54:09,480 --> 00:54:16,922
And so in general, if you're
choosing some variables,

1140
00:54:16,922 --> 00:54:18,630
you have a set of
variables, some of them

1141
00:54:18,630 --> 00:54:20,620
have been assigned 0 or 1.

1142
00:54:20,620 --> 00:54:22,610
Some of them haven't
been assigned yet.

1143
00:54:22,610 --> 00:54:24,050
So when I say
satisfy here, I mean

1144
00:54:24,050 --> 00:54:30,870
that unassigned things are 0.

1145
00:54:30,870 --> 00:54:35,385
So if you think of everything as
initially 0, whoever satisfies

1146
00:54:35,385 --> 00:54:38,380
the formula first wins.

1147
00:54:38,380 --> 00:54:42,870
Then the opposite
version is Void.

1148
00:54:42,870 --> 00:54:46,632
So the first person to
satisfy the formula loses.

1149
00:54:46,632 --> 00:54:48,125
So the formula starts false.

1150
00:54:48,125 --> 00:54:51,710

1151
00:54:51,710 --> 00:54:54,260
And the first person to set
it to true loses the game.

1152
00:54:54,260 --> 00:54:56,190
Other person wins.

1153
00:54:56,190 --> 00:54:56,690
OK.

1154
00:54:56,690 --> 00:55:02,360
So those are some rule
variations of the goal state.

1155
00:55:02,360 --> 00:55:04,188
Now let me tell you
about the moves.

1156
00:55:04,188 --> 00:55:13,590

1157
00:55:13,590 --> 00:55:21,520
So other than QSAT, we're going
to have two types of moves.

1158
00:55:21,520 --> 00:55:23,130
One is impartial moves.

1159
00:55:23,130 --> 00:55:27,850
Impartial means that both
players have the same moves.

1160
00:55:27,850 --> 00:55:32,970
So an impartial move is
going to be whoever's playing

1161
00:55:32,970 --> 00:55:37,437
sets an unassigned variable.

1162
00:55:37,437 --> 00:55:39,020
So on all of these
games, you can only

1163
00:55:39,020 --> 00:55:42,610
assign a variable once.

1164
00:55:42,610 --> 00:55:44,180
If you can assign
it multiple times,

1165
00:55:44,180 --> 00:55:45,971
then you're no longer
polynomially bounded,

1166
00:55:45,971 --> 00:55:48,170
and you get x time completeness.

1167
00:55:48,170 --> 00:55:50,390
But for the polynomially
bounded games,

1168
00:55:50,390 --> 00:55:52,490
we're going to define
each variable can only

1169
00:55:52,490 --> 00:55:53,330
be assigned once.

1170
00:55:53,330 --> 00:55:55,920
And in a partial
game, any player

1171
00:55:55,920 --> 00:55:58,760
can assign any variable
that's not yet assigned.

1172
00:55:58,760 --> 00:55:59,260
OK.

1173
00:55:59,260 --> 00:56:03,270
So whereas in QSAT, you
had a fixed ordering.

1174
00:56:03,270 --> 00:56:06,520
First x1, then x2, then x3.

1175
00:56:06,520 --> 00:56:14,740
An impartial game
version of SAT, players

1176
00:56:14,740 --> 00:56:16,760
take turns setting
variables, any one they want.

1177
00:56:16,760 --> 00:56:18,270
It's not yet assigned.

1178
00:56:18,270 --> 00:56:21,830
And in the end, if the formula
is satisfied, player one wins.

1179
00:56:21,830 --> 00:56:23,820
That would be impartial game.

1180
00:56:23,820 --> 00:56:26,040
But I could also do impartial
seek, impartial void.

1181
00:56:26,040 --> 00:56:28,930

1182
00:56:28,930 --> 00:56:31,860
And then by the way,
I made up these names.

1183
00:56:31,860 --> 00:56:36,610
So they don't match
what Shaefer calls them.

1184
00:56:36,610 --> 00:56:37,880
But these are more modern.

1185
00:56:37,880 --> 00:56:40,930
These terms are in
Winning Ways, for example.

1186
00:56:40,930 --> 00:56:41,950
Seek and Avoid he used.

1187
00:56:41,950 --> 00:56:44,940
But the other ones I made up.

1188
00:56:44,940 --> 00:56:45,750
OK.

1189
00:56:45,750 --> 00:56:50,950
Partisan version is that
there are white variables

1190
00:56:50,950 --> 00:56:53,610
and there are black variables.

1191
00:56:53,610 --> 00:56:57,940
And the white player can
only set white variables,

1192
00:56:57,940 --> 00:57:02,030
black player can only
set black variables.

1193
00:57:02,030 --> 00:57:04,750
There's 50% of each.

1194
00:57:04,750 --> 00:57:10,670
And so they balance if you
play all the way to the end,

1195
00:57:10,670 --> 00:57:17,570
like in the game
version, then it's

1196
00:57:17,570 --> 00:57:21,754
OK to have the white player play
any unsatisfied white variable

1197
00:57:21,754 --> 00:57:22,920
and set it to true or false.

1198
00:57:22,920 --> 00:57:25,710

1199
00:57:25,710 --> 00:57:27,760
I think that defines all
the games that I want.

1200
00:57:27,760 --> 00:57:29,890
Now let me tell you which
combinations are PSPACE

1201
00:57:29,890 --> 00:57:30,390
complete.

1202
00:57:30,390 --> 00:57:32,990

1203
00:57:32,990 --> 00:57:35,590
A bunch of them.

1204
00:57:35,590 --> 00:57:38,770
So impartial.

1205
00:57:38,770 --> 00:57:40,500
In addition to this
characterization,

1206
00:57:40,500 --> 00:57:43,680
there's also all the different
versions of SAT that we know.

1207
00:57:43,680 --> 00:57:51,180
So we have impartial
game positive 11-SAT.

1208
00:57:51,180 --> 00:57:53,740

1209
00:57:53,740 --> 00:57:55,340
So this is a version of CNF.

1210
00:57:55,340 --> 00:57:57,570
Instead of 3-SAT, I have 11-SAT.

1211
00:57:57,570 --> 00:58:00,260
There are no negative literals.

1212
00:58:00,260 --> 00:58:02,360
And it's impartial.

1213
00:58:02,360 --> 00:58:04,420
So anyone could
set any variable.

1214
00:58:04,420 --> 00:58:06,230
And it's the game
version, so player one

1215
00:58:06,230 --> 00:58:07,310
wants to set it true.

1216
00:58:07,310 --> 00:58:09,952
Player two wants the
formula to be false.

1217
00:58:09,952 --> 00:58:10,910
That's PSPACE complete.

1218
00:58:10,910 --> 00:58:13,520

1219
00:58:13,520 --> 00:58:21,215
Also, if we do 11-DNF-SAT, so
a DNF formula with positive.

1220
00:58:21,215 --> 00:58:24,410

1221
00:58:24,410 --> 00:58:25,930
This is also as hard.

1222
00:58:25,930 --> 00:58:28,940
I mean, that essentially
corresponds to flipping

1223
00:58:28,940 --> 00:58:29,842
all the quantifiers.

1224
00:58:29,842 --> 00:58:31,425
So that doesn't make
a big difference.

1225
00:58:31,425 --> 00:58:34,930

1226
00:58:34,930 --> 00:58:37,550
So this is cool because
positive SAT is usually

1227
00:58:37,550 --> 00:58:40,650
pretty easy with all
existential quantifiers.

1228
00:58:40,650 --> 00:58:43,156
With alternating
quantifiers, not so easy.

1229
00:58:43,156 --> 00:58:44,112
Yeah.

1230
00:58:44,112 --> 00:58:48,440
AUDIENCE: Is impartial game
positive 10-SAT [INAUDIBLE]?

1231
00:58:48,440 --> 00:58:51,860
PROFESSOR: We don't
know the exact cutoff.

1232
00:58:51,860 --> 00:58:55,240
There is a paper, I think,
proving six is enough.

1233
00:58:55,240 --> 00:58:57,380
But the positive disappears.

1234
00:58:57,380 --> 00:59:02,380
So I think that's an open
problem, how low you could go.

1235
00:59:02,380 --> 00:59:05,280

1236
00:59:05,280 --> 00:59:07,800
It's hard to do the
usual kind of reductions

1237
00:59:07,800 --> 00:59:12,180
from many occurrences
to fewer, because games

1238
00:59:12,180 --> 00:59:17,030
are very sensitive about who's
playing win, timing, and so on.

1239
00:59:17,030 --> 00:59:23,000
So next one is
partisan game CNF-SAT.

1240
00:59:23,000 --> 00:59:24,300
Here we don't have positive.

1241
00:59:24,300 --> 00:59:26,530
And we don't have the bound 11.

1242
00:59:26,530 --> 00:59:29,340
But we changed
impartial to partisan.

1243
00:59:29,340 --> 00:59:32,240
That still is hard.

1244
00:59:32,240 --> 00:59:34,420
And next we have a
whole bunch of games

1245
00:59:34,420 --> 00:59:38,980
that work both for impartial
and partisan moves.

1246
00:59:38,980 --> 00:59:46,900

1247
00:59:46,900 --> 00:59:47,400
OK.

1248
00:59:47,400 --> 00:59:53,800
So we have avoid
positive 2-DNF-SAT.

1249
00:59:53,800 --> 00:59:56,370

1250
00:59:56,370 --> 01:00:02,445
We have seek positive 3-DNF-SAT.

1251
01:00:02,445 --> 01:00:05,750

1252
01:00:05,750 --> 01:00:16,220
We have avoid positive CNF-SAT.

1253
01:00:16,220 --> 01:00:17,805
And we have seek
positive CNF-SAT.

1254
01:00:17,805 --> 01:00:24,290

1255
01:00:24,290 --> 01:00:26,682
So the main point is,
most combinations are

1256
01:00:26,682 --> 01:00:27,890
hard for some version of SAT.

1257
01:00:27,890 --> 01:00:31,950
And these are the tightest
ones that Shaefer could show.

1258
01:00:31,950 --> 01:00:34,800
Doesn't necessarily
mean that they're tight.

1259
01:00:34,800 --> 01:00:37,459
And there's no
dichotomy theorem here,

1260
01:00:37,459 --> 01:00:39,500
so we don't know exactly
which problems are hard.

1261
01:00:39,500 --> 01:00:41,800
But this is a ton of
games to start from.

1262
01:00:41,800 --> 01:00:47,750
And in particular, we're going
to use at least one of them.

1263
01:00:47,750 --> 01:00:48,400
OK.

1264
01:00:48,400 --> 01:00:49,770
Let's maybe go over here.

1265
01:00:49,770 --> 01:01:02,240

1266
01:01:02,240 --> 01:01:03,150
OK.

1267
01:01:03,150 --> 01:01:09,190
A couple more problems
which are in Shaefer paper.

1268
01:01:09,190 --> 01:01:12,850
One's called Kayles,
one is called Geography.

1269
01:01:12,850 --> 01:01:19,850

1270
01:01:19,850 --> 01:01:22,480
Kayles is essentially
the two-player version

1271
01:01:22,480 --> 01:01:24,460
of independent set.

1272
01:01:24,460 --> 01:01:26,810
So there are a
couple of versions.

1273
01:01:26,810 --> 01:01:34,295
There is node Kayles and
bipartite node Kayles.

1274
01:01:34,295 --> 01:01:37,861

1275
01:01:37,861 --> 01:01:41,590
These are the traditional names.

1276
01:01:41,590 --> 01:01:44,060
You could also think of
this is impartial Kayles

1277
01:01:44,060 --> 01:01:47,220
and this as partisan Kayles.

1278
01:01:47,220 --> 01:01:49,340
So here the moves
are all the same.

1279
01:01:49,340 --> 01:01:51,230
The moves are here.

1280
01:01:51,230 --> 01:01:54,030
Pick any vertex, add
to an independent set.

1281
01:01:54,030 --> 01:01:56,787

1282
01:01:56,787 --> 01:01:57,370
That's a move.

1283
01:01:57,370 --> 01:01:58,600
So players take turns adding.

1284
01:01:58,600 --> 01:02:01,350
At all times, you
must add a vertex

1285
01:02:01,350 --> 01:02:02,720
that keeps it independent set.

1286
01:02:02,720 --> 01:02:04,136
So you're effectively
removing all

1287
01:02:04,136 --> 01:02:06,110
of its neighbors and itself.

1288
01:02:06,110 --> 01:02:07,910
Last player to move wins.

1289
01:02:07,910 --> 01:02:10,690
You can't move, you lose.

1290
01:02:10,690 --> 01:02:14,150
Bipartite node Kayles, you
have a bipartite graph.

1291
01:02:14,150 --> 01:02:16,995
And one side you call white,
one side you call black.

1292
01:02:16,995 --> 01:02:19,120
A white player can only
choose from the white side.

1293
01:02:19,120 --> 01:02:21,510
A black player can only
choose from the black side.

1294
01:02:21,510 --> 01:02:24,020
So these are both
PSPACE complete as well,

1295
01:02:24,020 --> 01:02:25,560
via reductions from
these problems.

1296
01:02:25,560 --> 01:02:29,930
But I don't have those
reductions with me.

1297
01:02:29,930 --> 01:02:31,230
OK.

1298
01:02:31,230 --> 01:02:33,770
So that's independent set.

1299
01:02:33,770 --> 01:02:35,900
Geography is essentially
a two-player version

1300
01:02:35,900 --> 01:02:37,400
of Longest Path.

1301
01:02:37,400 --> 01:02:41,820
It's inspired by this
real-life game where

1302
01:02:41,820 --> 01:02:43,690
one person names
a city or country

1303
01:02:43,690 --> 01:02:45,530
or pick your favorite
class of objects.

1304
01:02:45,530 --> 01:02:48,200
And then the other
player must name

1305
01:02:48,200 --> 01:02:50,540
a word whose first letter
equals the last letter

1306
01:02:50,540 --> 01:02:51,670
of the previous word.

1307
01:02:51,670 --> 01:02:53,790
So you're forming
chains of words.

1308
01:02:53,790 --> 01:02:56,180
And you can think of that
as just having a graph where

1309
01:02:56,180 --> 01:02:57,920
vertices are the
words, the edges

1310
01:02:57,920 --> 01:03:00,790
are valid moves between words.

1311
01:03:00,790 --> 01:03:03,430
Do they have some
common property.

1312
01:03:03,430 --> 01:03:06,020
So in general, you're
given a directed graph

1313
01:03:06,020 --> 01:03:07,740
and you're given a start node.

1314
01:03:07,740 --> 01:03:11,260
And you have a token
at that start node.

1315
01:03:11,260 --> 01:03:13,900

1316
01:03:13,900 --> 01:03:15,640
A move in the game
is to follow an edge,

1317
01:03:15,640 --> 01:03:18,690
to move the token along an edge.

1318
01:03:18,690 --> 01:03:21,320
But then there's some
non-repetition condition.

1319
01:03:21,320 --> 01:03:25,560
So we have node geography
where you're not

1320
01:03:25,560 --> 01:03:26,850
allowed to repeat any notes.

1321
01:03:26,850 --> 01:03:28,600
That would be the
usual longest path.

1322
01:03:28,600 --> 01:03:35,824

1323
01:03:35,824 --> 01:03:37,490
And again, the last
player to move wins.

1324
01:03:37,490 --> 01:03:39,940
If you can't make a move,
you lose the game, just

1325
01:03:39,940 --> 01:03:41,990
like the real game.

1326
01:03:41,990 --> 01:03:46,956
And on the other hand,
we have edge geography,

1327
01:03:46,956 --> 01:03:48,580
which is more like
an [INAUDIBLE] path.

1328
01:03:48,580 --> 01:03:52,870

1329
01:03:52,870 --> 01:03:55,190
The longest edge
destroying path.

1330
01:03:55,190 --> 01:03:57,410
So edge geography you're
not allowed to repeat edges.

1331
01:03:57,410 --> 01:04:00,820

1332
01:04:00,820 --> 01:04:03,320
And for each one, you could
think of a directed graph,

1333
01:04:03,320 --> 01:04:06,260
you have to follow directed
edges or an undirected graph.

1334
01:04:06,260 --> 01:04:14,120
And here undirected,
no geography is NP.

1335
01:04:14,120 --> 01:04:16,930
Directed, no geography
if PSPACE complete.

1336
01:04:16,930 --> 01:04:21,910

1337
01:04:21,910 --> 01:04:24,260
And for edge geography,
surprisingly, both

1338
01:04:24,260 --> 01:04:25,200
are PSPACE complete.

1339
01:04:25,200 --> 01:04:29,390

1340
01:04:29,390 --> 01:04:31,420
So this is a useful problem.

1341
01:04:31,420 --> 01:04:33,870
I've seen a ton of PSPACE
completeness proofs

1342
01:04:33,870 --> 01:04:35,230
based on geography.

1343
01:04:35,230 --> 01:04:37,910
It's kind of conceptually clean.

1344
01:04:37,910 --> 01:04:41,060
And I will show you one now.

1345
01:04:41,060 --> 01:04:46,280
Everyone play Othello, Reversi.

1346
01:04:46,280 --> 01:04:47,940
In general, you
have these pieces

1347
01:04:47,940 --> 01:04:50,840
which are black on one
side, white on the other.

1348
01:04:50,840 --> 01:04:52,810
The black side is
the one that you play

1349
01:04:52,810 --> 01:04:54,500
if you're the black player.

1350
01:04:54,500 --> 01:04:58,910
But then you can, for example,
if you place a new black stone

1351
01:04:58,910 --> 01:05:01,260
here, given this
configuration, because there's

1352
01:05:01,260 --> 01:05:03,920
a black string of whites
and then a black here,

1353
01:05:03,920 --> 01:05:06,269
you end up flipping
that one over.

1354
01:05:06,269 --> 01:05:08,310
Because this is black and
then a bunch of whites,

1355
01:05:08,310 --> 01:05:10,840
or black and then a space,
nothing else happens.

1356
01:05:10,840 --> 01:05:14,160
In this picture though, if
you place this black thing,

1357
01:05:14,160 --> 01:05:16,660
this is black, a bunch of
whites, then black, black,

1358
01:05:16,660 --> 01:05:18,930
bunch of whites, black,
black, bunch of whites, black.

1359
01:05:18,930 --> 01:05:21,220
So all of those flip over.

1360
01:05:21,220 --> 01:05:23,780
And your goal is to
maximize your color.

1361
01:05:23,780 --> 01:05:28,020
You want more more stones of
your color than the opponent's.

1362
01:05:28,020 --> 01:05:29,170
OK.

1363
01:05:29,170 --> 01:05:30,104
Cool game.

1364
01:05:30,104 --> 01:05:32,270
Bounded number of moves,
polynomial number of moves,

1365
01:05:32,270 --> 01:05:35,340
because every time
you add a new stone,

1366
01:05:35,340 --> 01:05:37,580
you've occupied one of
the squares on the board.

1367
01:05:37,580 --> 01:05:39,740
And you'll never get that back.

1368
01:05:39,740 --> 01:05:42,810
So n by n board would be
exactly n squared minus 4 moves,

1369
01:05:42,810 --> 01:05:45,790
because four is the
original number.

1370
01:05:45,790 --> 01:05:47,890
So this is PSPACE
complete, given

1371
01:05:47,890 --> 01:05:50,480
a particular
configuration to decide

1372
01:05:50,480 --> 01:05:52,910
whether black has a
winning strategy, say,

1373
01:05:52,910 --> 01:05:55,070
is PSPACE complete.

1374
01:05:55,070 --> 01:06:01,400
And most of the
construction is in here.

1375
01:06:01,400 --> 01:06:03,680
This box is actually
this picture.

1376
01:06:03,680 --> 01:06:06,810
And that's going to
simulate geography.

1377
01:06:06,810 --> 01:06:08,950
But let me tell you
about this other part.

1378
01:06:08,950 --> 01:06:10,970
So right now white has
a huge amount of area.

1379
01:06:10,970 --> 01:06:12,230
This is actually really big.

1380
01:06:12,230 --> 01:06:16,877
So I guess this is very thin,
so there's not much action here.

1381
01:06:16,877 --> 01:06:18,710
Here you've got a huge
amount of white area.

1382
01:06:18,710 --> 01:06:21,750
So white will win unless
black can take this part.

1383
01:06:21,750 --> 01:06:24,710
And what happens is
there's a gap here.

1384
01:06:24,710 --> 01:06:28,311
And if black can play
any of these spots,

1385
01:06:28,311 --> 01:06:29,810
now black won't be
able to play here

1386
01:06:29,810 --> 01:06:32,190
if there's some corresponding
black thing over here.

1387
01:06:32,190 --> 01:06:36,020
So that's what these long
horizontal channels will be.

1388
01:06:36,020 --> 01:06:38,230
So if black can play over
here, because there's

1389
01:06:38,230 --> 01:06:42,010
a black stone and long
white channels here,

1390
01:06:42,010 --> 01:06:44,890
then this will flip to black.

1391
01:06:44,890 --> 01:06:47,350
And then in this
picture is this.

1392
01:06:47,350 --> 01:06:53,170
So if one of these stones
up here is now black,

1393
01:06:53,170 --> 01:06:56,660
that means you can
play at position alpha.

1394
01:06:56,660 --> 01:06:59,180
And if I play at position
alpha, black plays there.

1395
01:06:59,180 --> 01:07:01,790
Then I get black
all the way here.

1396
01:07:01,790 --> 01:07:05,250
White can't really
respond much to that.

1397
01:07:05,250 --> 01:07:07,190
And then in the next
black move, black

1398
01:07:07,190 --> 01:07:09,340
can go here and flip that one.

1399
01:07:09,340 --> 01:07:13,897
And then black can go
here in the corner.

1400
01:07:13,897 --> 01:07:15,480
Corners are very
important in Othello.

1401
01:07:15,480 --> 01:07:18,820
So once you take this corner
and flip all these things to be

1402
01:07:18,820 --> 01:07:21,900
black, then I can play here,
here, here, here, here, here,

1403
01:07:21,900 --> 01:07:23,780
here and take all of these.

1404
01:07:23,780 --> 01:07:25,410
And because this
is the edge, white

1405
01:07:25,410 --> 01:07:28,390
won't be able to
take anything back.

1406
01:07:28,390 --> 01:07:30,179
So that's the threat.

1407
01:07:30,179 --> 01:07:31,970
Each of these lines is
going to be a threat

1408
01:07:31,970 --> 01:07:37,050
that if any of these
become black over here,

1409
01:07:37,050 --> 01:07:38,780
white has to turn
them back to white.

1410
01:07:38,780 --> 01:07:42,051
Otherwise, in the very next
move, black will win the game.

1411
01:07:42,051 --> 01:07:42,550
OK.

1412
01:07:42,550 --> 01:07:43,050

1413
01:07:43,050 --> 01:07:45,720
A lot of two-player game proofs
have this constant notion

1414
01:07:45,720 --> 01:07:46,220
of threat.

1415
01:07:46,220 --> 01:07:47,730
One player's basically
just slogging

1416
01:07:47,730 --> 01:07:49,730
through trying to put out fires.

1417
01:07:49,730 --> 01:07:51,150
And the other
player is constantly

1418
01:07:51,150 --> 01:07:53,149
causing fires in order
to force the other player

1419
01:07:53,149 --> 01:07:54,810
to do what they want.

1420
01:07:54,810 --> 01:07:56,680
So it almost reduces
to a one-player game.

1421
01:07:56,680 --> 01:07:58,609
But there's still
some choices involved.

1422
01:07:58,609 --> 01:08:02,446

1423
01:08:02,446 --> 01:08:04,029
Well, these are not
terribly exciting.

1424
01:08:04,029 --> 01:08:06,270
But let me show you
the typical setup.

1425
01:08:06,270 --> 01:08:10,109
This is just a turn gadget, or
it could be a degree 2 vertex.

1426
01:08:10,109 --> 01:08:12,770
I should mention we're
reducing from directed

1427
01:08:12,770 --> 01:08:19,529
no geography, where this
is directed no geography.

1428
01:08:19,529 --> 01:08:21,109
Also max degree 3.

1429
01:08:21,109 --> 01:08:27,660

1430
01:08:27,660 --> 01:08:31,460
So that means you might
have a degree 2 vertex,

1431
01:08:31,460 --> 01:08:33,020
or you might have
a degree 3 vertex.

1432
01:08:33,020 --> 01:08:34,939
There are two types
of degree 3 directed

1433
01:08:34,939 --> 01:08:42,350
vertices merging and branching.

1434
01:08:42,350 --> 01:08:44,600
So we need gadgets
for each of these.

1435
01:08:44,600 --> 01:08:46,340
Also, bipartite.

1436
01:08:46,340 --> 01:08:49,550

1437
01:08:49,550 --> 01:08:52,560
Bipartite is useful
because in geography you're

1438
01:08:52,560 --> 01:08:54,939
always moving along an edge,
which means you'll always

1439
01:08:54,939 --> 01:08:56,939
be jumping from the left
side of the bipartition

1440
01:08:56,939 --> 01:08:57,688
to the right side.

1441
01:08:57,688 --> 01:08:59,529
So you can color the
edges black and white.

1442
01:08:59,529 --> 01:09:01,420
And black player will only
play in the black side,

1443
01:09:01,420 --> 01:09:03,609
and white player will only
play in the white side.

1444
01:09:03,609 --> 01:09:04,275
So this is good.

1445
01:09:04,275 --> 01:09:07,479
You can predict who's going
to be playing in each gadget.

1446
01:09:07,479 --> 01:09:10,240
So in a degree 2 gadget, it
works something like this.

1447
01:09:10,240 --> 01:09:12,100
If white has played
here, that will

1448
01:09:12,100 --> 01:09:16,260
be because of the other gadget.

1449
01:09:16,260 --> 01:09:17,396
This is the trigger.

1450
01:09:17,396 --> 01:09:19,729
Then now this is black, a
bunch of whites, and now black

1451
01:09:19,729 --> 01:09:22,414
can play here,
reversing all of these.

1452
01:09:22,414 --> 01:09:23,330
This is a threat line.

1453
01:09:23,330 --> 01:09:25,390
And there's now a
black square, which

1454
01:09:25,390 --> 01:09:28,100
means white must
immediately play here

1455
01:09:28,100 --> 01:09:31,020
in order to reverse all of
those stones back to white.

1456
01:09:31,020 --> 01:09:34,680
But now this is a white stone,
which lets this thing trigger.

1457
01:09:34,680 --> 01:09:37,900
So now black can play at the
end of this thing, et cetera.

1458
01:09:37,900 --> 01:09:40,080
So this just propagates
a signal, does a turn.

1459
01:09:40,080 --> 01:09:41,290
It's a degree 2 vertex.

1460
01:09:41,290 --> 01:09:42,542
Whatever.

1461
01:09:42,542 --> 01:09:43,250
All those things.

1462
01:09:43,250 --> 01:09:44,833
And this is slightly
different version

1463
01:09:44,833 --> 01:09:46,882
for a different orientation,
because these things

1464
01:09:46,882 --> 01:09:47,840
have to go to the left.

1465
01:09:47,840 --> 01:09:49,490
This looks a little different.

1466
01:09:49,490 --> 01:09:49,990
OK.

1467
01:09:49,990 --> 01:09:52,620
More interesting are
the degree 3 vertices.

1468
01:09:52,620 --> 01:09:55,420
This is the type where I have
two incoming edges and one

1469
01:09:55,420 --> 01:09:56,790
outgoing.

1470
01:09:56,790 --> 01:10:00,230
Key thing here is we need to
check that we do not visit

1471
01:10:00,230 --> 01:10:01,390
this vertex more than once.

1472
01:10:01,390 --> 01:10:03,360
We came in here and
then came in again.

1473
01:10:03,360 --> 01:10:05,260
We want something bad to happen.

1474
01:10:05,260 --> 01:10:07,474
Now what should
happen bad depends on

1475
01:10:07,474 --> 01:10:09,890
whether it was the white player
moving or the black player

1476
01:10:09,890 --> 01:10:11,310
moving. if it was the
white player moving

1477
01:10:11,310 --> 01:10:13,393
and they double visit, it
means white should lose.

1478
01:10:13,393 --> 01:10:16,060
If it was the black player
moving, and they double visit,

1479
01:10:16,060 --> 01:10:17,820
it means black should lose.

1480
01:10:17,820 --> 01:10:21,849
Because of the bipartiteness,
we know which gadget to use.

1481
01:10:21,849 --> 01:10:23,140
They're almost the same gadget.

1482
01:10:23,140 --> 01:10:26,630
Just these two dots
have been added.

1483
01:10:26,630 --> 01:10:32,370
So something like, if this
activates, and it's symmetric,

1484
01:10:32,370 --> 01:10:35,960
but let's say this one
activates by white playing here,

1485
01:10:35,960 --> 01:10:38,150
then black can play
here, flip all those,

1486
01:10:38,150 --> 01:10:40,440
which has this threat
line, which means white

1487
01:10:40,440 --> 01:10:41,220
must play here.

1488
01:10:41,220 --> 01:10:42,780
Flip them all back to white.

1489
01:10:42,780 --> 01:10:45,270
But now this B1
position is white,

1490
01:10:45,270 --> 01:10:48,600
which enables black to play
here, flip all those to black.

1491
01:10:48,600 --> 01:10:51,300
This is the threat line,
therefore white must play here.

1492
01:10:51,300 --> 01:10:53,140
Can't play there.

1493
01:10:53,140 --> 01:10:54,570
And turn all these
back to white.

1494
01:10:54,570 --> 01:10:55,460
Now this is white.

1495
01:10:55,460 --> 01:10:57,940
And now this
activates down there.

1496
01:10:57,940 --> 01:10:59,900
So that's just
following the vertex.

1497
01:10:59,900 --> 01:11:00,980
No big deal.

1498
01:11:00,980 --> 01:11:03,420
But if you came
along a second time

1499
01:11:03,420 --> 01:11:07,750
and activated this as white--
now this is already white.

1500
01:11:07,750 --> 01:11:12,050
So when you play black,
you get a black here.

1501
01:11:12,050 --> 01:11:14,820
And white can't do anything.

1502
01:11:14,820 --> 01:11:17,750
There's no white stone up there.

1503
01:11:17,750 --> 01:11:19,140
Yeah.

1504
01:11:19,140 --> 01:11:21,080
Well it's entirely black.

1505
01:11:21,080 --> 01:11:23,090
If there was a white
on either side,

1506
01:11:23,090 --> 01:11:24,980
white could flip it
and get them back.

1507
01:11:24,980 --> 01:11:26,020
But you can't.

1508
01:11:26,020 --> 01:11:28,330
And so you actually have
two threat lines activated.

1509
01:11:28,330 --> 01:11:29,490
And then black wins.

1510
01:11:29,490 --> 01:11:32,280
So this is the version
where black wins.

1511
01:11:32,280 --> 01:11:35,120
If instead, we have
a white thing here,

1512
01:11:35,120 --> 01:11:36,420
everything else is the same.

1513
01:11:36,420 --> 01:11:38,620
So this was white,
this was white.

1514
01:11:38,620 --> 01:11:42,300
Black now plays here.

1515
01:11:42,300 --> 01:11:44,400
Now white can go
here and completely

1516
01:11:44,400 --> 01:11:46,350
make this thing
white, and then black

1517
01:11:46,350 --> 01:11:47,642
doesn't have any moves anymore.

1518
01:11:47,642 --> 01:11:49,474
And that's the way that
white's going to win

1519
01:11:49,474 --> 01:11:51,410
is to prevent black
from playing anymore.

1520
01:11:51,410 --> 01:11:56,100
Then the area that was white
is white, so we're done.

1521
01:11:56,100 --> 01:11:57,810
There are lots of
details here to check,

1522
01:11:57,810 --> 01:11:59,430
but that's how it works.

1523
01:11:59,430 --> 01:12:01,590
There's one more
gadget basically

1524
01:12:01,590 --> 01:12:09,180
that says this is for
one incoming edge and two

1525
01:12:09,180 --> 01:12:10,760
outgoing edges.

1526
01:12:10,760 --> 01:12:13,460
So here you want the
players to have a choice,

1527
01:12:13,460 --> 01:12:15,226
either I go this way,
or I go this way.

1528
01:12:15,226 --> 01:12:17,850
And if it's a white vertex, you
want white to make that choice.

1529
01:12:17,850 --> 01:12:20,340
If it's a black vertex, you
want black to make that choice.

1530
01:12:20,340 --> 01:12:22,340
But black is still kind
of doing all the action.

1531
01:12:22,340 --> 01:12:24,970
So it can be done.

1532
01:12:24,970 --> 01:12:28,700
When this activates,
then black plays here,

1533
01:12:28,700 --> 01:12:31,060
flipping all these things.

1534
01:12:31,060 --> 01:12:35,940
Then white plays here,
immediately flipping it back.

1535
01:12:35,940 --> 01:12:38,180
That's the trouble, is
always black is in control.

1536
01:12:38,180 --> 01:12:41,970
Now black plays here,
flipping that one guy.

1537
01:12:41,970 --> 01:12:43,560
And white has two choices.

1538
01:12:43,560 --> 01:12:46,390
It can either play here and
flip just this one, or play here

1539
01:12:46,390 --> 01:12:48,160
and flip those guys.

1540
01:12:48,160 --> 01:12:50,322
And either put a
white here or here,

1541
01:12:50,322 --> 01:12:52,030
and that will end up
activating for black

1542
01:12:52,030 --> 01:12:54,740
either this path, or this path.

1543
01:12:54,740 --> 01:12:55,930
So white made the choice.

1544
01:12:55,930 --> 01:12:57,763
And in this version,
black makes the choice.

1545
01:12:57,763 --> 01:12:59,554
That's a little easier.

1546
01:12:59,554 --> 01:13:00,390
Yeah.

1547
01:13:00,390 --> 01:13:03,870
AUDIENCE: Are these
gadgets constructable?

1548
01:13:03,870 --> 01:13:05,040
PROFESSOR: In an 8 by 8?

1549
01:13:05,040 --> 01:13:06,030
AUDIENCE: No.

1550
01:13:06,030 --> 01:13:08,020
Like from a starting
configuration.

1551
01:13:08,020 --> 01:13:11,350
Can you get to a configuration
of these gadgets?

1552
01:13:11,350 --> 01:13:13,640
PROFESSOR: Oh, I see.

1553
01:13:13,640 --> 01:13:15,730
I think so.

1554
01:13:15,730 --> 01:13:18,169
I didn't read that
as [INAUDIBLE],

1555
01:13:18,169 --> 01:13:20,210
but it wouldn't surprise
me if it's in the paper.

1556
01:13:20,210 --> 01:13:22,870
It's traditional in constructing
these generalized games

1557
01:13:22,870 --> 01:13:25,690
to actually show that you
can reach this position

1558
01:13:25,690 --> 01:13:27,730
from the initial state.

1559
01:13:27,730 --> 01:13:30,660
Although the problem makes
sense even if you can't.

1560
01:13:30,660 --> 01:13:33,090
It's more interesting to say,
well we played like crazy.

1561
01:13:33,090 --> 01:13:34,780
And then we ended
up with this thing.

1562
01:13:34,780 --> 01:13:36,740
Can you finish it off for me?

1563
01:13:36,740 --> 01:13:40,640
That's basically the
problem we'd like to solve.

1564
01:13:40,640 --> 01:13:41,674
Can white win?

1565
01:13:41,674 --> 01:13:43,090
It's like the
commentator problem.

1566
01:13:43,090 --> 01:13:43,881
People are playing.

1567
01:13:43,881 --> 01:13:47,360
And now I want to know who's
going to win at this point.

1568
01:13:47,360 --> 01:13:49,390
But I don't know for
sure for this reduction.

1569
01:13:49,390 --> 01:13:50,700
Usually they can.

1570
01:13:50,700 --> 01:13:51,200
OK.

1571
01:13:51,200 --> 01:13:54,480
So that's a sketch of
Othello PSPACE hardness

1572
01:13:54,480 --> 01:13:55,545
reduction from geography.

1573
01:13:55,545 --> 01:13:58,370

1574
01:13:58,370 --> 01:14:03,060
So the last thing I want to talk
about, back to this picture,

1575
01:14:03,060 --> 01:14:09,770
is the two-player setup
for constraint logic.

1576
01:14:09,770 --> 01:14:13,030
So polynomially
bounded, two-player game

1577
01:14:13,030 --> 01:14:15,730
should be PSPACE complete.

1578
01:14:15,730 --> 01:14:17,480
First I'm going to
talk briefly about what

1579
01:14:17,480 --> 01:14:19,720
does bounded mean in general
for constraint logic.

1580
01:14:19,720 --> 01:14:22,330
So in particular, for
one player which we know,

1581
01:14:22,330 --> 01:14:28,340
the bounded NCL means each
edge can flip only once.

1582
01:14:28,340 --> 01:14:29,537
That's our definition.

1583
01:14:29,537 --> 01:14:31,620
And that game is clearly
in NP, cause one you flip

1584
01:14:31,620 --> 01:14:33,710
all the edges, you're done.

1585
01:14:33,710 --> 01:14:35,840
And in the same way,
we prove that just

1586
01:14:35,840 --> 01:14:38,450
finding and satisfying
orientation of a constraint

1587
01:14:38,450 --> 01:14:41,880
graph is NP
complete, we can show

1588
01:14:41,880 --> 01:14:47,620
just I changed the very top
gadget, that bounded NCL,

1589
01:14:47,620 --> 01:14:50,450
you just want to flip this
one edge is NP complete.

1590
01:14:50,450 --> 01:14:51,980
Because you basically
have to make

1591
01:14:51,980 --> 01:14:53,770
a choice for each
of these vertices,

1592
01:14:53,770 --> 01:14:54,970
which way to set them.

1593
01:14:54,970 --> 01:14:56,400
And then you can propagate up.

1594
01:14:56,400 --> 01:14:59,360
We don't have to flip any edges
for this very simple proof.

1595
01:14:59,360 --> 01:15:03,510
So NP completeness
for a bounded NCL.

1596
01:15:03,510 --> 01:15:07,060
We do for this proof
need a choice gadget.

1597
01:15:07,060 --> 01:15:09,090
So all three red edges.

1598
01:15:09,090 --> 01:15:10,540
It doesn't work
to just blow it up

1599
01:15:10,540 --> 01:15:13,950
like we could before
in the bounded case.

1600
01:15:13,950 --> 01:15:14,929
OK.

1601
01:15:14,929 --> 01:15:17,220
And there's a crossover gadget
in this setting as well.

1602
01:15:17,220 --> 01:15:19,560
It's actually pretty
simple because a bounded

1603
01:15:19,560 --> 01:15:21,650
you can't revisit.

1604
01:15:21,650 --> 01:15:22,150
OK.

1605
01:15:22,150 --> 01:15:26,305
So now bounded two-player
constraint logic is called 2CL.

1606
01:15:26,305 --> 01:15:30,780
This is PSPACE complete by
pretty much the same proof

1607
01:15:30,780 --> 01:15:32,000
structure.

1608
01:15:32,000 --> 01:15:33,260
So what's the game?

1609
01:15:33,260 --> 01:15:35,010
I have white edges
and black edges.

1610
01:15:35,010 --> 01:15:39,360
Each edge is white or black,
and it's also red or blue.

1611
01:15:39,360 --> 01:15:40,370
Exclusive ORs.

1612
01:15:40,370 --> 01:15:42,852
So they're drawn as--
these are all white edges.

1613
01:15:42,852 --> 01:15:44,310
This is an example
of a black edge.

1614
01:15:44,310 --> 01:15:47,480
So the fill is white or black,
the outline is red or blue,

1615
01:15:47,480 --> 01:15:49,164
as before.

1616
01:15:49,164 --> 01:15:50,830
White players can
only flip white edges,

1617
01:15:50,830 --> 01:15:53,940
black players can
only flip black edges.

1618
01:15:53,940 --> 01:15:56,030
And otherwise it's
the same constraints.

1619
01:15:56,030 --> 01:15:57,960
I mean, the inflow
constraint doesn't care

1620
01:15:57,960 --> 01:16:00,400
whether you're black or white.

1621
01:16:00,400 --> 01:16:05,020
It's politically correct
vertices, I guess.

1622
01:16:05,020 --> 01:16:08,690
So we just need one
new type of vertex.

1623
01:16:08,690 --> 01:16:11,679
Everything else is going to
be done by the white player.

1624
01:16:11,679 --> 01:16:13,220
There's one new type
or vertex, which

1625
01:16:13,220 --> 01:16:15,960
is an incoming black edge
and an incoming white edge.

1626
01:16:15,960 --> 01:16:17,250
Call this a variable.

1627
01:16:17,250 --> 01:16:20,040
The idea is that wherever gets
there first, white or black

1628
01:16:20,040 --> 01:16:22,360
can flip it, preventing
the other player

1629
01:16:22,360 --> 01:16:23,887
from flipping their edge.

1630
01:16:23,887 --> 01:16:26,220
So that's what we're going
to use for variable settings.

1631
01:16:26,220 --> 01:16:32,500
And I'm reducing from--
remember the terminology here--

1632
01:16:32,500 --> 01:16:36,350
impartial game positive CNF-SAT.

1633
01:16:36,350 --> 01:16:37,820
The very first one here.

1634
01:16:37,820 --> 01:16:39,980
Impartial game positive CNF-SAT.

1635
01:16:39,980 --> 01:16:43,960
So player one's goal--
white is the player one.

1636
01:16:43,960 --> 01:16:46,010
Player one's goal is
to satisfy the formula

1637
01:16:46,010 --> 01:16:48,210
and flip their edge.

1638
01:16:48,210 --> 01:16:52,540
And it's the impartial
version, meaning anyone

1639
01:16:52,540 --> 01:16:54,060
can set any variable.

1640
01:16:54,060 --> 01:16:56,400
So if black plays
this edge, that's

1641
01:16:56,400 --> 01:16:58,530
going to correspond
to setting x2 false.

1642
01:16:58,530 --> 01:17:00,390
If white plays the
edge, it's going

1643
01:17:00,390 --> 01:17:02,170
to correspond to x being true.

1644
01:17:02,170 --> 01:17:04,240
Because this is a
positive formula,

1645
01:17:04,240 --> 01:17:05,840
every time white
choose a variable,

1646
01:17:05,840 --> 01:17:07,410
they're gonna want
to set it to true.

1647
01:17:07,410 --> 01:17:08,840
And every time black
sets a variable,

1648
01:17:08,840 --> 01:17:09,920
they're going to
set it to false,

1649
01:17:09,920 --> 01:17:12,560
because they want to prevent
satisfaction of the formula.

1650
01:17:12,560 --> 01:17:15,060
So that's why it's OK to
just represent it this way.

1651
01:17:15,060 --> 01:17:17,830
And then the rest
just propagates.

1652
01:17:17,830 --> 01:17:19,440
So if there are n
variables, there's

1653
01:17:19,440 --> 01:17:22,120
going to be n over 2 rounds
where all the variables get

1654
01:17:22,120 --> 01:17:22,970
set.

1655
01:17:22,970 --> 01:17:25,100
And then black can't
do anything else.

1656
01:17:25,100 --> 01:17:26,025
Just sitting there.

1657
01:17:26,025 --> 01:17:27,900
This one is not going
to be flippable because

1658
01:17:27,900 --> 01:17:30,180
of this gadget.

1659
01:17:30,180 --> 01:17:33,570
So white's just going
to fill in the formula.

1660
01:17:33,570 --> 01:17:35,560
And if it happens
to be come out true,

1661
01:17:35,560 --> 01:17:37,920
and white can flip their
edge, then they win the game.

1662
01:17:37,920 --> 01:17:41,090
And that will correspond
to the formula being true.

1663
01:17:41,090 --> 01:17:42,964
And otherwise, not.

1664
01:17:42,964 --> 01:17:43,862
Yeah.

1665
01:17:43,862 --> 01:17:45,528
AUDIENCE: So is pass
in that you can do?

1666
01:17:45,528 --> 01:17:46,860
Or they're just like--

1667
01:17:46,860 --> 01:17:50,320
PROFESSOR: In this
game you can pass.

1668
01:17:50,320 --> 01:17:52,010
I think you could
probably avoid that

1669
01:17:52,010 --> 01:17:55,600
by just adding a bunch
of floating black edges

1670
01:17:55,600 --> 01:18:00,450
that you can flip, or just
flip repeatedly until white

1671
01:18:00,450 --> 01:18:02,434
either wins, or
white doesn't win.

1672
01:18:02,434 --> 01:18:04,100
The decision question
is does white win?

1673
01:18:04,100 --> 01:18:08,440
Now we end up with a tie in
the case white doesn't win.

1674
01:18:08,440 --> 01:18:11,170
You can also change that by
having a long path of blacks.

1675
01:18:11,170 --> 01:18:13,830
And black is going to sit
there flipping, trying

1676
01:18:13,830 --> 01:18:15,080
to get to flipping their edge.

1677
01:18:15,080 --> 01:18:17,360
And the length of the
wire is exactly how long

1678
01:18:17,360 --> 01:18:19,310
it takes to fill in
all these things.

1679
01:18:19,310 --> 01:18:21,224
Yeah.

1680
01:18:21,224 --> 01:18:23,390
AUDIENCE: The reason why
they have that gadget there

1681
01:18:23,390 --> 01:18:25,490
at the end is you
need to set exactly

1682
01:18:25,490 --> 01:18:28,170
a certain number of them true?

1683
01:18:28,170 --> 01:18:31,297
Before black can, and so--

1684
01:18:31,297 --> 01:18:31,880
PROFESSOR: Oh.

1685
01:18:31,880 --> 01:18:32,380
I see.

1686
01:18:32,380 --> 01:18:33,590
Right.

1687
01:18:33,590 --> 01:18:34,334
Yeah.

1688
01:18:34,334 --> 01:18:35,500
That's a little more subtle.

1689
01:18:35,500 --> 01:18:37,550

1690
01:18:37,550 --> 01:18:39,812
OK.

1691
01:18:39,812 --> 01:18:40,770
Zero minutes remaining.

1692
01:18:40,770 --> 01:18:44,800

1693
01:18:44,800 --> 01:18:47,720
The same crossover works.

1694
01:18:47,720 --> 01:18:50,810
And you can also
build a protected OR.

1695
01:18:50,810 --> 01:18:54,330
Protected OR is where you never
have both of these coming in.

1696
01:18:54,330 --> 01:18:56,540
If you allow me the
notion of a free edge,

1697
01:18:56,540 --> 01:18:58,914
which is just floating there
and can be reversed whenever

1698
01:18:58,914 --> 01:19:03,390
you want, this is a white edge,
then this will act as a OR,

1699
01:19:03,390 --> 01:19:06,564
because this choice gadget can
only go one way or the other.

1700
01:19:06,564 --> 01:19:08,230
It's only one of the
inputs can actually

1701
01:19:08,230 --> 01:19:12,500
flip one of these edges, and
then the OR will just take it.

1702
01:19:12,500 --> 01:19:15,190
So we can build predicted ORs.

1703
01:19:15,190 --> 01:19:20,820
And then I have a bunch
of PSPACE hardness proofs

1704
01:19:20,820 --> 01:19:22,910
based on bounded
constraint logic,

1705
01:19:22,910 --> 01:19:25,520
but I suggest we wait
til Thursday to see this.

1706
01:19:25,520 --> 01:19:26,850
Because they're kind of fun.

1707
01:19:26,850 --> 01:19:29,360
And I'd rather spend a little
time going through the proof

1708
01:19:29,360 --> 01:19:30,650
details.

1709
01:19:30,650 --> 01:19:34,700
So you'll have to
wait in suspense

1710
01:19:34,700 --> 01:19:37,482
before we get to
Amazons, which is

1711
01:19:37,482 --> 01:19:39,440
a very fun-- you should
play Amazons meanwhile,

1712
01:19:39,440 --> 01:19:40,615
if you get a chance.

1713
01:19:40,615 --> 01:19:43,370
It's very fun if you
have a chessboard around.

1714
01:19:43,370 --> 01:19:50,640
And Konane, which is an ancient,
at least 300-year-old game

1715
01:19:50,640 --> 01:19:57,054
from Hawaii, and Cross Purposes,
which is a modern game.

1716
01:19:57,054 --> 01:19:58,970
These are all three
bounded two- player games.

1717
01:19:58,970 --> 01:20:01,180
And they're all PSPACE
complete by a reduction

1718
01:20:01,180 --> 01:20:05,410
from bounded two-player
constraint logic.

1719
01:20:05,410 --> 01:20:08,110

1720
01:20:08,110 --> 01:20:09,660
Cool.

