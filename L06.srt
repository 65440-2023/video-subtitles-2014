1
0-1:59:36,500 --> 0-1:59:36,580

2
0-1:59:36,580 --> 0-1:59:38,930
The following content is
provided under a Creative

3
0-1:59:38,930 --> 0-1:59:40,310
Commons license.

4
0-1:59:40,310 --> 0-1:59:42,560
Your support will help
MIT OpenCourseWare

5
0-1:59:42,560 --> 0-1:59:46,650
continue to offer high quality
educational resources for free.

6
0-1:59:46,650 --> 0-1:59:49,190
To make a donation or to
view additional materials

7
0-1:59:49,190 --> 0-1:59:53,100
from hundreds of MIT courses,
visit MIT OpenCourseWare

8
0-1:59:53,100 --> 0-1:59:53,805
at ocw.mit.edu.

9
0-1:59:53,805 --> 00:00:03,150

10
00:00:03,150 --> 00:00:05,320
ERIK DEMAINE: Welcome
back to 6.890.

11
00:00:05,320 --> 00:00:09,660
Today will be our last lecture
about pure 3SAT, so to speak,

12
00:00:09,660 --> 00:00:11,940
and we'll be focusing
in particular on circuit

13
00:00:11,940 --> 00:00:13,740
SAT today.

14
00:00:13,740 --> 00:00:16,120
But before we get started
with more reductions,

15
00:00:16,120 --> 00:00:22,890
I want to highlight two styles
of 3SAT proofs that we've seen.

16
00:00:22,890 --> 00:00:25,530
This is orthogonal to
the circuit perspective

17
00:00:25,530 --> 00:00:27,850
versus logic perspective.

18
00:00:27,850 --> 00:00:30,610

19
00:00:30,610 --> 00:00:33,240
And I think it's interesting
to highlight the two

20
00:00:33,240 --> 00:00:35,420
different approaches.

21
00:00:35,420 --> 00:00:40,950
So approach one I'm going
to call dual rail logic.

22
00:00:40,950 --> 00:00:42,450
These are not the usual names.

23
00:00:42,450 --> 00:00:43,760
We're making up names here.

24
00:00:43,760 --> 00:00:47,640
There aren't really names for
these types of reductions.

25
00:00:47,640 --> 00:00:51,325
And the other type I'm
going to call binary logic.

26
00:00:51,325 --> 00:00:54,680

27
00:00:54,680 --> 00:01:02,090
These names come from actual
circuit stuff, real hardware.

28
00:01:02,090 --> 00:01:05,430
So for example, all the
Nintendo proofs we saw

29
00:01:05,430 --> 00:01:08,280
are in the style of what
I would call dual rail

30
00:01:08,280 --> 00:01:12,270
logic because the
variables have two outputs.

31
00:01:12,270 --> 00:01:14,620
And the idea is that
this one is activated

32
00:01:14,620 --> 00:01:16,580
when x is set to true.

33
00:01:16,580 --> 00:01:18,630
This one is activated
when not x is set to true

34
00:01:18,630 --> 00:01:21,550
or x is set to false.

35
00:01:21,550 --> 00:01:23,740
Never should both of
them be activated.

36
00:01:23,740 --> 00:01:25,810
So you have a separate
rail, separate line

37
00:01:25,810 --> 00:01:27,680
for the true case,
and a separate line

38
00:01:27,680 --> 00:01:30,610
for the false case.

39
00:01:30,610 --> 00:01:34,020
And this is usually called the
variable gadget that does that.

40
00:01:34,020 --> 00:01:47,930

41
00:01:47,930 --> 00:01:50,600
And I'm going to make up
some more terminology.

42
00:01:50,600 --> 00:01:57,550
I'll call this semi-wires
to distinguish from wires.

43
00:01:57,550 --> 00:02:05,060
So over here in the
binary logic case,

44
00:02:05,060 --> 00:02:06,970
this is sort of a
half of a distinction.

45
00:02:06,970 --> 00:02:07,970
It's a semi-distinction.

46
00:02:07,970 --> 00:02:16,880

47
00:02:16,880 --> 00:02:20,160
This is my attempt to
unify things slightly.

48
00:02:20,160 --> 00:02:26,640

49
00:02:26,640 --> 00:02:29,500
So the idea is that these
semi-wires, either they

50
00:02:29,500 --> 00:02:33,520
get activated, or they
don't get activated at all.

51
00:02:33,520 --> 00:02:37,070
In the unactivated case,
nothing happens to them.

52
00:02:37,070 --> 00:02:39,860
So they're not
really interesting.

53
00:02:39,860 --> 00:02:41,660
In the binary logic
case, the idea

54
00:02:41,660 --> 00:02:45,149
is that the wire gadget is
active in all situations,

55
00:02:45,149 --> 00:02:46,940
but it can be active
in two different ways.

56
00:02:46,940 --> 00:02:49,190
You can either set
it to the true state

57
00:02:49,190 --> 00:02:50,740
or you can set it
to the false state,

58
00:02:50,740 --> 00:02:54,580
and it represents both
sort of in one wire.

59
00:02:54,580 --> 00:02:57,140
Now, this distinction is going
to get a little bit of egg.

60
00:02:57,140 --> 00:03:00,590
But we saw an example
of this kind of proof

61
00:03:00,590 --> 00:03:02,350
when we were talking
about crease pattern,

62
00:03:02,350 --> 00:03:05,110
flat foldability,
and p hardness.

63
00:03:05,110 --> 00:03:07,630
The wire was the
pleat, and the pleat

64
00:03:07,630 --> 00:03:09,710
could be folded one
way or the other.

65
00:03:09,710 --> 00:03:12,870
But either way, the
information is right here,

66
00:03:12,870 --> 00:03:16,680
and the same wire gets
put into this gadget

67
00:03:16,680 --> 00:03:18,900
whether you're true or false.

68
00:03:18,900 --> 00:03:22,390
Whereas over here you're
connecting to this clause

69
00:03:22,390 --> 00:03:27,560
only the true half wire or
semi-wire goes to this clause.

70
00:03:27,560 --> 00:03:31,660
The false one goes to this
clause and to this clause.

71
00:03:31,660 --> 00:03:34,220
So there's a
distinction between here

72
00:03:34,220 --> 00:03:35,919
where the wire's
been split in half,

73
00:03:35,919 --> 00:03:37,460
and here where it's
all in one place,

74
00:03:37,460 --> 00:03:42,461
and the wire goes to the gadget
whether it's a true or false.

75
00:03:42,461 --> 00:03:46,100
I think that's what
I wanted to say.

76
00:03:46,100 --> 00:03:49,330
My main intent here is to
highlight what kind of gadgets

77
00:03:49,330 --> 00:03:50,970
you need.

78
00:03:50,970 --> 00:03:54,820
So we have a wire
gadget on this side,

79
00:03:54,820 --> 00:03:56,899
a variable gadget on this side.

80
00:03:56,899 --> 00:04:04,380
For binary logic you also need
a splitter or a split gadget

81
00:04:04,380 --> 00:04:05,690
to make copies of the wire.

82
00:04:05,690 --> 00:04:10,580

83
00:04:10,580 --> 00:04:12,350
So the idea is you
have one wire coming

84
00:04:12,350 --> 00:04:14,780
in, there's some magic
split gadget which

85
00:04:14,780 --> 00:04:18,870
makes two wires or three
wires, whatever, coming out.

86
00:04:18,870 --> 00:04:21,260
So then you can repeat
split however many times

87
00:04:21,260 --> 00:04:24,100
that variable occurs.

88
00:04:24,100 --> 00:04:26,660
You can make a copy.

89
00:04:26,660 --> 00:04:30,300
In the non-monotone
versions of 3SAT

90
00:04:30,300 --> 00:04:37,300
you may also need a
negation or not gadget.

91
00:04:37,300 --> 00:04:40,760
If you need negation, then
you'll need a negation gadget.

92
00:04:40,760 --> 00:04:45,500
In some cases you also
need a terminator gadget

93
00:04:45,500 --> 00:04:46,595
in this perspective.

94
00:04:46,595 --> 00:04:51,560

95
00:04:51,560 --> 00:04:59,660
A terminator gadget is just the
end of a wire, you might say.

96
00:04:59,660 --> 00:05:02,070
So if you want to
just not use a wire,

97
00:05:02,070 --> 00:05:04,740
then you would put
a terminator gadget.

98
00:05:04,740 --> 00:05:07,480
And the idea of the terminator
gadget is it leaves it free,

99
00:05:07,480 --> 00:05:11,020
leaves the wire free to
choose true or false.

100
00:05:11,020 --> 00:05:15,337
Now, sometimes you can get away
without a terminator gadget.

101
00:05:15,337 --> 00:05:16,920
For example, if each
of your variables

102
00:05:16,920 --> 00:05:21,444
occurs exactly four times, then
you can just use two splitters,

103
00:05:21,444 --> 00:05:23,110
make four copies, and
then connect those

104
00:05:23,110 --> 00:05:26,840
directly to the clauses,
maybe with some negations.

105
00:05:26,840 --> 00:05:28,840
So in that case, you
wouldn't need a terminator.

106
00:05:28,840 --> 00:05:30,360
Over here we're
using a terminator

107
00:05:30,360 --> 00:05:32,484
in a certain sense, which
is the edge of the paper.

108
00:05:32,484 --> 00:05:35,880
If a wire goes to the edge
of the paper it becomes free.

109
00:05:35,880 --> 00:05:37,844
So that's sort of the
terminator gadget here.

110
00:05:37,844 --> 00:05:39,260
Though we didn't
make explicit, it

111
00:05:39,260 --> 00:05:41,935
was part of this overall plan.

112
00:05:41,935 --> 00:05:45,760

113
00:05:45,760 --> 00:05:52,210
In both cases, in one
and two, you probably

114
00:05:52,210 --> 00:05:58,290
need something
like a turn gadget

115
00:05:58,290 --> 00:06:00,220
and maybe a crossover gadget.

116
00:06:00,220 --> 00:06:06,570

117
00:06:06,570 --> 00:06:08,880
We've seen these
in various forms.

118
00:06:08,880 --> 00:06:12,710
In this case, the turn
gadget was very explicit.

119
00:06:12,710 --> 00:06:15,030
I mean it was also a
splitter and also in negator,

120
00:06:15,030 --> 00:06:17,110
but in particular,
it changed the angle,

121
00:06:17,110 --> 00:06:19,970
and we needed that in order
to take this truth value

122
00:06:19,970 --> 00:06:25,436
and send it up to clause
and aim everything right.

123
00:06:25,436 --> 00:06:26,810
And in general,
if you were doing

124
00:06:26,810 --> 00:06:28,910
any kind of embedding
into two dimensions,

125
00:06:28,910 --> 00:06:30,410
you're probably
going to need a turn

126
00:06:30,410 --> 00:06:34,980
gadget so you can move your
wires or semi-wires around.

127
00:06:34,980 --> 00:06:37,300
A lot of the time people
might call this also a wire,

128
00:06:37,300 --> 00:06:39,090
so that's why.

129
00:06:39,090 --> 00:06:41,220
But I think it's
useful to have a word

130
00:06:41,220 --> 00:06:44,670
to distinguish these kinds
of wires which are only

131
00:06:44,670 --> 00:06:47,150
active or inactive, versus
the wires which are always

132
00:06:47,150 --> 00:06:48,610
active but in two
possible states.

133
00:06:48,610 --> 00:06:51,210

134
00:06:51,210 --> 00:06:55,670
Hopefully that clarifies or
makes more explicit the types

135
00:06:55,670 --> 00:06:59,310
of proofs we've seen so far.

136
00:06:59,310 --> 00:07:02,200
Now, today we're going to
do a couple of circuit SAT

137
00:07:02,200 --> 00:07:05,530
proofs, which all of this
applies to circuit SAT proofs,

138
00:07:05,530 --> 00:07:07,790
as well as SAT and 1
and 3SAT and that'll

139
00:07:07,790 --> 00:07:10,730
equals SAT, that'll equal 3SAT.

140
00:07:10,730 --> 00:07:13,560
Circuit SAT you're
going to have-- I

141
00:07:13,560 --> 00:07:16,070
guess in principle you
could do it dual rail

142
00:07:16,070 --> 00:07:18,200
logic or binary logic,
although usually we

143
00:07:18,200 --> 00:07:23,540
probably think of them in
this capacity in binary logic.

144
00:07:23,540 --> 00:07:26,340
And you're going to have wires.

145
00:07:26,340 --> 00:07:27,760
You still need
splits because you

146
00:07:27,760 --> 00:07:29,800
need to be able to take
the output of a gate

147
00:07:29,800 --> 00:07:33,250
and send it to
multiple other gates.

148
00:07:33,250 --> 00:07:34,980
In addition to a
not gadget, you're

149
00:07:34,980 --> 00:07:40,850
going to want some other
universal logic gate.

150
00:07:40,850 --> 00:07:42,880
So we're going to talk
about that in a bit

151
00:07:42,880 --> 00:07:44,025
after we see some examples.

152
00:07:44,025 --> 00:07:47,230

153
00:07:47,230 --> 00:07:53,030
Our first example is
called Akari or Light Up.

154
00:07:53,030 --> 00:07:59,510
This is another Nikoli puzzle
like Sudoku and Numberlink

155
00:07:59,510 --> 00:08:01,270
we saw last time.

156
00:08:01,270 --> 00:08:05,940
So here's a sample input
and a sample output.

157
00:08:05,940 --> 00:08:09,000
Ignore the black dots there.

158
00:08:09,000 --> 00:08:11,740
So you're given a grid.

159
00:08:11,740 --> 00:08:13,549
There's blank
squares and there's

160
00:08:13,549 --> 00:08:16,440
obstacle squares where you're
not allowed to put anything.

161
00:08:16,440 --> 00:08:19,610
Some of the obstacle squares may
have a number between 0 and 4

162
00:08:19,610 --> 00:08:20,419
on them.

163
00:08:20,419 --> 00:08:24,440
And that number represents how
many, among the four neighbors,

164
00:08:24,440 --> 00:08:27,070
edge neighbors of that
square, how many of them

165
00:08:27,070 --> 00:08:29,140
should have a light?

166
00:08:29,140 --> 00:08:32,010
These blue circles are lights.

167
00:08:32,010 --> 00:08:35,090
OK, so like this one has zero
lights in those four positions,

168
00:08:35,090 --> 00:08:39,170
this one has two, this one has
four, that's forced, and so on.

169
00:08:39,170 --> 00:08:43,180
A lot of the cells are free,
but whether you're lit or not.

170
00:08:43,180 --> 00:08:46,540
And then the rules
are so you can

171
00:08:46,540 --> 00:08:48,550
think of a light
as a rook in chess,

172
00:08:48,550 --> 00:08:51,740
so it can see everything
horizontally in the same row,

173
00:08:51,740 --> 00:08:54,290
up to obstacles, and in the
same column up to obstacles.

174
00:08:54,290 --> 00:08:59,010
So this guy, for example, lights
this portion and this portion.

175
00:08:59,010 --> 00:09:04,150
This guy lights that portion,
and the thing here, and so on.

176
00:09:04,150 --> 00:09:06,960
And the goal is, first of all,
to light the entire board,

177
00:09:06,960 --> 00:09:11,980
so that's why it's all green,
it's all lit in that way.

178
00:09:11,980 --> 00:09:15,520
And no two lights should like
each other, because then it's

179
00:09:15,520 --> 00:09:16,586
too bright I guess.

180
00:09:16,586 --> 00:09:18,080
I don't know.

181
00:09:18,080 --> 00:09:21,150
So no two rooks can
attack each other

182
00:09:21,150 --> 00:09:24,790
would be another perspective.

183
00:09:24,790 --> 00:09:26,110
I think those are the rules.

184
00:09:26,110 --> 00:09:29,150
So you've got to satisfy
the number constraint.

185
00:09:29,150 --> 00:09:31,790
You can only place lights
in the blank squares.

186
00:09:31,790 --> 00:09:34,970
You have to light everything,
and they can't see each other.

187
00:09:34,970 --> 00:09:36,640
So this is a valid solution.

188
00:09:36,640 --> 00:09:38,990
This is puzzle one on
the Nikoli website,

189
00:09:38,990 --> 00:09:40,837
and there's a ton more
if you want to play.

190
00:09:40,837 --> 00:09:42,378
AUDIENCE: So you're
saying they can't

191
00:09:42,378 --> 00:09:44,539
be in the same NOR column?

192
00:09:44,539 --> 00:09:46,580
PROFESSOR: I mean they
can be in the same column,

193
00:09:46,580 --> 00:09:49,160
but they have to be
separated by an obstacle.

194
00:09:49,160 --> 00:09:52,350
So they can't see each other
within a sort of sub-column

195
00:09:52,350 --> 00:09:56,540
or within a sub-row as
given by the obstacles.

196
00:09:56,540 --> 00:09:57,610
Cool.

197
00:09:57,610 --> 00:09:59,450
So that's the
problem, and now we're

198
00:09:59,450 --> 00:10:02,620
going to prove that
it's NP-complete.

199
00:10:02,620 --> 00:10:05,110
This is the nice proof
because it's relatively simple

200
00:10:05,110 --> 00:10:08,680
and it illustrates a kind
of circuit SAT and style

201
00:10:08,680 --> 00:10:10,890
reduction.

202
00:10:10,890 --> 00:10:14,530
So for starters, and I
would say most SAT proofs,

203
00:10:14,530 --> 00:10:16,600
a good starting point
is a wire gadget.

204
00:10:16,600 --> 00:10:19,400
You want to think about can
I make some construction that

205
00:10:19,400 --> 00:10:21,780
has ideally exactly
two solutions, one

206
00:10:21,780 --> 00:10:24,410
to represent true, one
to represent false.

207
00:10:24,410 --> 00:10:28,340
So here are a variety
of ways to do wires.

208
00:10:28,340 --> 00:10:30,460
And this is a fairly
flexible kind of game.

209
00:10:30,460 --> 00:10:32,530
The basic one looks like this.

210
00:10:32,530 --> 00:10:35,620
Most of things are going to be
obstacles to tie it down, make

211
00:10:35,620 --> 00:10:37,580
it easy to separate gadgets.

212
00:10:37,580 --> 00:10:40,117
But here we have two
blanks squares, a one,

213
00:10:40,117 --> 00:10:41,950
two blank squares, a
one, two blank squares.

214
00:10:41,950 --> 00:10:44,320
That's sort of a
simple kind of wire

215
00:10:44,320 --> 00:10:49,330
because you know from this one,
either x or x prime is a light.

216
00:10:49,330 --> 00:10:51,010
Exactly one of them is.

217
00:10:51,010 --> 00:10:53,360
So that forces alternation.

218
00:10:53,360 --> 00:10:55,080
Done.

219
00:10:55,080 --> 00:10:55,610
Why?

220
00:10:55,610 --> 00:10:58,365
Because if we choose x, we can't
choose x prime because then

221
00:10:58,365 --> 00:11:01,190
they're in the same sub-row
and all the way down the chain.

222
00:11:01,190 --> 00:11:03,660
So in general, if
x is true, the idea

223
00:11:03,660 --> 00:11:05,210
is that the x's are the lights.

224
00:11:05,210 --> 00:11:08,750
If x is false, then the
x primes are the lights.

225
00:11:08,750 --> 00:11:11,470
Now, that's a basic wire.

226
00:11:11,470 --> 00:11:13,840
But part of the wires
we need a turn gadget.

227
00:11:13,840 --> 00:11:17,530
So this is a 90 degree turn.

228
00:11:17,530 --> 00:11:20,000
Just check that
this is still lit.

229
00:11:20,000 --> 00:11:23,000
If these guys could not see each
other, I think this is black.

230
00:11:23,000 --> 00:11:25,210
It's also OK.

231
00:11:25,210 --> 00:11:26,760
The alternation's
forced by the one.

232
00:11:26,760 --> 00:11:29,930
But some flexibility.

233
00:11:29,930 --> 00:11:33,630
And let's see.

234
00:11:33,630 --> 00:11:36,120
The other fun thing you could
do is spread out the x and x

235
00:11:36,120 --> 00:11:36,410
prime.

236
00:11:36,410 --> 00:11:37,784
If you put a bunch
of zeroes here

237
00:11:37,784 --> 00:11:39,870
to force that there's
no lights here,

238
00:11:39,870 --> 00:11:41,970
because this has to be
lit again, one of these

239
00:11:41,970 --> 00:11:44,900
has to be active, and the
ones force an alternation.

240
00:11:44,900 --> 00:11:49,980
So this is helpful because if
our wires just look like this,

241
00:11:49,980 --> 00:11:52,550
and this will come
up again today,

242
00:11:52,550 --> 00:11:56,380
then you're forced to be
congruent to zero mod three.

243
00:11:56,380 --> 00:11:59,970
First your width has
to be a multiple of 3.

244
00:11:59,970 --> 00:12:01,110
And this can be an issue.

245
00:12:01,110 --> 00:12:03,790
If you have a bunch of gadgets
each of the different sizes--

246
00:12:03,790 --> 00:12:06,420
maybe one is 5 by
5, another 3 by 3,

247
00:12:06,420 --> 00:12:08,662
and other fun
prime numbers, then

248
00:12:08,662 --> 00:12:10,620
you might have trouble
actually getting gadgets

249
00:12:10,620 --> 00:12:12,620
to meet edge on.

250
00:12:12,620 --> 00:12:14,160
Maybe there's a
gap of one or two

251
00:12:14,160 --> 00:12:16,020
or something
between the gadgets.

252
00:12:16,020 --> 00:12:18,100
But if you have a
set up where you

253
00:12:18,100 --> 00:12:24,090
can adjust the wire lengths to
be any integer, that's good.

254
00:12:24,090 --> 00:12:25,530
You can do this
most of the time,

255
00:12:25,530 --> 00:12:27,640
but then when you're
getting close to the gate,

256
00:12:27,640 --> 00:12:29,580
if you're off by
one or two or three,

257
00:12:29,580 --> 00:12:33,450
you just make it a little bit
longer and you're all set.

258
00:12:33,450 --> 00:12:36,840
AUDIENCE: The unfilled
one can also just

259
00:12:36,840 --> 00:12:39,436
have a crossover gadget then?

260
00:12:39,436 --> 00:12:40,310
PROFESSOR: Ah, sorry?

261
00:12:40,310 --> 00:12:41,726
AUDIENCE: Since
you have nothing--

262
00:12:41,726 --> 00:12:44,877
it's very natural to have a
crossover gadget by putting

263
00:12:44,877 --> 00:12:46,190
two of them orthongonal.

264
00:12:46,190 --> 00:12:46,650
PROFESSOR: Oh yeah.

265
00:12:46,650 --> 00:12:48,816
You can make a crossover
gadget easy in this set up.

266
00:12:48,816 --> 00:12:50,320
I think that is a future slide.

267
00:12:50,320 --> 00:12:52,970

268
00:12:52,970 --> 00:12:54,340
So we'll do crossover in a bit.

269
00:12:54,340 --> 00:12:59,270
Let's start with-- yeah, you
can very easily do crossover.

270
00:12:59,270 --> 00:13:01,476
We won't need a crossover here.

271
00:13:01,476 --> 00:13:03,890
That's what I mean.

272
00:13:03,890 --> 00:13:05,592
So we definitely need
splitting, though.

273
00:13:05,592 --> 00:13:07,050
In general, whenever
you have wires

274
00:13:07,050 --> 00:13:08,591
you've got to be
able to make copies,

275
00:13:08,591 --> 00:13:11,200
because if your variable
only appears in two places,

276
00:13:11,200 --> 00:13:16,300
3SAT is easy, our circuit
SAT is probably easy.

277
00:13:16,300 --> 00:13:20,030
So here is a splitter.

278
00:13:20,030 --> 00:13:23,490
This is the main mechanism.

279
00:13:23,490 --> 00:13:25,680
I guess these ones and this two.

280
00:13:25,680 --> 00:13:28,300
So these ones force
an alternation

281
00:13:28,300 --> 00:13:29,350
between here and here.

282
00:13:29,350 --> 00:13:31,810
These have to be
opposites of each other.

283
00:13:31,810 --> 00:13:36,850
And then the two-- so if
both of the x's are present,

284
00:13:36,850 --> 00:13:38,620
if this is absent,
then these two

285
00:13:38,620 --> 00:13:40,330
have to be present by the ones.

286
00:13:40,330 --> 00:13:42,540
And so by this two,
that's all there is,

287
00:13:42,540 --> 00:13:43,760
and therefore this is absent.

288
00:13:43,760 --> 00:13:45,176
So these guys have
to be the same.

289
00:13:45,176 --> 00:13:47,200
These guys have to be opposite.

290
00:13:47,200 --> 00:13:50,730
And conversely, if this
is present by these ones,

291
00:13:50,730 --> 00:13:52,990
these have to be
absent, and by this two,

292
00:13:52,990 --> 00:13:55,030
this has to be present.

293
00:13:55,030 --> 00:13:56,856
So this is almost
sort of a-- well,

294
00:13:56,856 --> 00:13:58,230
you could also
put some ones here

295
00:13:58,230 --> 00:14:01,150
I guess if you felt like it.

296
00:14:01,150 --> 00:14:04,010
Anyway, if you think
about the parity

297
00:14:04,010 --> 00:14:09,310
here, when we're represent a
signal coming into a gadget,

298
00:14:09,310 --> 00:14:13,310
there's x on the left
and x prime on the right.

299
00:14:13,310 --> 00:14:16,850
So that means coming out here
there's not x prime on the left

300
00:14:16,850 --> 00:14:20,790
and x on the right, so this
actually a negated copy of x.

301
00:14:20,790 --> 00:14:24,100
And up here with some turns,
we have a regular copy

302
00:14:24,100 --> 00:14:25,309
of x and a regular copy of x.

303
00:14:25,309 --> 00:14:27,474
This is actually a fairly
common thing that happens.

304
00:14:27,474 --> 00:14:29,810
When you try to split maybe
you also get a negated copy,

305
00:14:29,810 --> 00:14:32,050
or instead you get
a negated copy.

306
00:14:32,050 --> 00:14:33,610
This is actually
great because it

307
00:14:33,610 --> 00:14:35,185
kills two birds with one stone.

308
00:14:35,185 --> 00:14:36,560
You could use this
as a splitter.

309
00:14:36,560 --> 00:14:40,000
It kind of makes 3D
copies of your signal.

310
00:14:40,000 --> 00:14:42,980
But you could also use it
just as a negation gadget, as

311
00:14:42,980 --> 00:14:45,040
a not gate.

312
00:14:45,040 --> 00:14:49,580
I think I have a slide
of those done explicitly.

313
00:14:49,580 --> 00:14:50,080
Yeah.

314
00:14:50,080 --> 00:14:53,730
So here we're effectively
using a terminator gadget.

315
00:14:53,730 --> 00:14:56,869
We're saying, well, we could
throw away this negated copy

316
00:14:56,869 --> 00:14:58,660
because we already have
two positive copies

317
00:14:58,660 --> 00:15:00,320
and that's enough
for a splitter.

318
00:15:00,320 --> 00:15:05,480
So if we just end this wire
here, great, we've got a split.

319
00:15:05,480 --> 00:15:09,120
Or if we throw away the
two copies of x and we just

320
00:15:09,120 --> 00:15:13,350
want the negated copy of x,
then ends up looking like this.

321
00:15:13,350 --> 00:15:17,210
So we get a split
gadget and a not gate

322
00:15:17,210 --> 00:15:18,780
essentially for
free out of this.

323
00:15:18,780 --> 00:15:20,790
You could just
present this gadget

324
00:15:20,790 --> 00:15:22,910
and say, oh, I also
have terminators,

325
00:15:22,910 --> 00:15:24,710
and then you know
that you get these.

326
00:15:24,710 --> 00:15:27,570
But for fun, he drew them
and I'll show you them.

327
00:15:27,570 --> 00:15:31,840
I won't show you them
in future proofs.

328
00:15:31,840 --> 00:15:32,340
Cool.

329
00:15:32,340 --> 00:15:33,655
So let's see, what do we have?

330
00:15:33,655 --> 00:15:35,800
We've got a wire.

331
00:15:35,800 --> 00:15:36,630
We've got a split.

332
00:15:36,630 --> 00:15:37,400
We've got a not.

333
00:15:37,400 --> 00:15:39,790
We've got a terminator.

334
00:15:39,790 --> 00:15:44,260
We need some kind of clause
or some kind of logic gate.

335
00:15:44,260 --> 00:15:46,710
And then possibly we
also need a crossover.

336
00:15:46,710 --> 00:15:47,490
We have turns.

337
00:15:47,490 --> 00:15:51,470

338
00:15:51,470 --> 00:15:55,030
Next up is a gate.

339
00:15:55,030 --> 00:15:56,720
It's sort of a mega gate.

340
00:15:56,720 --> 00:16:01,360
I'm guessing McPhail tried
various little configurations

341
00:16:01,360 --> 00:16:03,390
and then found one that
did interesting things.

342
00:16:03,390 --> 00:16:06,790
It actually does two
interesting things at once.

343
00:16:06,790 --> 00:16:10,210
So we have x coming in on
the left and y coming in

344
00:16:10,210 --> 00:16:13,320
on the right, so both of
them have this x prime and y

345
00:16:13,320 --> 00:16:16,280
prime, then negated copies.

346
00:16:16,280 --> 00:16:19,740
And then we've got
some fun stuff in here.

347
00:16:19,740 --> 00:16:21,930
So let's start with
maybe the bottom,

348
00:16:21,930 --> 00:16:24,700
which is supposed to
be an OR of x and y.

349
00:16:24,700 --> 00:16:28,332
So let's say that they are
both false, for example.

350
00:16:28,332 --> 00:16:30,790
And in general, we're going to
have to check all the cases,

351
00:16:30,790 --> 00:16:32,370
but I won't do all of them.

352
00:16:32,370 --> 00:16:34,210
So let's say this is absent.

353
00:16:34,210 --> 00:16:36,665
This is absent, meaning the
it's lit from the other end.

354
00:16:36,665 --> 00:16:39,040
AUDIENCE: If it's false it
means that x prime is present.

355
00:16:39,040 --> 00:16:39,480
ERIK DEMAINE: Oh, right.

356
00:16:39,480 --> 00:16:39,980
Sorry.

357
00:16:39,980 --> 00:16:42,730
If they're both false-- I
though it was good-- then

358
00:16:42,730 --> 00:16:47,300
both of these are present,
and therefore, we're

359
00:16:47,300 --> 00:16:49,349
going to get hopefully
that this one's absent

360
00:16:49,349 --> 00:16:52,780
because the OR of false
and false is false.

361
00:16:52,780 --> 00:16:55,560
So the claim would
be that A prime and B

362
00:16:55,560 --> 00:16:58,060
prime must be activated.

363
00:16:58,060 --> 00:16:59,476
AUDIENCE: If they
weren't then you

364
00:16:59,476 --> 00:17:01,897
couldn't light both A and B.

365
00:17:01,897 --> 00:17:02,730
ERIK DEMAINE: Right.

366
00:17:02,730 --> 00:17:05,730
These are at best OR'd together.

367
00:17:05,730 --> 00:17:07,520
At most, one of
these is present.

368
00:17:07,520 --> 00:17:10,430
These regions both
need to be lit.

369
00:17:10,430 --> 00:17:15,510
So we're going to need
at least one of them

370
00:17:15,510 --> 00:17:17,950
to be on, but once
one of them is on,

371
00:17:17,950 --> 00:17:21,080
we know that z is absent, and
then the other one must be on.

372
00:17:21,080 --> 00:17:22,980
Right, this too.

373
00:17:22,980 --> 00:17:24,930
Good.

374
00:17:24,930 --> 00:17:29,910
And then we should
up here get x NOR.

375
00:17:29,910 --> 00:17:33,160
So when these were
both false and present,

376
00:17:33,160 --> 00:17:36,470
these were present,
these are absent,

377
00:17:36,470 --> 00:17:38,380
and therefore, this is present.

378
00:17:38,380 --> 00:17:41,810
And the x OR of zero
and zero is zero.

379
00:17:41,810 --> 00:17:45,620
The x NOR is 1, so that's good.

380
00:17:45,620 --> 00:17:47,230
So in general, you
check all the cases

381
00:17:47,230 --> 00:17:48,760
and confirm this is the case.

382
00:17:48,760 --> 00:17:52,970
Again, by putting terminators on
here, we can get either x OR y,

383
00:17:52,970 --> 00:17:59,320
or x NOR-- x NOR
y-- it sounds funny.

384
00:17:59,320 --> 00:18:00,165
That's great.

385
00:18:00,165 --> 00:18:03,020

386
00:18:03,020 --> 00:18:06,080
This is the one that
we really care about.

387
00:18:06,080 --> 00:18:10,540
The OR gate-- well, so
different answers to this.

388
00:18:10,540 --> 00:18:16,870
But you should know, and we'll
talk more about this later,

389
00:18:16,870 --> 00:18:23,300
NAND-- or let's say
NAND gate is universal.

390
00:18:23,300 --> 00:18:26,820

391
00:18:26,820 --> 00:18:29,065
And a NOR gate by
itself is universal.

392
00:18:29,065 --> 00:18:32,200

393
00:18:32,200 --> 00:18:34,430
They're just good
things you should know.

394
00:18:34,430 --> 00:18:36,450
They go back at least 50 years.

395
00:18:36,450 --> 00:18:39,080

396
00:18:39,080 --> 00:18:40,860
AUDIENCE: What does
universal mean?

397
00:18:40,860 --> 00:18:43,660
ERIK DEMAINE: So universal
means that from those--

398
00:18:43,660 --> 00:18:45,330
if you're just given
a bunch of NANDs,

399
00:18:45,330 --> 00:18:49,520
then you can construct
any logical get you want.

400
00:18:49,520 --> 00:18:51,540
I will talk about
that more in a moment.

401
00:18:51,540 --> 00:18:53,320
So this OR is
particularly interesting

402
00:18:53,320 --> 00:18:57,430
because we already have
NOT, and so from OR and NOT

403
00:18:57,430 --> 00:19:00,034
we can make NOR-- it's
just the NOT of the OR.

404
00:19:00,034 --> 00:19:03,720
And so from that, we should
be able to make anything.

405
00:19:03,720 --> 00:19:05,620
Which is great,
except for one thing

406
00:19:05,620 --> 00:19:07,200
which is the crossover gadget.

407
00:19:07,200 --> 00:19:10,310
So in the case of Light
Up, crossover gadget

408
00:19:10,310 --> 00:19:11,570
is easy to construct.

409
00:19:11,570 --> 00:19:15,720
But because we have
x OR anyway, we

410
00:19:15,720 --> 00:19:20,570
can use this fun fact that--
this is the symbol for x OR.

411
00:19:20,570 --> 00:19:25,530
If you have x OR gadgets, you
can make a crossover gadget

412
00:19:25,530 --> 00:19:27,090
for free.

413
00:19:27,090 --> 00:19:29,810
So this communicates
x to x, y to y.

414
00:19:29,810 --> 00:19:31,120
There's four cases.

415
00:19:31,120 --> 00:19:33,110
I won't check all of them.

416
00:19:33,110 --> 00:19:35,930
But that's cool
because we have x NOR,

417
00:19:35,930 --> 00:19:37,920
we can negate it and get x OR.

418
00:19:37,920 --> 00:19:41,980
And then we can take three of
them, plugging them together,

419
00:19:41,980 --> 00:19:44,420
and we get a rather
complicated crossover gadget

420
00:19:44,420 --> 00:19:45,474
if I expanded it out.

421
00:19:45,474 --> 00:19:47,890
There is a simpler one, but
we don't care about simplicity

422
00:19:47,890 --> 00:19:48,390
here.

423
00:19:48,390 --> 00:19:51,660
These are just constants, and
we just care about polynomial.

424
00:19:51,660 --> 00:19:55,903
So that's Light
Up as empty heart.

425
00:19:55,903 --> 00:19:57,486
AUDIENCE: Do we need
crossover gadgets

426
00:19:57,486 --> 00:19:58,730
in general for circuit SAT?

427
00:19:58,730 --> 00:20:01,400
Is planner circuit SAT hard?

428
00:20:01,400 --> 00:20:03,400
ERIK DEMAINE: Please wait.

429
00:20:03,400 --> 00:20:04,080
Yeah.

430
00:20:04,080 --> 00:20:06,569
This is something-- well, yeah.

431
00:20:06,569 --> 00:20:08,610
I want to talk about that
after the next example.

432
00:20:08,610 --> 00:20:09,320
AUDIENCE: OK.

433
00:20:09,320 --> 00:20:11,820
ERIK DEMAINE: Which we'll get
to an answer to that question.

434
00:20:11,820 --> 00:20:14,430
Which as far as I know hasn't
been explicitly raised before,

435
00:20:14,430 --> 00:20:19,730
but the answer is basically, you
don't need crossover gadgets,

436
00:20:19,730 --> 00:20:23,010
and for all the
cases I can think.

437
00:20:23,010 --> 00:20:27,040
So that was Light Up is NP hard.

438
00:20:27,040 --> 00:20:29,919
It's also in NP because a
certificate is just where do

439
00:20:29,919 --> 00:20:30,710
you put the lights.

440
00:20:30,710 --> 00:20:33,420
There's only polynomial
number of places to put them,

441
00:20:33,420 --> 00:20:34,641
and checking it is easy.

442
00:20:34,641 --> 00:20:35,140
Cool.

443
00:20:35,140 --> 00:20:37,380
So NP-complete.

444
00:20:37,380 --> 00:20:40,190
Oh, here's for fun an
overall construction,

445
00:20:40,190 --> 00:20:41,680
which McPhail worked out.

446
00:20:41,680 --> 00:20:46,190
So putting all the pieces
together and possibly using-- I

447
00:20:46,190 --> 00:20:47,880
think here there's
maybe no crossovers.

448
00:20:47,880 --> 00:20:50,420

449
00:20:50,420 --> 00:20:53,790
So in general, with Circuit
SAT you can construct sort

450
00:20:53,790 --> 00:20:55,550
of any Boolean formula
you want once you

451
00:20:55,550 --> 00:20:59,550
have a universal set of gates.

452
00:20:59,550 --> 00:21:03,630
But yeah, you can work
through details here.

453
00:21:03,630 --> 00:21:06,070
It's easy to convert
between AND and OR

454
00:21:06,070 --> 00:21:08,810
just by negating the
inputs by De Morgan.

455
00:21:08,810 --> 00:21:17,020
So you've got x OR y is NOT
x and NOT y or vice versa.

456
00:21:17,020 --> 00:21:18,690
So as long as
you've got NOT an OR

457
00:21:18,690 --> 00:21:22,400
you can construct AND and
vice versa by negating things

458
00:21:22,400 --> 00:21:24,650
appropriately.

459
00:21:24,650 --> 00:21:30,300
So that's what he's doing here
for getting some ORs and so on.

460
00:21:30,300 --> 00:21:33,400
And because there's
two copies of x-- well,

461
00:21:33,400 --> 00:21:35,720
x is sort of getting split here.

462
00:21:35,720 --> 00:21:37,350
I guess you didn't
have to split x.

463
00:21:37,350 --> 00:21:39,762
You could just connect directly.

464
00:21:39,762 --> 00:21:41,470
This is a pretty nice
clean construction.

465
00:21:41,470 --> 00:21:45,182
It could actually make decent
resize puzzles with it.

466
00:21:45,182 --> 00:21:47,948
AUDIENCE: So you end up with
the wire carrying the formula

467
00:21:47,948 --> 00:21:49,867
just by doing all
these combinations?

468
00:21:49,867 --> 00:21:50,700
ERIK DEMAINE: Right.

469
00:21:50,700 --> 00:21:51,646
AUDIENCE: And then
what do you do?

470
00:21:51,646 --> 00:21:52,854
ERIK DEMAINE: Ah, good point.

471
00:21:52,854 --> 00:21:53,570
Thank you.

472
00:21:53,570 --> 00:21:57,970
There was one more point to this
picture, which is this zero.

473
00:21:57,970 --> 00:22:03,250
This should be an OR of x
false, and this OR or this AND

474
00:22:03,250 --> 00:22:07,110
and blah, blah, blah,
which is this thing.

475
00:22:07,110 --> 00:22:08,990
AUDIENCE: So if that
wire's carrying true,

476
00:22:08,990 --> 00:22:11,190
then you don't need to put
a light next to the zero,

477
00:22:11,190 --> 00:22:12,820
otherwise you would
have to, and that means

478
00:22:12,820 --> 00:22:13,920
the puzzle can't be solved.

479
00:22:13,920 --> 00:22:14,753
ERIK DEMAINE: Right.

480
00:22:14,753 --> 00:22:16,839
So for this puzzle
to be solvable,

481
00:22:16,839 --> 00:22:18,380
we better not put
a light here, which

482
00:22:18,380 --> 00:22:21,040
means it has to be here, which
corresponds to this formula

483
00:22:21,040 --> 00:22:25,387
being true, I think, if
I got that parity right.

484
00:22:25,387 --> 00:22:25,970
Or either way.

485
00:22:25,970 --> 00:22:30,180
You could put a one there and
force there to be a light.

486
00:22:30,180 --> 00:22:32,320
So this makes the puzzle
feasible if and only

487
00:22:32,320 --> 00:22:33,810
if this formula's feasible.

488
00:22:33,810 --> 00:22:35,310
Because the wires
are unconstrained,

489
00:22:35,310 --> 00:22:40,000
except by setting this
thing equal to one.

490
00:22:40,000 --> 00:22:43,090
So this is a special kind of
terminator, you might say.

491
00:22:43,090 --> 00:22:44,740
A true terminator.

492
00:22:44,740 --> 00:22:46,910
You want to force the thing
to be true in the end.

493
00:22:46,910 --> 00:22:48,285
That's usually
pretty easy to do.

494
00:22:48,285 --> 00:22:50,510
Terminator's usually one
of the simplest gadgets

495
00:22:50,510 --> 00:22:51,180
to worry about.

496
00:22:51,180 --> 00:22:52,700
But yeah, you do need it.

497
00:22:52,700 --> 00:22:55,520
For circuit SAT you
need-- let's add that.

498
00:22:55,520 --> 00:23:01,660

499
00:23:01,660 --> 00:23:05,879
Circuit SAT you need let's
say a true terminator.

500
00:23:05,879 --> 00:23:07,420
There are other ways
you could do it.

501
00:23:07,420 --> 00:23:13,540

502
00:23:13,540 --> 00:23:14,290
Cool.

503
00:23:14,290 --> 00:23:18,650
Other questions about Akari?

504
00:23:18,650 --> 00:23:19,340
All right.

505
00:23:19,340 --> 00:23:21,530
So our next topic
is Mine Sweeper.

506
00:23:21,530 --> 00:23:22,811
This is from our poster.

507
00:23:22,811 --> 00:23:24,560
We did Super Mario
Brothers, and Bruce Lee

508
00:23:24,560 --> 00:23:27,950
did Rush Hour, so Mine Sweeper's
the last one on the poster.

509
00:23:27,950 --> 00:23:31,450
Let's prove it hard.

510
00:23:31,450 --> 00:23:34,597
We're actually going to cover
two proofs about Mine Sweeper,

511
00:23:34,597 --> 00:23:36,680
because there are sort of
two natural problems you

512
00:23:36,680 --> 00:23:37,990
might ask about it.

513
00:23:37,990 --> 00:23:42,030
The first problem
is consistency.

514
00:23:42,030 --> 00:23:45,440
So this is I give
you a set up, I'm

515
00:23:45,440 --> 00:23:47,880
going to give you a partially
solved board that you're not

516
00:23:47,880 --> 00:23:49,900
given the x levels.

517
00:23:49,900 --> 00:23:52,870
So just a regular
instance of Mine Sweeper.

518
00:23:52,870 --> 00:23:56,110
Maybe you're told where
some of the bombs are.

519
00:23:56,110 --> 00:23:58,620
It won't actually matter,
because all the bombs that I'll

520
00:23:58,620 --> 00:24:00,981
draw here are
drivable from this--

521
00:24:00,981 --> 00:24:02,730
I should mention the
rules of Mine Sweeper

522
00:24:02,730 --> 00:24:04,260
just in case you haven't played.

523
00:24:04,260 --> 00:24:06,750
Anyone not played Mine Sweeper?

524
00:24:06,750 --> 00:24:08,520
I'm not willing to admit it.

525
00:24:08,520 --> 00:24:11,760
The numbers here representing,
among all your vertex

526
00:24:11,760 --> 00:24:15,164
neighbors, all eight neighbors,
how many of them are bombs.

527
00:24:15,164 --> 00:24:17,580
You don't want to click on the
bombs because then you die.

528
00:24:17,580 --> 00:24:19,850
So your goal is from
this partial information,

529
00:24:19,850 --> 00:24:21,614
these blank squares
represent zeros.

530
00:24:21,614 --> 00:24:23,030
From this partial
information, you

531
00:24:23,030 --> 00:24:26,300
want to figure out
where the bombs must be.

532
00:24:26,300 --> 00:24:30,550
And here's a very
familiar looking wire.

533
00:24:30,550 --> 00:24:34,390

534
00:24:34,390 --> 00:24:37,360
We can't just have obstacles
that are wild cards.

535
00:24:37,360 --> 00:24:39,280
So we have to put
numbers if we don't

536
00:24:39,280 --> 00:24:41,055
want there to be bombs there.

537
00:24:41,055 --> 00:24:43,430
That makes the gadgets quite
a bit trickier to work with.

538
00:24:43,430 --> 00:24:45,210
But this looks pretty similar.

539
00:24:45,210 --> 00:24:48,350
We've got these ones,
which force an alternation.

540
00:24:48,350 --> 00:24:51,400
Exactly one of these two is
a bomb, so if x is present,

541
00:24:51,400 --> 00:24:54,100
x prime is absent
and vice versa.

542
00:24:54,100 --> 00:24:57,110
And then this one forces--
I guess actually this one

543
00:24:57,110 --> 00:24:59,430
forces these to be opposite.

544
00:24:59,430 --> 00:25:02,190
So that forces the
alternation down the line.

545
00:25:02,190 --> 00:25:04,540
So again, there are exactly
two solutions to this wire

546
00:25:04,540 --> 00:25:08,160
gadget for where
the bombs could be.

547
00:25:08,160 --> 00:25:09,990
And so the Mine Sweeper
consistency problem

548
00:25:09,990 --> 00:25:13,340
is I give you some picture
involving these things,

549
00:25:13,340 --> 00:25:17,515
and I want to know is
there a solution-- is there

550
00:25:17,515 --> 00:25:19,140
a placement of the
bombs that satisfies

551
00:25:19,140 --> 00:25:21,330
all of these constraints?

552
00:25:21,330 --> 00:25:27,140
Now, you might ask why is that
the problem we care about?

553
00:25:27,140 --> 00:25:30,840
And one reason if you're
playing Mine Sweeper,

554
00:25:30,840 --> 00:25:33,070
you'd like to know, for
example, could there

555
00:25:33,070 --> 00:25:35,850
be a bomb at this position?

556
00:25:35,850 --> 00:25:38,580
So could there be a
bomb at this position?

557
00:25:38,580 --> 00:25:41,690
I could solve that
problem, potentially,

558
00:25:41,690 --> 00:25:46,450
if I could solve Mine Sweeper
consistency by saying,

559
00:25:46,450 --> 00:25:49,020
let's put a bomb there as part
of the partial information.

560
00:25:49,020 --> 00:25:51,250
Is that consistent
with everything else?

561
00:25:51,250 --> 00:25:53,810
So add a bomb to the
partial information.

562
00:25:53,810 --> 00:25:56,820
Is that a consistent
configuration?

563
00:25:56,820 --> 00:25:58,930
So if I could solve Mine
Sweeper consistency,

564
00:25:58,930 --> 00:26:00,520
I could play Mine
Sweeper very well

565
00:26:00,520 --> 00:26:02,637
by just testing which
are bombable positions.

566
00:26:02,637 --> 00:26:04,470
If they're not, possible
to be a bomb there.

567
00:26:04,470 --> 00:26:06,440
Actually click there
and get more information

568
00:26:06,440 --> 00:26:07,970
and cook until done.

569
00:26:07,970 --> 00:26:10,420
Now, maybe you could solve
Mine Sweeper in a different way

570
00:26:10,420 --> 00:26:11,650
than using consistency.

571
00:26:11,650 --> 00:26:14,690
But one way to solve it
would be consistency.

572
00:26:14,690 --> 00:26:15,190
Question?

573
00:26:15,190 --> 00:26:17,800
AUDIENCE: By consistency you
don't mean unique solution.

574
00:26:17,800 --> 00:26:20,050
ERIK DEMAINE: I do not mean
unique solution, right.

575
00:26:20,050 --> 00:26:20,290
Yeah.

576
00:26:20,290 --> 00:26:21,890
So when you actually
want to solve the game,

577
00:26:21,890 --> 00:26:23,710
you'd like there to
be a unique solution.

578
00:26:23,710 --> 00:26:26,090
That's a problem we
will get to in a moment.

579
00:26:26,090 --> 00:26:28,565
AUDIENCE: So a blank
board, unfilled information

580
00:26:28,565 --> 00:26:30,300
is consistent.

581
00:26:30,300 --> 00:26:31,050
ERIK DEMAINE: Yes.

582
00:26:31,050 --> 00:26:34,480
Completely blank
board is consistent.

583
00:26:34,480 --> 00:26:35,880
And it wouldn't be interesting.

584
00:26:35,880 --> 00:26:37,560
As you're playing,
you imagine you've

585
00:26:37,560 --> 00:26:39,710
gathered some information,
you add a bomb.

586
00:26:39,710 --> 00:26:41,456
You want to say is
this consistent.

587
00:26:41,456 --> 00:26:43,205
It says yes, like
you're in a blank board.

588
00:26:43,205 --> 00:26:44,996
And you're like could
there be a bomb here.

589
00:26:44,996 --> 00:26:46,560
Of course there could be.

590
00:26:46,560 --> 00:26:47,960
Then that's not a safe move.

591
00:26:47,960 --> 00:26:52,750
So if you could solve this,
you could identify safe moves.

592
00:26:52,750 --> 00:26:55,810
Turns out you can't solve it,
so it doesn't directly help you.

593
00:26:55,810 --> 00:26:56,730
Yeah.

594
00:26:56,730 --> 00:26:59,782
AUDIENCE: So there doesn't
always exist a safe move.

595
00:26:59,782 --> 00:27:01,990
ERIK DEMAINE: There doesn't
always exist a safe move.

596
00:27:01,990 --> 00:27:05,410
AUDIENCE: What good
is it, kind of,

597
00:27:05,410 --> 00:27:07,359
to know whether [INAUDIBLE].

598
00:27:07,359 --> 00:27:08,150
ERIK DEMAINE: Yeah.

599
00:27:08,150 --> 00:27:10,390
I would say consistency
is the wrong problem

600
00:27:10,390 --> 00:27:12,630
to solve for Mine Sweeper.

601
00:27:12,630 --> 00:27:14,790
But it was the first
problem solved.

602
00:27:14,790 --> 00:27:18,790
The gadgets are
relatively easy, which is

603
00:27:18,790 --> 00:27:21,060
going to be fairly complicated.

604
00:27:21,060 --> 00:27:23,330
And then we'll get to the
right problem for if you

605
00:27:23,330 --> 00:27:24,459
wanted to solve the puzzle.

606
00:27:24,459 --> 00:27:26,250
At this point it's an
interesting question.

607
00:27:26,250 --> 00:27:27,874
You just want to know
is it consistent.

608
00:27:27,874 --> 00:27:30,557
Did the computer cheat would
be one other perspective.

609
00:27:30,557 --> 00:27:32,640
Or you could imagine some
adversarial Mine Sweeper

610
00:27:32,640 --> 00:27:35,155
where you only decide the
bombs as the person is playing.

611
00:27:35,155 --> 00:27:38,710

612
00:27:38,710 --> 00:27:41,760
So here, just even telling
whether your opponent

613
00:27:41,760 --> 00:27:44,910
is cheating is hard.

614
00:27:44,910 --> 00:27:47,900
So that's another perspective.

615
00:27:47,900 --> 00:27:50,420
Let's finish this proof.

616
00:27:50,420 --> 00:27:53,330
We have a terminator, which
is actually a little bit

617
00:27:53,330 --> 00:27:54,040
tricky here.

618
00:27:54,040 --> 00:27:56,180
You can't just end with
ones because that would

619
00:27:56,180 --> 00:27:57,780
force this guy to be a bomb.

620
00:27:57,780 --> 00:27:59,590
So you end with
these threes, which

621
00:27:59,590 --> 00:28:03,470
force-- these guys are already
bombs because of this picture,

622
00:28:03,470 --> 00:28:07,090
and then exactly one of those
will still have to be a bomb.

623
00:28:07,090 --> 00:28:08,790
And then we have a splitter.

624
00:28:08,790 --> 00:28:11,380
It's a similar picture to Akari.

625
00:28:11,380 --> 00:28:14,530
We have this two, which
forces exactly to two of these

626
00:28:14,530 --> 00:28:16,555
to be present, and these
ones force alternation.

627
00:28:16,555 --> 00:28:19,590

628
00:28:19,590 --> 00:28:24,020
Now, I'm orienting these
arrows for the splitter

629
00:28:24,020 --> 00:28:30,900
and defining true to be when
the pointy end of the arrow

630
00:28:30,900 --> 00:28:33,230
is present.

631
00:28:33,230 --> 00:28:35,500
So that means this is
actually a negated copy,

632
00:28:35,500 --> 00:28:38,009
and these are unnegated copies.

633
00:28:38,009 --> 00:28:39,550
But that's only from
the orientation.

634
00:28:39,550 --> 00:28:42,540
This gadget's actually
symmetric, fourfold.

635
00:28:42,540 --> 00:28:44,870
But if you put these
arrows in, which

636
00:28:44,870 --> 00:28:47,950
you would do if you were
actually following a circuit,

637
00:28:47,950 --> 00:28:50,330
their circuits are directed
acyclic graphs remember.

638
00:28:50,330 --> 00:28:53,770
So this is negation, which is
good because it gives us a NOT,

639
00:28:53,770 --> 00:28:55,190
it also gives us a split.

640
00:28:55,190 --> 00:28:58,330
You can also end these
two things and get a turn.

641
00:28:58,330 --> 00:28:59,800
So great, three gadgets in one.

642
00:28:59,800 --> 00:29:03,370

643
00:29:03,370 --> 00:29:05,250
So we already have NOT.

644
00:29:05,250 --> 00:29:07,240
This is another way to do NOT.

645
00:29:07,240 --> 00:29:11,270
And it's interesting here
because with Akari we

646
00:29:11,270 --> 00:29:16,100
could stretch wires to any
length, any integer length

647
00:29:16,100 --> 00:29:17,860
that's sufficiently long.

648
00:29:17,860 --> 00:29:22,724
Here, we're forced in this
modulo three picture, normally.

649
00:29:22,724 --> 00:29:24,390
But when we do something
like a negation

650
00:29:24,390 --> 00:29:26,170
here we get kind of messed up.

651
00:29:26,170 --> 00:29:29,020
We're no longer in the
same position modulo three.

652
00:29:29,020 --> 00:29:33,290
We should be off
by one I believe.

653
00:29:33,290 --> 00:29:37,740
So the idea is if you do
two negations in a row,

654
00:29:37,740 --> 00:29:41,340
then you can end up
shifting by exactly two

655
00:29:41,340 --> 00:29:44,130
and still have the same signal.

656
00:29:44,130 --> 00:29:47,720
So you can see here
we have xx bar,

657
00:29:47,720 --> 00:29:54,480
but down here we have it
shifted two positions over.

658
00:29:54,480 --> 00:29:58,710
Or I guess it's more impressive
over here, so x bar x.

659
00:29:58,710 --> 00:30:01,300
And normally this would repeat
in this kind of pattern.

660
00:30:01,300 --> 00:30:03,950

661
00:30:03,950 --> 00:30:06,531
So it actually shifted
by one position.

662
00:30:06,531 --> 00:30:07,030
Good.

663
00:30:07,030 --> 00:30:08,940
That's actually what I want.

664
00:30:08,940 --> 00:30:16,050
So see the pattern here, here,
here, here, and shift by one.

665
00:30:16,050 --> 00:30:18,980
Yeah, or two the
other direction.

666
00:30:18,980 --> 00:30:20,080
OK, so that's good.

667
00:30:20,080 --> 00:30:22,960
That lets me adjust
my wire length.

668
00:30:22,960 --> 00:30:26,260
These are also often
called shift gadgets.

669
00:30:26,260 --> 00:30:28,200
They just let you shift by one.

670
00:30:28,200 --> 00:30:30,742
And whenever you have gadgets
that force certain modulo

671
00:30:30,742 --> 00:30:32,700
constraints, just having
the ability to add one

672
00:30:32,700 --> 00:30:34,930
is great because then you can
break all switch constraints.

673
00:30:34,930 --> 00:30:36,888
You no longer have to
live in a mod three grid,

674
00:30:36,888 --> 00:30:39,620
whatever, if you don't want to.

675
00:30:39,620 --> 00:30:40,830
So this is important.

676
00:30:40,830 --> 00:30:45,870
In general-- I'll add
it to the list here.

677
00:30:45,870 --> 00:30:48,090
When you're dealing
with wires you

678
00:30:48,090 --> 00:30:49,790
may need some kind
of shift gadget that

679
00:30:49,790 --> 00:30:55,320
lets you fix parity issues,
or in this case, a mod three

680
00:30:55,320 --> 00:30:57,810
parity.

681
00:30:57,810 --> 00:31:01,050
OK, here is a more
complicated gadget,

682
00:31:01,050 --> 00:31:02,490
which I will not go through.

683
00:31:02,490 --> 00:31:03,480
It looks scary.

684
00:31:03,480 --> 00:31:05,700
It's not actually
a ton going on.

685
00:31:05,700 --> 00:31:07,970
It's a lot of gadgets
we've already seen.

686
00:31:07,970 --> 00:31:10,360
It uses a slight-- I've
mentioned a turn gadget.

687
00:31:10,360 --> 00:31:12,490
This is another
way to do a turn.

688
00:31:12,490 --> 00:31:14,690
There's a few redundant
gadgets in this paper

689
00:31:14,690 --> 00:31:16,450
because it's fun
to make gadgets,

690
00:31:16,450 --> 00:31:19,780
so I want to have more.

691
00:31:19,780 --> 00:31:22,090
So there's, for example,
just a turn gadget here.

692
00:31:22,090 --> 00:31:23,407
There's a splitter here.

693
00:31:23,407 --> 00:31:24,240
Another turn gadget.

694
00:31:24,240 --> 00:31:28,740
This is reflectionally
symmetric around the x-axis.

695
00:31:28,740 --> 00:31:30,640
There's basically
just a turn here,

696
00:31:30,640 --> 00:31:34,750
so x is just getting copied
and negated into here.

697
00:31:34,750 --> 00:31:36,690
z is getting copied
and negated into here.

698
00:31:36,690 --> 00:31:39,290

699
00:31:39,290 --> 00:31:43,590
This is the output value,
which is getting copied around

700
00:31:43,590 --> 00:31:44,260
into here.

701
00:31:44,260 --> 00:31:46,930
And then a little bit of
magic happens here and here

702
00:31:46,930 --> 00:31:48,680
to get these to interact
in the right way.

703
00:31:48,680 --> 00:31:51,670
And it's essentially
just checking cases

704
00:31:51,670 --> 00:31:55,830
to see that this computes
an AND of these two inputs.

705
00:31:55,830 --> 00:31:58,540

706
00:31:58,540 --> 00:32:01,142
But a little bit complicated.

707
00:32:01,142 --> 00:32:02,850
AUDIENCE: Is coming
up with these gadgets

708
00:32:02,850 --> 00:32:05,780
harder than checking them?

709
00:32:05,780 --> 00:32:07,460
ERIK DEMAINE: Good question.

710
00:32:07,460 --> 00:32:08,200
It's unclear.

711
00:32:08,200 --> 00:32:09,390
Often when you're
designing things,

712
00:32:09,390 --> 00:32:11,610
you have a lot more control,
and it could potentially

713
00:32:11,610 --> 00:32:16,490
be easier to design hard
problems than to check them.

714
00:32:16,490 --> 00:32:18,730
Because we know it's
NP-complete to check this,

715
00:32:18,730 --> 00:32:21,357
in a certain sense.

716
00:32:21,357 --> 00:32:23,690
I mean, of course, in this
case there's only four cases,

717
00:32:23,690 --> 00:32:26,050
so it's not really that hard.

718
00:32:26,050 --> 00:32:27,700
But yeah, when you're
designing things

719
00:32:27,700 --> 00:32:30,094
you have in mind a certain
connectivity structure,

720
00:32:30,094 --> 00:32:31,760
and then it's a matter
of getting things

721
00:32:31,760 --> 00:32:35,030
to resolve in the grid and not
have things overlapping and so

722
00:32:35,030 --> 00:32:38,950
on, which is a different
kind of constraint.

723
00:32:38,950 --> 00:32:40,540
I might say it's a more fun one.

724
00:32:40,540 --> 00:32:43,854
I would call designing these
puzzles meta puzzles, and to me

725
00:32:43,854 --> 00:32:44,520
that's more fun.

726
00:32:44,520 --> 00:32:46,970
But of course, I'm a
theoretical computer scientist.

727
00:32:46,970 --> 00:32:50,410
That's why we're here.

728
00:32:50,410 --> 00:32:53,590
Anyway, fun to
answer that question.

729
00:32:53,590 --> 00:32:56,220

730
00:32:56,220 --> 00:32:57,630
So here's a fun thing.

731
00:32:57,630 --> 00:33:02,855
I hadn't seen this paper
before by Goldschlager in 1977.

732
00:33:02,855 --> 00:33:04,730
They were worried about
p completeness, which

733
00:33:04,730 --> 00:33:06,370
we haven't talked about yet.

734
00:33:06,370 --> 00:33:08,700
But in particular, they
gave these two pictures.

735
00:33:08,700 --> 00:33:12,050
This one we've seen.

736
00:33:12,050 --> 00:33:15,980
If you have an x OR gadget,
you can construct a crossover.

737
00:33:15,980 --> 00:33:18,370
Now, we don't have an
XOR gadget in this case,

738
00:33:18,370 --> 00:33:21,420
but we have an AND
gadget or a NAND gadget.

739
00:33:21,420 --> 00:33:25,430
This is the funny way of
writing NAND, NOT of an AND.

740
00:33:25,430 --> 00:33:28,740
And if you have NAND gadgets
you can construct an XOR.

741
00:33:28,740 --> 00:33:31,270
So if you plug this picture
into each of these three

742
00:33:31,270 --> 00:33:35,770
pictures you get a kind of
ugly thing, but it's planar

743
00:33:35,770 --> 00:33:37,600
and it implements a crossover.

744
00:33:37,600 --> 00:33:42,140
Which means if you have NAND,
you get planarity for free.

745
00:33:42,140 --> 00:33:49,030
So I'm going to call
this planar circuit SAT.

746
00:33:49,030 --> 00:33:56,370

747
00:33:56,370 --> 00:33:59,370
It's like catch, this, I
think is also a made-up term.

748
00:33:59,370 --> 00:34:00,969
I haven't seen it
in the literature.

749
00:34:00,969 --> 00:34:04,010
Because it's a little bit
vague what it could mean.

750
00:34:04,010 --> 00:34:10,730
But let's say we're
given a planar directed

751
00:34:10,730 --> 00:34:12,015
acyclic circuit.

752
00:34:12,015 --> 00:34:17,219

753
00:34:17,219 --> 00:34:24,385
And let's say all
gates are NAND.

754
00:34:24,385 --> 00:34:27,009

755
00:34:27,009 --> 00:34:28,050
Then this is NP-complete.

756
00:34:28,050 --> 00:34:35,104

757
00:34:35,104 --> 00:34:36,020
AUDIENCE: [INAUDIBLE].

758
00:34:36,020 --> 00:34:38,731

759
00:34:38,731 --> 00:34:39,730
ERIK DEMAINE: Ah, right.

760
00:34:39,730 --> 00:34:40,590
Sorry.

761
00:34:40,590 --> 00:34:42,480
And at the end you
want it to be true.

762
00:34:42,480 --> 00:34:43,680
Thank you.

763
00:34:43,680 --> 00:34:47,793
So you have let's say the
sources are unconstrained.

764
00:34:47,793 --> 00:34:52,570

765
00:34:52,570 --> 00:34:54,910
So those represent
the variables.

766
00:34:54,910 --> 00:34:59,586
And there's a sync,
which is set to one.

767
00:34:59,586 --> 00:35:01,210
And we could say
there's just one sync.

768
00:35:01,210 --> 00:35:04,500
So you have some
starting points.

769
00:35:04,500 --> 00:35:08,000
Those are completely free
to choose true or false.

770
00:35:08,000 --> 00:35:11,240
And then at the end
you have a sync.

771
00:35:11,240 --> 00:35:14,080
I guess it just has one thing
probably coming into it.

772
00:35:14,080 --> 00:35:16,170
Wouldn't make sense otherwise.

773
00:35:16,170 --> 00:35:18,206
And we set this to be one.

774
00:35:18,206 --> 00:35:19,830
So that's just like
satisfying formula,

775
00:35:19,830 --> 00:35:25,030
but drawn as a Boolean
circuit, and it's planar.

776
00:35:25,030 --> 00:35:27,270
Now, we're going to see
more versions of planar SAT

777
00:35:27,270 --> 00:35:31,550
next class, but this one
as far as I know is newish.

778
00:35:31,550 --> 00:35:33,570
It's essentially
argued in this paper.

779
00:35:33,570 --> 00:35:36,090
Say, hey look--
this paper was not

780
00:35:36,090 --> 00:35:40,950
talking about NP-completeness,
but the K paper says,

781
00:35:40,950 --> 00:35:43,630
hey, we've got these
two things, so as long

782
00:35:43,630 --> 00:35:46,060
as you have NAND you've
got crossovers for free.

783
00:35:46,060 --> 00:35:49,130
So you don't have to worry about
planarity, which is good news.

784
00:35:49,130 --> 00:35:52,180
So no crossover gadget needed.

785
00:35:52,180 --> 00:35:53,047
There is one.

786
00:35:53,047 --> 00:35:54,880
It's actually not that
hard in Mine Sweeper,

787
00:35:54,880 --> 00:35:58,240
but it's nicer when you
don't have to do it.

788
00:35:58,240 --> 00:35:59,730
Questions?

789
00:35:59,730 --> 00:36:01,453
I guess I did talk
about termination.

790
00:36:01,453 --> 00:36:04,460

791
00:36:04,460 --> 00:36:06,160
We do need a true
terminator here

792
00:36:06,160 --> 00:36:07,590
because we're doing circuit SAT.

793
00:36:07,590 --> 00:36:09,990
That's really easy.

794
00:36:09,990 --> 00:36:12,270
In fact, this would do it.

795
00:36:12,270 --> 00:36:14,940
Just ending with all
ones means, in fact,

796
00:36:14,940 --> 00:36:18,290
if there's zeroes out here, that
means this has to be a bomb.

797
00:36:18,290 --> 00:36:20,340
And so that sets it to one.

798
00:36:20,340 --> 00:36:24,570
So there's a true terminator
for Mine Sweeper consistency.

799
00:36:24,570 --> 00:36:26,910
But as we've seen
in various ways,

800
00:36:26,910 --> 00:36:29,690
Mine Sweeper consistency
is probably not

801
00:36:29,690 --> 00:36:34,990
what we want to
actually play the game.

802
00:36:34,990 --> 00:36:37,710
The algorithm I
gave you is one way

803
00:36:37,710 --> 00:36:40,750
to think about playing the
game where you add a thing

804
00:36:40,750 --> 00:36:42,870
and you check for consistency.

805
00:36:42,870 --> 00:36:45,310
That's also a little
bit weird where

806
00:36:45,310 --> 00:36:47,656
you're assuming that
the input is consistent,

807
00:36:47,656 --> 00:36:49,030
and then you add
one bomb and you

808
00:36:49,030 --> 00:36:50,988
want to see whether that
makes it inconsistent.

809
00:36:50,988 --> 00:36:52,840
That's a special case
of this instance.

810
00:36:52,840 --> 00:36:54,939
Maybe not as hard as
the general picture.

811
00:36:54,939 --> 00:36:56,980
Everything was consistent
up until the moment you

812
00:36:56,980 --> 00:36:59,640
added one new bomb information.

813
00:36:59,640 --> 00:37:03,430
These pictures don't
look exactly like that.

814
00:37:03,430 --> 00:37:07,700
Another thing I want to
point out in these gadgets

815
00:37:07,700 --> 00:37:13,710
is let's say the number of x
and x bars is not the same.

816
00:37:13,710 --> 00:37:17,580
Maybe this negation, this
equal numbers of x and x

817
00:37:17,580 --> 00:37:20,270
bars over here, but
there's one extra x bar.

818
00:37:20,270 --> 00:37:22,830
What that means is
local to this picture,

819
00:37:22,830 --> 00:37:28,310
the number of bombs
that get used varies.

820
00:37:28,310 --> 00:37:32,130
There's either one, two, three,
four bombs if you choose x,

821
00:37:32,130 --> 00:37:34,460
or there's five bombs
if you choose x bar.

822
00:37:34,460 --> 00:37:36,830
And one of the minor
things in Mine Sweeper

823
00:37:36,830 --> 00:37:41,330
is that the total number of
bombs is given to you as input.

824
00:37:41,330 --> 00:37:44,830
So that actually also
kind of messes things up.

825
00:37:44,830 --> 00:37:47,470
Anyway, luckily, this
problem was solved.

826
00:37:47,470 --> 00:37:50,960
It was actually independently
solved by multiple people.

827
00:37:50,960 --> 00:37:56,120
It's claimed in Bob Hearn's
PhD thesis, though never

828
00:37:56,120 --> 00:37:57,860
got fully written up.

829
00:37:57,860 --> 00:38:01,730
And then it got published, so no
reason to write it up anymore.

830
00:38:01,730 --> 00:38:04,510
So here is their proof.

831
00:38:04,510 --> 00:38:06,100
Both this proof and
the previous one

832
00:38:06,100 --> 00:38:09,150
appeared in Mathematical
Intelligencer.

833
00:38:09,150 --> 00:38:11,630
So they draw the gadgets
slightly differently,

834
00:38:11,630 --> 00:38:14,060
and so far everything
looks about the same.

835
00:38:14,060 --> 00:38:17,870
They're not going to use a phase
changer in this form at least.

836
00:38:17,870 --> 00:38:20,400
So they're going to draw
the wire gadget like this,

837
00:38:20,400 --> 00:38:22,320
and the idea is that
you would copy it,

838
00:38:22,320 --> 00:38:24,630
you get things mod
three, that will turn out

839
00:38:24,630 --> 00:38:25,909
to be OK for them.

840
00:38:25,909 --> 00:38:27,950
But what they really want
is that in each diagram

841
00:38:27,950 --> 00:38:30,710
there are equal number
of x and x bars.

842
00:38:30,710 --> 00:38:31,300
Why?

843
00:38:31,300 --> 00:38:32,910
And also what are they proving?

844
00:38:32,910 --> 00:38:39,300
So this is what they call the
Mine Sweeper inference problem.

845
00:38:39,300 --> 00:38:43,730

846
00:38:43,730 --> 00:38:47,590
But it's also what you might
just call Mine Sweeper.

847
00:38:47,590 --> 00:38:49,437
I want to solve this puzzle.

848
00:38:49,437 --> 00:38:51,020
What does it mean
to solve the puzzle?

849
00:38:51,020 --> 00:38:53,228
Well, it means you're given
this partial information.

850
00:38:53,228 --> 00:38:55,280
You want to know am I done?

851
00:38:55,280 --> 00:38:56,340
Did I solve it?

852
00:38:56,340 --> 00:38:57,010
Can I solve it?

853
00:38:57,010 --> 00:38:58,830
Can I figure out where
all the bombs are?

854
00:38:58,830 --> 00:39:02,970
This is like there
being a unique solution.

855
00:39:02,970 --> 00:39:06,910
So I want to conclude
that, OK, I can figure out

856
00:39:06,910 --> 00:39:09,030
where all the bombs are.

857
00:39:09,030 --> 00:39:13,900
So can you figure
everything out?

858
00:39:13,900 --> 00:39:24,340

859
00:39:24,340 --> 00:39:29,730
So again, the reduction is from
something like circuit SAT.

860
00:39:29,730 --> 00:39:32,865
It's going to be a reduction
from circuit unSAT.

861
00:39:32,865 --> 00:39:41,320

862
00:39:41,320 --> 00:39:43,680
Unsatisfiability.

863
00:39:43,680 --> 00:39:47,070
So satisfiability you
want to set the variables

864
00:39:47,070 --> 00:39:50,022
so that the outcome is true.

865
00:39:50,022 --> 00:39:52,230
You might say, well, I could
try to set the variables

866
00:39:52,230 --> 00:39:53,490
so the outcome is false.

867
00:39:53,490 --> 00:39:55,310
That's the same problem.

868
00:39:55,310 --> 00:39:56,200
That won't change.

869
00:39:56,200 --> 00:39:58,410
Just put a NOT at the end.

870
00:39:58,410 --> 00:40:03,120
Unsatisfiability means that you
cannot satisfy this formula.

871
00:40:03,120 --> 00:40:05,520
There's no way to set
the variables to make

872
00:40:05,520 --> 00:40:08,370
the output true.

873
00:40:08,370 --> 00:40:15,910
There does not exist
choices for the x ANDs, such

874
00:40:15,910 --> 00:40:22,920
that some f of xi's equals 1.

875
00:40:22,920 --> 00:40:26,599
If we do some-- who knows,
this is called De Morgan?

876
00:40:26,599 --> 00:40:27,140
Probably not.

877
00:40:27,140 --> 00:40:43,150

878
00:40:43,150 --> 00:40:47,290
Another fun fact is
NOT there exists,

879
00:40:47,290 --> 00:40:50,780
NOT is the same thing as
for all or however you

880
00:40:50,780 --> 00:40:52,500
want to write it.

881
00:40:52,500 --> 00:40:55,600
So if we put this
negation over to here,

882
00:40:55,600 --> 00:40:58,230
this turns into
universal quantifiers.

883
00:40:58,230 --> 00:41:01,530
These are extensial
quantifiers to for alls.

884
00:41:01,530 --> 00:41:03,500
So this is quite a
different problem.

885
00:41:03,500 --> 00:41:07,420
3SAT is about do there exist
settings for these n variables

886
00:41:07,420 --> 00:41:09,860
such that this comes
out to be true.

887
00:41:09,860 --> 00:41:13,100
Now we're saying no matter
how you set the variables,

888
00:41:13,100 --> 00:41:16,519
this comes out to be
true or false I guess.

889
00:41:16,519 --> 00:41:17,810
But again, that doesn't matter.

890
00:41:17,810 --> 00:41:20,562
You can just put the negation
inside f if you wanted to.

891
00:41:20,562 --> 00:41:22,270
So the key difference
here is we switched

892
00:41:22,270 --> 00:41:23,450
the quantify direction.

893
00:41:23,450 --> 00:41:25,700
This is such a big difference
that this problem is not

894
00:41:25,700 --> 00:41:29,330
NP-complete, unless
NP equals coNP.

895
00:41:29,330 --> 00:41:31,220
This problem is coNP complete.

896
00:41:31,220 --> 00:41:40,370

897
00:41:40,370 --> 00:41:46,330
Recall coNP are the problems
where you can always given

898
00:41:46,330 --> 00:41:47,170
no certificate.

899
00:41:47,170 --> 00:41:49,670
Whenever the answer is no,
I can give you a short proof

900
00:41:49,670 --> 00:41:50,730
that the answer is no.

901
00:41:50,730 --> 00:41:54,560
How would I tell you that the
answer to this question is no?

902
00:41:54,560 --> 00:41:56,380
I would give you a
satisfying assignment.

903
00:41:56,380 --> 00:42:00,100
I'd give you xa to xn,
where f ends up being 1,

904
00:42:00,100 --> 00:42:01,430
then you know this is not true.

905
00:42:01,430 --> 00:42:03,760
It's very hard to
prove yes here.

906
00:42:03,760 --> 00:42:07,460
I mean you might have to check
all possible exponentially many

907
00:42:07,460 --> 00:42:09,740
assignments to the xi's.

908
00:42:09,740 --> 00:42:11,920
Of course, we don't know
whether that's possible.

909
00:42:11,920 --> 00:42:13,150
That's coNP completeness.

910
00:42:13,150 --> 00:42:19,620
It's the same NP versus
p problem, but negated.

911
00:42:19,620 --> 00:42:20,550
Cool.

912
00:42:20,550 --> 00:42:24,080
So claim is Mine Sweeper
inference is coNP-complete.

913
00:42:24,080 --> 00:42:26,120
And in general, the
proper statement

914
00:42:26,120 --> 00:42:29,410
is Mine Sweeper
is coNP-complete.

915
00:42:29,410 --> 00:42:33,030
Mine Sweeper consistency
is NP-complete,

916
00:42:33,030 --> 00:42:35,920
but Mine Sweeper the game,
I want to solve the game,

917
00:42:35,920 --> 00:42:37,200
is coNP-complete.

918
00:42:37,200 --> 00:42:38,040
Cool?

919
00:42:38,040 --> 00:42:42,000
This will be one of the few
cases where coNP arises for us.

920
00:42:42,000 --> 00:42:44,441

921
00:42:44,441 --> 00:42:44,940
Yeah.

922
00:42:44,940 --> 00:42:46,820
AUDIENCE: Where does
coNP lie on this?

923
00:42:46,820 --> 00:42:48,327
We don't know?

924
00:42:48,327 --> 00:42:50,160
ERIK DEMAINE: In my
one-dimensional diagram,

925
00:42:50,160 --> 00:42:52,670
you can think of NP and coNP
lying in the same space,

926
00:42:52,670 --> 00:42:54,400
but maybe like in a
parallel universe.

927
00:42:54,400 --> 00:42:57,710

928
00:42:57,710 --> 00:42:58,820
I think.

929
00:42:58,820 --> 00:43:06,840
People always draw
this picture, NP, coNP.

930
00:43:06,840 --> 00:43:09,790
P is here, and this
is NP intersect coNP.

931
00:43:09,790 --> 00:43:14,640
And some people think that's
the same thing as P. Who knows.

932
00:43:14,640 --> 00:43:18,450
So there are parallel universes,
one about positive problems,

933
00:43:18,450 --> 00:43:21,740
one about negative problems.

934
00:43:21,740 --> 00:43:25,756
But in some sense,
equal complexity.

935
00:43:25,756 --> 00:43:27,380
In this class we
think about reductions

936
00:43:27,380 --> 00:43:28,588
as being one call reductions.

937
00:43:28,588 --> 00:43:30,030
You take your
problem, you map it

938
00:43:30,030 --> 00:43:33,580
so that the output when
you solve this new problem

939
00:43:33,580 --> 00:43:37,140
has exactly the same solution
to the original problem.

940
00:43:37,140 --> 00:43:39,580
If you instead think about
multi-call reductions

941
00:43:39,580 --> 00:43:42,370
where you can make calls to an
oracle that solved the target

942
00:43:42,370 --> 00:43:44,950
problem multiple times and
then do stuff with it--

943
00:43:44,950 --> 00:43:46,950
you could, for example,
call that thing,

944
00:43:46,950 --> 00:43:49,130
then negate the answer
and return that.

945
00:43:49,130 --> 00:43:53,780
In that universe NP and
coNP become the same thing.

946
00:43:53,780 --> 00:43:55,880
Or NP-completeness
and coNP-completeness,

947
00:43:55,880 --> 00:43:58,080
which are about reductions,
become the same thing.

948
00:43:58,080 --> 00:44:00,400
So that's the only
thing holding them apart

949
00:44:00,400 --> 00:44:03,120
is that we're not allowed
to negate the answer.

950
00:44:03,120 --> 00:44:04,836
So I view them as
almost the same,

951
00:44:04,836 --> 00:44:07,460
but obviously they're different
and you have to distinguish one

952
00:44:07,460 --> 00:44:07,920
from the other.

953
00:44:07,920 --> 00:44:10,070
But in terms of difficulty
they're about the same.

954
00:44:10,070 --> 00:44:12,510
The difference between NP
and coNP versus p space

955
00:44:12,510 --> 00:44:15,860
is totally different, or x
time, or the other things

956
00:44:15,860 --> 00:44:17,970
in my one-dimensional diagram.

957
00:44:17,970 --> 00:44:18,470
Yeah?

958
00:44:18,470 --> 00:44:21,737
AUDIENCE: Would p equals
NP imply p equals coNP?

959
00:44:21,737 --> 00:44:23,320
ERIK DEMAINE: If p
equals NP, then I'm

960
00:44:23,320 --> 00:44:31,090
pretty sure NP equals coNP,
because in polynomial time

961
00:44:31,090 --> 00:44:33,970
you can do-- yeah. p is
closed under a complement,

962
00:44:33,970 --> 00:44:36,590
because you can solve
the problem then negate.

963
00:44:36,590 --> 00:44:39,120
So I should say NP and
coNP are different.

964
00:44:39,120 --> 00:44:42,150
But NP-complete and
coNP-complete are very close,

965
00:44:42,150 --> 00:44:44,170
let's say.

966
00:44:44,170 --> 00:44:46,890
There's sort of dual-- for
every problem over here,

967
00:44:46,890 --> 00:44:49,290
the corresponding problem
over here is like the hardest,

968
00:44:49,290 --> 00:44:51,920
and they're sort of
symmetric or something.

969
00:44:51,920 --> 00:44:54,970

970
00:44:54,970 --> 00:44:55,590
All right.

971
00:44:55,590 --> 00:44:57,930
Phew.

972
00:44:57,930 --> 00:44:59,880
Back to Mine Sweeper.

973
00:44:59,880 --> 00:45:02,630
So here is the
coNP-completeness.

974
00:45:02,630 --> 00:45:04,690
We have wires just
like before, but I'm

975
00:45:04,690 --> 00:45:06,420
drawing them differently.

976
00:45:06,420 --> 00:45:09,690
Because part of the
issue here is we

977
00:45:09,690 --> 00:45:11,910
are told how many
bombs there are,

978
00:45:11,910 --> 00:45:14,590
and we don't want that
information to help us.

979
00:45:14,590 --> 00:45:16,970
So we want every diagram
to have an equal number

980
00:45:16,970 --> 00:45:18,616
of, say, x and x bars.

981
00:45:18,616 --> 00:45:20,240
So if we set it with
x or set it with x

982
00:45:20,240 --> 00:45:23,290
bar, we use exactly the
same number of bombs,

983
00:45:23,290 --> 00:45:26,490
Which means knowing what
gadgets are glued together

984
00:45:26,490 --> 00:45:28,910
we can just add up how
many bombs each one has.

985
00:45:28,910 --> 00:45:32,379
That will be the total number
of bombs given to the puzzle.

986
00:45:32,379 --> 00:45:34,420
And that shouldn't give
you any extra information

987
00:45:34,420 --> 00:45:36,044
because all of these
pictures will have

988
00:45:36,044 --> 00:45:38,210
equal number of x's and x bars.

989
00:45:38,210 --> 00:45:43,330
So here we have wire,
terminator, and turn.

990
00:45:43,330 --> 00:45:45,840
Pretty similar to
before, but now checking

991
00:45:45,840 --> 00:45:48,590
that everything has equal
number of x's and x bars.

992
00:45:48,590 --> 00:45:52,497
I think this turn,
for example-- no,

993
00:45:52,497 --> 00:45:53,830
that one happens to be balanced.

994
00:45:53,830 --> 00:45:55,455
Some of these gadgets
are not balanced.

995
00:45:55,455 --> 00:45:58,020
This one almost certainly.

996
00:45:58,020 --> 00:45:59,860
OK.

997
00:45:59,860 --> 00:46:06,650
So in this case, they construct
a NOT gate and an OR gate.

998
00:46:06,650 --> 00:46:09,370
And then they also
build a shifter.

999
00:46:09,370 --> 00:46:10,930
This is a different
kind of shifter.

1000
00:46:10,930 --> 00:46:14,040

1001
00:46:14,040 --> 00:46:18,190
It still has width and multiple
of 3, but we're taking the wire

1002
00:46:18,190 --> 00:46:20,490
and shifting it
perpendicular by one unit.

1003
00:46:20,490 --> 00:46:22,740
With turns you can simulate
the other type of shifter,

1004
00:46:22,740 --> 00:46:25,940
but this turns out to be
the only one that they need.

1005
00:46:25,940 --> 00:46:29,750
So let's talk about
that first, let's say.

1006
00:46:29,750 --> 00:46:36,770
So if x is set by this two and
this bomb, this one is not set.

1007
00:46:36,770 --> 00:46:38,800
This four already
has three of them,

1008
00:46:38,800 --> 00:46:40,349
so it effectively becomes a one.

1009
00:46:40,349 --> 00:46:42,390
So then these two have to
be opposites from each.

1010
00:46:42,390 --> 00:46:45,250
This is sort of where
the shift happens.

1011
00:46:45,250 --> 00:46:48,225
And then because we have to
deal with these bombs that

1012
00:46:48,225 --> 00:46:48,980
are left over.

1013
00:46:48,980 --> 00:46:50,770
Let's put some more in.

1014
00:46:50,770 --> 00:46:54,050
And then this is five, so
there's already four here,

1015
00:46:54,050 --> 00:46:56,230
and so that forces
an alternation there.

1016
00:46:56,230 --> 00:46:58,400
So same idea, but
with some bombs

1017
00:46:58,400 --> 00:47:03,062
added in to fill the
space, let's say.

1018
00:47:03,062 --> 00:47:08,120
Got to do a one here, and
a one here, a one there.

1019
00:47:08,120 --> 00:47:08,870
This is a problem.

1020
00:47:08,870 --> 00:47:11,184
I can't put a one here.

1021
00:47:11,184 --> 00:47:12,850
That would force this
guy to be present.

1022
00:47:12,850 --> 00:47:14,745
So that's probably why
that bomb is there,

1023
00:47:14,745 --> 00:47:16,870
because we don't want to
have to say how many bombs

1024
00:47:16,870 --> 00:47:18,440
are adjacent to this corner.

1025
00:47:18,440 --> 00:47:20,290
With regular wires you
don't have corners.

1026
00:47:20,290 --> 00:47:21,510
Good.

1027
00:47:21,510 --> 00:47:24,240
But when you're doing a shift
you have sort of corner.

1028
00:47:24,240 --> 00:47:27,140
Same thing with the turn
gadget that we already saw.

1029
00:47:27,140 --> 00:47:27,860
OK.

1030
00:47:27,860 --> 00:47:30,810
I think NOT is also
pretty intelligible,

1031
00:47:30,810 --> 00:47:32,410
but it's fairly complicated.

1032
00:47:32,410 --> 00:47:36,810
It essentially involves making
another copy of the signal

1033
00:47:36,810 --> 00:47:40,090
just so we get an equal
number of x's and x bars.

1034
00:47:40,090 --> 00:47:43,165
Because we saw in the previous
reduction with a NOT gate,

1035
00:47:43,165 --> 00:47:45,220
we had this one isolated guy.

1036
00:47:45,220 --> 00:47:46,950
That would be like this one.

1037
00:47:46,950 --> 00:47:50,150
And so if you just have
this picture, yeah,

1038
00:47:50,150 --> 00:47:51,590
it would negate things.

1039
00:47:51,590 --> 00:47:53,740
And again, this is
designed to be mod three,

1040
00:47:53,740 --> 00:48:00,429
so there's three, six-- that's
hard to do-- nine, 12, 15.

1041
00:48:00,429 --> 00:48:02,720
So things are nicely aligned
on the mod three boundary,

1042
00:48:02,720 --> 00:48:05,660
but they end up with
these three dudes.

1043
00:48:05,660 --> 00:48:07,010
They end up flipping the signal.

1044
00:48:07,010 --> 00:48:09,679
Here's x, here's also x,
which is like the reverse

1045
00:48:09,679 --> 00:48:10,720
because it's on the left.

1046
00:48:10,720 --> 00:48:13,310

1047
00:48:13,310 --> 00:48:15,810
But this would have an unequal
number of x's and x bars.

1048
00:48:15,810 --> 00:48:18,210
There's too many
x's in this row.

1049
00:48:18,210 --> 00:48:22,010
So we end up splitting off a
negated copy here, basically,

1050
00:48:22,010 --> 00:48:23,080
to balance things out.

1051
00:48:23,080 --> 00:48:24,871
And now if you count
all the x's and x bars

1052
00:48:24,871 --> 00:48:27,100
they should be equal.

1053
00:48:27,100 --> 00:48:28,340
Cool.

1054
00:48:28,340 --> 00:48:30,880
And then they build an OR gate.

1055
00:48:30,880 --> 00:48:34,980
So it's again, looks
fairly complicated.

1056
00:48:34,980 --> 00:48:36,990
Probably pretty
simple in essence,

1057
00:48:36,990 --> 00:48:39,640
but I don't feel like
checking all those cases.

1058
00:48:39,640 --> 00:48:44,325
What is annoying is that this
thing is not mod three aligned.

1059
00:48:44,325 --> 00:48:48,100
Mod three aligned
would be here or here,

1060
00:48:48,100 --> 00:48:50,530
with the output always
in the middle finger.

1061
00:48:50,530 --> 00:48:52,070
But instead it's here.

1062
00:48:52,070 --> 00:48:54,190
And so they used the
shift gadget over here

1063
00:48:54,190 --> 00:48:56,280
to offset that by
one, and similarly

1064
00:48:56,280 --> 00:48:58,630
in all three pictures.

1065
00:48:58,630 --> 00:49:01,470
And then you get an OR
gate with proper alignment.

1066
00:49:01,470 --> 00:49:04,320
Everything works
out in mod three.

1067
00:49:04,320 --> 00:49:05,940
OK.

1068
00:49:05,940 --> 00:49:08,130
Cool.

1069
00:49:08,130 --> 00:49:12,400
So we have NOT and we have
OR, therefore we have NOR,

1070
00:49:12,400 --> 00:49:17,480
and therefore we can build
any logical gate we want.

1071
00:49:17,480 --> 00:49:22,120
An so we have turns, we
have shifts that we need,

1072
00:49:22,120 --> 00:49:24,535
we have NOT, we have--
did we do split?

1073
00:49:24,535 --> 00:49:27,392
I think we did split
on the previous-- nope,

1074
00:49:27,392 --> 00:49:28,690
we didn't do split.

1075
00:49:28,690 --> 00:49:31,310
OK, then let's do split.

1076
00:49:31,310 --> 00:49:34,290
So we need to copy our wires.

1077
00:49:34,290 --> 00:49:38,490
This is a more complicated
version of the previous split.

1078
00:49:38,490 --> 00:49:41,170
Again, with an extra
thing thrown in.

1079
00:49:41,170 --> 00:49:42,810
Like this is not needed.

1080
00:49:42,810 --> 00:49:46,290
You don't have to put this here,
but it adds an extra x bar.

1081
00:49:46,290 --> 00:49:50,020
So there's actually
two of those things.

1082
00:49:50,020 --> 00:49:52,650
And so together that offsets
all the extra x copies

1083
00:49:52,650 --> 00:49:54,060
that are on the inside.

1084
00:49:54,060 --> 00:49:56,700
And so that forces, again,
equal number of bombs,

1085
00:49:56,700 --> 00:50:00,200
whether it's x or x bar chosen.

1086
00:50:00,200 --> 00:50:02,720
So we can just
count how many bombs

1087
00:50:02,720 --> 00:50:05,910
are needed in this picture.

1088
00:50:05,910 --> 00:50:06,900
Cool.

1089
00:50:06,900 --> 00:50:08,840
This is, again, a
symmetric version.

1090
00:50:08,840 --> 00:50:13,350
So if you're thinking of,
let's say, this as the input,

1091
00:50:13,350 --> 00:50:17,480
and these two as the output,
than negation happened.

1092
00:50:17,480 --> 00:50:19,300
So if you don't want
negation to happen,

1093
00:50:19,300 --> 00:50:20,770
just put a big NOT gate there.

1094
00:50:20,770 --> 00:50:23,690

1095
00:50:23,690 --> 00:50:26,492
And in this case they
give a crossover gadget.

1096
00:50:26,492 --> 00:50:27,950
In particular
because it's not that

1097
00:50:27,950 --> 00:50:32,830
hard to give a crossover gadget,
but it's also not necessary.

1098
00:50:32,830 --> 00:50:35,260
So you could do
crossover explicitly,

1099
00:50:35,260 --> 00:50:42,670
but in fact, I just looked
on Wikipedia earlier today.

1100
00:50:42,670 --> 00:50:46,410
We already know that planar
circuit SAT with NAND gates

1101
00:50:46,410 --> 00:50:47,400
is hard.

1102
00:50:47,400 --> 00:50:48,794
So can we build NAND?

1103
00:50:48,794 --> 00:50:51,460
And so I looked up in Wikipedia,
how you build NAND out of NORs.

1104
00:50:51,460 --> 00:50:52,820
And the answer is this.

1105
00:50:52,820 --> 00:50:54,290
And that's planar.

1106
00:50:54,290 --> 00:50:55,720
So we're done.

1107
00:50:55,720 --> 00:50:59,290
You take this picture, you plug
it into each of these guys.

1108
00:50:59,290 --> 00:51:01,020
And you take that
picture and you plug it

1109
00:51:01,020 --> 00:51:02,830
into each of these guys.

1110
00:51:02,830 --> 00:51:05,200
Make sure to preserve
planarity all the way through.

1111
00:51:05,200 --> 00:51:06,370
It does.

1112
00:51:06,370 --> 00:51:10,540
And then from-- I should know
that's you construct NAND out

1113
00:51:10,540 --> 00:51:11,040
of NOR.

1114
00:51:11,040 --> 00:51:17,320
It's exactly from De Morgan law,
because this is just negation.

1115
00:51:17,320 --> 00:51:19,096
So cool thing is all
these constructions

1116
00:51:19,096 --> 00:51:20,470
preserve planarity
which means we

1117
00:51:20,470 --> 00:51:23,240
can add to our definition
of planar circuit SAT.

1118
00:51:23,240 --> 00:51:29,870
All gates are NAND
or all gates are NOR.

1119
00:51:29,870 --> 00:51:33,230

1120
00:51:33,230 --> 00:51:38,120
This is nice because when you're
solving next p set or whatever,

1121
00:51:38,120 --> 00:51:41,970
you can just take
planar circuit SAT,

1122
00:51:41,970 --> 00:51:44,480
if you happen to construct
a NAND gate you're done.

1123
00:51:44,480 --> 00:51:46,690
If you happen to construct
an OR gate you're done.

1124
00:51:46,690 --> 00:51:47,770
No crossover needed.

1125
00:51:47,770 --> 00:51:51,450
You'll still need turns,
and maybe a shift,

1126
00:51:51,450 --> 00:51:53,850
and maybe a terminator.

1127
00:51:53,850 --> 00:51:57,490
You won't need NOT if
you build NAND or NOR.

1128
00:51:57,490 --> 00:52:00,750
You'll need a split, but you
don't need a crossover anymore.

1129
00:52:00,750 --> 00:52:02,230
This is cool.

1130
00:52:02,230 --> 00:52:04,740
As far as I know a new result,
but I mean obviously implicit

1131
00:52:04,740 --> 00:52:07,750
in all of these things.

1132
00:52:07,750 --> 00:52:08,250
Yeah.

1133
00:52:08,250 --> 00:52:11,400
AUDIENCE: Do you know if there's
any sub-problem, I guess,

1134
00:52:11,400 --> 00:52:14,430
is that where you don't
have universal gates

1135
00:52:14,430 --> 00:52:19,560
and you can't be planar
and get it so hard?

1136
00:52:19,560 --> 00:52:20,570
So maybe you can--

1137
00:52:20,570 --> 00:52:21,820
ERIK DEMAINE: Oh, interesting.

1138
00:52:21,820 --> 00:52:23,361
AUDIENCE: You can
split wires and you

1139
00:52:23,361 --> 00:52:27,042
have a variable that has the
negation of it coming out,

1140
00:52:27,042 --> 00:52:28,125
but that's all you can do.

1141
00:52:28,125 --> 00:52:29,100
No other NOT gates.

1142
00:52:29,100 --> 00:52:33,430

1143
00:52:33,430 --> 00:52:35,630
ERIK DEMAINE: My guess is
that all such problems are

1144
00:52:35,630 --> 00:52:37,590
polynomially solvable,
but maybe that's something

1145
00:52:37,590 --> 00:52:38,465
we could think about.

1146
00:52:38,465 --> 00:52:41,300

1147
00:52:41,300 --> 00:52:42,780
Certainly plausible
that you don't

1148
00:52:42,780 --> 00:52:45,210
need to be able to construct
all Boolean formulas in order

1149
00:52:45,210 --> 00:52:46,300
to be hard.

1150
00:52:46,300 --> 00:52:50,880
But my vague sense/experience
playing around

1151
00:52:50,880 --> 00:52:53,760
with weird other
gates, most of them

1152
00:52:53,760 --> 00:52:55,670
are all equivalent to
splits if they're not

1153
00:52:55,670 --> 00:52:58,490
universal-- something
like a split.

1154
00:52:58,490 --> 00:53:01,110
Maybe with some like
five operand operator,

1155
00:53:01,110 --> 00:53:02,580
you could do something cool.

1156
00:53:02,580 --> 00:53:06,990
But usually they degenerate
to other split-like things

1157
00:53:06,990 --> 00:53:10,590
or clause-like things.

1158
00:53:10,590 --> 00:53:13,380
But if you don't have both, you
don't get enough to be hard.

1159
00:53:13,380 --> 00:53:14,880
We should prove a
theorem like that,

1160
00:53:14,880 --> 00:53:19,030
but I would guess that you
need something like this.

1161
00:53:19,030 --> 00:53:21,410
Now these are not the
only universal gate sets.

1162
00:53:21,410 --> 00:53:26,670
I think in a moment I will
have a-- if you are curious

1163
00:53:26,670 --> 00:53:29,069
about more of what
universal gate sets are,

1164
00:53:29,069 --> 00:53:30,610
these are usually
called functionally

1165
00:53:30,610 --> 00:53:32,766
complete or functional
completeness.

1166
00:53:32,766 --> 00:53:34,140
If you look at
that on Wikipedia,

1167
00:53:34,140 --> 00:53:35,880
this is an excerpt
from Wikipedia,

1168
00:53:35,880 --> 00:53:39,640
you see NAND and NOR are
the only, among arity two

1169
00:53:39,640 --> 00:53:43,039
operators, so you have
two inputs, one output.

1170
00:53:43,039 --> 00:53:44,580
NAND and NOR are
the only things that

1171
00:53:44,580 --> 00:53:46,130
by themselves are universal.

1172
00:53:46,130 --> 00:53:49,640
But once you allow two different
gates you can do other things.

1173
00:53:49,640 --> 00:53:52,240
So these are
particularly interesting.

1174
00:53:52,240 --> 00:53:55,760
This is false I think.

1175
00:53:55,760 --> 00:53:59,810
It's called [INAUDIBLE], and
this is called top, it's true.

1176
00:53:59,810 --> 00:54:03,004
And so these are slightly
unusual ways for me

1177
00:54:03,004 --> 00:54:04,170
to think about writing them.

1178
00:54:04,170 --> 00:54:07,460
Here we have, of
course, AND and NOT.

1179
00:54:07,460 --> 00:54:11,210
But this is right
implication, which

1180
00:54:11,210 --> 00:54:13,730
is like not the left
thing or the right thing.

1181
00:54:13,730 --> 00:54:15,210
We talked about
that in the past.

1182
00:54:15,210 --> 00:54:17,520
That by itself is not
enough, because you can just

1183
00:54:17,520 --> 00:54:18,660
follow implication chains.

1184
00:54:18,660 --> 00:54:22,376
But if you also have
false, that is universal.

1185
00:54:22,376 --> 00:54:24,790
So that's kind of funny.

1186
00:54:24,790 --> 00:54:29,190
And this is XOR I think.

1187
00:54:29,190 --> 00:54:32,930
XOR is the same as saying that
the two things are different.

1188
00:54:32,930 --> 00:54:34,962
And this is XNOR.

1189
00:54:34,962 --> 00:54:36,670
So those by themselves
are not universal,

1190
00:54:36,670 --> 00:54:38,961
but if you have some other
kind of one-way implication,

1191
00:54:38,961 --> 00:54:42,390
then that gives you
any logical formulas.

1192
00:54:42,390 --> 00:54:45,540
Now, whether these in the planar
version are hard, I don't know.

1193
00:54:45,540 --> 00:54:49,870
But I know that Ds in the
planar version are hard.

1194
00:54:49,870 --> 00:54:51,974
OK, back to Mine Sweeper.

1195
00:54:51,974 --> 00:54:54,140
They drew a picture of how
everything fits together,

1196
00:54:54,140 --> 00:54:56,642
so it's maybe nice to
have the big picture.

1197
00:54:56,642 --> 00:54:58,850
But let's in particular
think about what the decision

1198
00:54:58,850 --> 00:55:02,505
question is and make sure--
I mean I claim this is coNP

1199
00:55:02,505 --> 00:55:05,130
and then we're doing unSATs, but
we should actually check that.

1200
00:55:05,130 --> 00:55:07,310
At this point we've just
simulated a circuit.

1201
00:55:07,310 --> 00:55:09,990
We haven't thought about what
we're trying to solve overall.

1202
00:55:09,990 --> 00:55:14,420
Now, we want to know whether
we can derive everything.

1203
00:55:14,420 --> 00:55:18,212
So we compute our formula
and then the output is here.

1204
00:55:18,212 --> 00:55:19,920
And at this point
there's just a terminal

1205
00:55:19,920 --> 00:55:22,530
there saying I don't
know what it is.

1206
00:55:22,530 --> 00:55:24,305
Different from the
previous proof.

1207
00:55:24,305 --> 00:55:27,540
The previous proof said that
should be one at the end,

1208
00:55:27,540 --> 00:55:29,960
and then you have to figure
out how to fill in the things.

1209
00:55:29,960 --> 00:55:33,400
Now we're saying, I
don't know what's there.

1210
00:55:33,400 --> 00:55:35,700
Can you figure out what's there?

1211
00:55:35,700 --> 00:55:38,460
And if it's the case
that no matter how

1212
00:55:38,460 --> 00:55:42,780
you set the variables
you always get false,

1213
00:55:42,780 --> 00:55:45,820
then you know what
this wire looks like.

1214
00:55:45,820 --> 00:55:46,920
You know that it's false.

1215
00:55:46,920 --> 00:55:48,760
And in fact, you can
figure out everything.

1216
00:55:48,760 --> 00:55:50,135
If you know what
all the XI's are

1217
00:55:50,135 --> 00:55:52,150
you can just run
through the circuit.

1218
00:55:52,150 --> 00:55:55,700
So you can figure out
the entire diagram.

1219
00:55:55,700 --> 00:55:57,570
But in general, just
asking the question,

1220
00:55:57,570 --> 00:55:59,370
can I figure out this square?

1221
00:55:59,370 --> 00:56:01,360
Is there a bomb or not?

1222
00:56:01,360 --> 00:56:03,850
In order for there
not to be a bomb,

1223
00:56:03,850 --> 00:56:07,300
you would have to
solve this problem.

1224
00:56:07,300 --> 00:56:09,190
You need to determine
that no matter

1225
00:56:09,190 --> 00:56:12,520
how you set the things
you end up with a zero.

1226
00:56:12,520 --> 00:56:16,360
Or the adjacent position
it would be the opposite.

1227
00:56:16,360 --> 00:56:18,510
So conversely, what I
really care about-- that

1228
00:56:18,510 --> 00:56:20,220
was the wrong direction.

1229
00:56:20,220 --> 00:56:22,740
I'm given a circuit
unSAT instance.

1230
00:56:22,740 --> 00:56:24,735
I want to turn it into
a Mine Sweeper instance.

1231
00:56:24,735 --> 00:56:31,910
So I do that, and then the
question is-- get this right--

1232
00:56:31,910 --> 00:56:35,460
can you derive whether there
is a bomb in this square?

1233
00:56:35,460 --> 00:56:39,770
Can you determine that there
must be a bomb in this square,

1234
00:56:39,770 --> 00:56:40,630
for example?

1235
00:56:40,630 --> 00:56:43,660
That would be a slightly
cleaner version.

1236
00:56:43,660 --> 00:56:48,590
And that will be true, if and
only if no matter what you do,

1237
00:56:48,590 --> 00:56:49,920
there's a bomb in that square.

1238
00:56:49,920 --> 00:56:52,180
Which is like saying
no matter what you do,

1239
00:56:52,180 --> 00:56:54,710
this formula comes out to zero.

1240
00:56:54,710 --> 00:56:56,730
So any kind of inference
question like that

1241
00:56:56,730 --> 00:57:02,050
is going to require you
to solve this problem,

1242
00:57:02,050 --> 00:57:03,930
or rather, this
problem can be reduced

1243
00:57:03,930 --> 00:57:07,320
to any inference
problem like that.

1244
00:57:07,320 --> 00:57:11,650
It's easy to get backwards here,
so hope I got it all right.

1245
00:57:11,650 --> 00:57:13,850
And that's coNP completeness.

1246
00:57:13,850 --> 00:57:16,757
Reductions look
the same for coNP.

1247
00:57:16,757 --> 00:57:18,340
We just start with
different problems.

1248
00:57:18,340 --> 00:57:21,820

1249
00:57:21,820 --> 00:57:23,370
Cool.

1250
00:57:23,370 --> 00:57:28,880
So that was Mine Sweeper
and functional completeness.

1251
00:57:28,880 --> 00:57:31,400
I have one more-- well,
sort of two more proofs.

1252
00:57:31,400 --> 00:57:36,330
Only one that I will talk
about in detail for Candy Crush

1253
00:57:36,330 --> 00:57:41,350
and soon enough, Bejeweled.

1254
00:57:41,350 --> 00:57:44,240
But let's think about Candy
Crush is the modern version.

1255
00:57:44,240 --> 00:57:48,010
I'm guessing you've all
played, but in case not,

1256
00:57:48,010 --> 00:57:48,760
please don't play.

1257
00:57:48,760 --> 00:57:51,330
It's very addictive.

1258
00:57:51,330 --> 00:57:53,350
But on the slides
we're allowed to.

1259
00:57:53,350 --> 00:57:59,040
So you have a grid of
colors, colored candies.

1260
00:57:59,040 --> 00:58:03,030
And a move in this game
is to take two candies

1261
00:58:03,030 --> 00:58:05,690
and switch their order.

1262
00:58:05,690 --> 00:58:08,120
I guess in this picture
I did these two.

1263
00:58:08,120 --> 00:58:10,880
If you switch these two
you get this picture.

1264
00:58:10,880 --> 00:58:14,770
And the mechanics of the
game, the physics or whatever,

1265
00:58:14,770 --> 00:58:17,450
is whenever you have
three or more candies

1266
00:58:17,450 --> 00:58:21,800
of the same color in a row
or column, or in a row,

1267
00:58:21,800 --> 00:58:23,540
then they disappear.

1268
00:58:23,540 --> 00:58:24,955
And anything above them falls.

1269
00:58:24,955 --> 00:58:27,182
So like this red
candy ends up there.

1270
00:58:27,182 --> 00:58:29,140
In this case, there were
no more candies above.

1271
00:58:29,140 --> 00:58:31,598
In the real game usually there's
always more candies above.

1272
00:58:31,598 --> 00:58:35,710
But if we're in a small game
this won't-- if we're in a big

1273
00:58:35,710 --> 00:58:37,430
game and looking
at a small window,

1274
00:58:37,430 --> 00:58:39,930
we know everything
about what will fall.

1275
00:58:39,930 --> 00:58:42,856
AUDIENCE: Do you need to
make them fall or do they

1276
00:58:42,856 --> 00:58:44,230
automatically fall
once you get--

1277
00:58:44,230 --> 00:58:45,813
ERIK DEMAINE: They
automatically fall.

1278
00:58:45,813 --> 00:58:48,200
Yeah, so they are
forced to fall.

1279
00:58:48,200 --> 00:58:49,880
It's all I get to
do is make this move

1280
00:58:49,880 --> 00:58:51,560
and then stuff happens.

1281
00:58:51,560 --> 00:58:53,550
So I make this move
and then anything

1282
00:58:53,550 --> 00:58:56,829
that-- any three in a
rows or more disappear.

1283
00:58:56,829 --> 00:58:58,620
And then if that makes
more three in a rows

1284
00:58:58,620 --> 00:59:00,300
they will disappear and so on.

1285
00:59:00,300 --> 00:59:02,440
And my hands are
off at that point.

1286
00:59:02,440 --> 00:59:05,140
Once the chain
reactions are finished--

1287
00:59:05,140 --> 00:59:07,160
not all games work this
way, but Candy Crush

1288
00:59:07,160 --> 00:59:08,480
happens to work this way.

1289
00:59:08,480 --> 00:59:11,250
Once these things are finished,
then I can do another exchange.

1290
00:59:11,250 --> 00:59:14,840
And when I do an exchange
I must make three in a row.

1291
00:59:14,840 --> 00:59:17,395
I can't just swap
these two guys.

1292
00:59:17,395 --> 00:59:18,270
It's not interesting.

1293
00:59:18,270 --> 00:59:20,820
AUDIENCE: What if it's like a
T pattern or like non-linear?

1294
00:59:20,820 --> 00:59:23,842

1295
00:59:23,842 --> 00:59:24,800
ERIK DEMAINE: Yeah, OK.

1296
00:59:24,800 --> 00:59:26,300
In this picture
we'll never have Ts.

1297
00:59:26,300 --> 00:59:28,860
It will always be three in a
row, and never a four in a row.

1298
00:59:28,860 --> 00:59:31,870
With four in a row, magical
striped candies happen

1299
00:59:31,870 --> 00:59:34,480
and you don't want to know.

1300
00:59:34,480 --> 00:59:37,930
So potentially you can get up to
five in a row with these rows,

1301
00:59:37,930 --> 00:59:40,360
but in these reductions
that won't happen.

1302
00:59:40,360 --> 00:59:43,350
So we don't care what
the rules say there.

1303
00:59:43,350 --> 00:59:45,060
We're only going to
get three in a rows.

1304
00:59:45,060 --> 00:59:47,630
There is a weird
catch in this proof.

1305
00:59:47,630 --> 00:59:52,030
I'm going to mention two proofs
from 2014, so all very recent.

1306
00:59:52,030 --> 00:59:54,310
I guess the game isn't that old.

1307
00:59:54,310 --> 00:59:58,670
And in this proof we're going
to assume if-- in general, there

1308
00:59:58,670 --> 01:00:01,900
may be multiple three
in a rows at once.

1309
01:00:01,900 --> 01:00:04,590
And the proof is going to assume
that they are resolved bottom

1310
01:00:04,590 --> 01:00:08,390
to top, so you do the
bottom-most one first, things

1311
01:00:08,390 --> 01:00:11,670
fall, then you do the next one,
things fall, do the next one,

1312
01:00:11,670 --> 01:00:12,910
things fall.

1313
01:00:12,910 --> 01:00:14,600
That's not how the
actual game works.

1314
01:00:14,600 --> 01:00:19,010
In the game, they all
disappear simultaneously

1315
01:00:19,010 --> 01:00:20,340
and then stuff falls.

1316
01:00:20,340 --> 01:00:22,170
OK, but ignore that
for the moment.

1317
01:00:22,170 --> 01:00:23,912
The next proof will
change the model.

1318
01:00:23,912 --> 01:00:26,120
OK, this is a much easier
one to think about and draw

1319
01:00:26,120 --> 01:00:27,220
the pictures.

1320
01:00:27,220 --> 01:00:31,810
So in that model, here's
a variable gadget.

1321
01:00:31,810 --> 01:00:34,810
The starting point's the
same, picture top and bottom.

1322
01:00:34,810 --> 01:00:36,670
And the idea is
either you exchange

1323
01:00:36,670 --> 01:00:39,420
these two to make
three, or you exchange

1324
01:00:39,420 --> 01:00:41,050
these two to make three.

1325
01:00:41,050 --> 01:00:44,400
And the consequence is either
the right column falls by three

1326
01:00:44,400 --> 01:00:46,060
or the middle column
falls by three.

1327
01:00:46,060 --> 01:00:48,430
And that's all you can
do local to this gadget.

1328
01:00:48,430 --> 01:00:49,607
So that's easy.

1329
01:00:49,607 --> 01:00:50,940
Things are going to get messier.

1330
01:00:50,940 --> 01:00:54,120

1331
01:00:54,120 --> 01:00:57,600
OK, so you have this picture,
variable gadget for XI.

1332
01:00:57,600 --> 01:01:01,860
Above it I'm going to make
one of these two gadgets.

1333
01:01:01,860 --> 01:01:04,387
Actually, both of them,
but one at a time.

1334
01:01:04,387 --> 01:01:05,970
So in fact, it will
actually look kind

1335
01:01:05,970 --> 01:01:07,880
of like this, stacked on
top of the variable which

1336
01:01:07,880 --> 01:01:08,570
is down here.

1337
01:01:08,570 --> 01:01:09,910
So variables down here.

1338
01:01:09,910 --> 01:01:14,915
Either the center column falls
or the right column falls.

1339
01:01:14,915 --> 01:01:17,660
Now, the idea is this is
going to eventually connect

1340
01:01:17,660 --> 01:01:20,150
to a clause, and this
variable-- I should

1341
01:01:20,150 --> 01:01:21,720
say this is not for
circuit SAT, this

1342
01:01:21,720 --> 01:01:25,100
is from 3SAT-- regular old 3SAT.

1343
01:01:25,100 --> 01:01:27,752
So that variable
appears in a clause

1344
01:01:27,752 --> 01:01:29,460
either in positive
form or negative form.

1345
01:01:29,460 --> 01:01:30,660
Positive, use this gadget.

1346
01:01:30,660 --> 01:01:32,580
Negative, use this gadget.

1347
01:01:32,580 --> 01:01:37,040
So in the positive case,
if this falls by three

1348
01:01:37,040 --> 01:01:40,970
we get this picture, and
then these disappear,

1349
01:01:40,970 --> 01:01:43,020
and so this guy falls one more.

1350
01:01:43,020 --> 01:01:45,310
And the idea is that's going
to trigger something off

1351
01:01:45,310 --> 01:01:45,880
to the right.

1352
01:01:45,880 --> 01:01:48,560
That will be next slide.

1353
01:01:48,560 --> 01:01:50,630
That will be the wire gadget.

1354
01:01:50,630 --> 01:01:54,530
If the center column fell by
three, nothing would happen.

1355
01:01:54,530 --> 01:01:57,180
The purples-- so I
should mention how

1356
01:01:57,180 --> 01:01:58,670
these gadgets are constructed.

1357
01:01:58,670 --> 01:02:02,390
There's a four color sort
of checkerboard pattern

1358
01:02:02,390 --> 01:02:03,720
in odd rows.

1359
01:02:03,720 --> 01:02:05,900
It's alternating orange,
green, orange, green.

1360
01:02:05,900 --> 01:02:09,040
In even rows it's alternating
red, yellow, red, yellow.

1361
01:02:09,040 --> 01:02:11,770
And then in a few places we're
going to put the purple ones,

1362
01:02:11,770 --> 01:02:13,630
because purple's best.

1363
01:02:13,630 --> 01:02:17,440
And all the action is going
to be in the purple candies.

1364
01:02:17,440 --> 01:02:20,400
These guys are just out
there-- and the real game

1365
01:02:20,400 --> 01:02:21,170
has six colors.

1366
01:02:21,170 --> 01:02:22,420
We're only using five of them.

1367
01:02:22,420 --> 01:02:23,704
So cool.

1368
01:02:23,704 --> 01:02:25,120
These guys are
just sort of filler

1369
01:02:25,120 --> 01:02:27,200
to make sure nothing
else happens.

1370
01:02:27,200 --> 01:02:32,230
But still things fall vertically
in a nice controlled way.

1371
01:02:32,230 --> 01:02:37,140
OK, so if these fall
by three, the purples

1372
01:02:37,140 --> 01:02:38,710
don't align so nothing happens.

1373
01:02:38,710 --> 01:02:41,340
In this case, if the
center one falls by three

1374
01:02:41,340 --> 01:02:44,160
we get alignment, and
that falls by one.

1375
01:02:44,160 --> 01:02:46,530
So great.

1376
01:02:46,530 --> 01:02:52,930
Also note, these gadgets
stack somewhat nicely.

1377
01:02:52,930 --> 01:02:56,670
In that other than this
three gap-- in reality,

1378
01:02:56,670 --> 01:02:58,260
more candies will fill in here.

1379
01:02:58,260 --> 01:03:00,290
I drew it this way
so you could see how

1380
01:03:00,290 --> 01:03:02,520
much the columns actually fall.

1381
01:03:02,520 --> 01:03:04,990
Remember, this all sort
of happens in one move.

1382
01:03:04,990 --> 01:03:09,190
So this falls, these clear,
then this will clear,

1383
01:03:09,190 --> 01:03:11,740
and stuff happens.

1384
01:03:11,740 --> 01:03:12,390
It's annoying.

1385
01:03:12,390 --> 01:03:16,600
So, so far everything's
good because each of these

1386
01:03:16,600 --> 01:03:21,050
has fallen by one in addition
to the original three.

1387
01:03:21,050 --> 01:03:26,035
But in this case, this
follows by an extra one,

1388
01:03:26,035 --> 01:03:28,415
and I think you need to
add an extra candy here.

1389
01:03:28,415 --> 01:03:30,950
I'm a little unclear in the
details on how to do that.

1390
01:03:30,950 --> 01:03:35,040
It's mentioned in the
paper, but without details.

1391
01:03:35,040 --> 01:03:37,742
Anyway, in the end we
will have a bunch of these

1392
01:03:37,742 --> 01:03:38,950
stacked on top of each other.

1393
01:03:38,950 --> 01:03:41,585
Each time the variable
occurs in various clauses

1394
01:03:41,585 --> 01:03:42,960
we're going to
have some positive

1395
01:03:42,960 --> 01:03:44,300
and some negative ones.

1396
01:03:44,300 --> 01:03:47,690
And we want the same variable
trigger-- ah, that's right.

1397
01:03:47,690 --> 01:03:50,560
There will be-- well, OK.

1398
01:03:50,560 --> 01:03:51,060
Yeah.

1399
01:03:51,060 --> 01:03:53,770
I'm going to leave it like that.

1400
01:03:53,770 --> 01:03:58,770
So at this point we have
a purple thing triggering

1401
01:03:58,770 --> 01:03:59,780
something to the right.

1402
01:03:59,780 --> 01:04:01,280
So now I'm going to show
you how that part works.

1403
01:04:01,280 --> 01:04:02,370
This is the wire.

1404
01:04:02,370 --> 01:04:03,944
So the wire itself is like this.

1405
01:04:03,944 --> 01:04:06,110
And the idea is that when
there's a purple one here,

1406
01:04:06,110 --> 01:04:08,250
a chain reaction happens.

1407
01:04:08,250 --> 01:04:09,660
And it happens in this way.

1408
01:04:09,660 --> 01:04:14,350
As soon as there's a purple
candy here, this clears,

1409
01:04:14,350 --> 01:04:16,400
which makes these
two fall by one,

1410
01:04:16,400 --> 01:04:19,300
which clears that, which
makes this fall by one,

1411
01:04:19,300 --> 01:04:22,290
and triggers the next thing.

1412
01:04:22,290 --> 01:04:27,830
This one, some stacking happens.

1413
01:04:27,830 --> 01:04:28,760
Let's see.

1414
01:04:28,760 --> 01:04:33,410
So overall, I think this one
is actually better behaved.

1415
01:04:33,410 --> 01:04:36,840
This falls by one
here and then two.

1416
01:04:36,840 --> 01:04:39,370
So overall these
columns fell by two.

1417
01:04:39,370 --> 01:04:42,000
This column has
fallen so far by one,

1418
01:04:42,000 --> 01:04:43,849
but it's about to
fall by a second one,

1419
01:04:43,849 --> 01:04:45,640
because this will always
trigger something.

1420
01:04:45,640 --> 01:04:48,200
And so these do stack
nicely, because you always

1421
01:04:48,200 --> 01:04:49,930
clear exactly two columns.

1422
01:04:49,930 --> 01:04:52,990
The worry is that the gadget
above it will be skewed.

1423
01:04:52,990 --> 01:04:56,079

1424
01:04:56,079 --> 01:04:57,620
Let me give you one
more gadget, then

1425
01:04:57,620 --> 01:04:59,870
I'll tell you-- no,
actually, I think

1426
01:04:59,870 --> 01:05:02,950
at this point I should tell
you how things fit together,

1427
01:05:02,950 --> 01:05:05,560
which is this picture.

1428
01:05:05,560 --> 01:05:11,950

1429
01:05:11,950 --> 01:05:18,265
So we have variables down
here in the lower left.

1430
01:05:18,265 --> 01:05:24,460

1431
01:05:24,460 --> 01:05:27,605
Then let's worry about
one thing at a time.

1432
01:05:27,605 --> 01:05:31,640

1433
01:05:31,640 --> 01:05:33,985
These are the
connection gadgets.

1434
01:05:33,985 --> 01:05:36,960

1435
01:05:36,960 --> 01:05:39,890
I don't think I
told you their name.

1436
01:05:39,890 --> 01:05:42,880
But they are your
connector gadgets.

1437
01:05:42,880 --> 01:05:44,850
This is making a 90 degree turn.

1438
01:05:44,850 --> 01:05:46,570
From the falling
action we're going

1439
01:05:46,570 --> 01:05:49,210
to get a purple in a
particular position, which

1440
01:05:49,210 --> 01:05:51,255
causes rightward motion.

1441
01:05:51,255 --> 01:05:58,260
And then the wires that you
saw basically go in some angle

1442
01:05:58,260 --> 01:05:58,970
off to the right.

1443
01:05:58,970 --> 01:06:04,424

1444
01:06:04,424 --> 01:06:06,090
I want these all to
be non-intersecting.

1445
01:06:06,090 --> 01:06:09,910

1446
01:06:09,910 --> 01:06:13,330
And there's sort of two of them.

1447
01:06:13,330 --> 01:06:17,990
There's going to be the true
case and the false case.

1448
01:06:17,990 --> 01:06:20,870
And then way over
here somewhere,

1449
01:06:20,870 --> 01:06:28,430
we're going to have a clause
where these wires all attach.

1450
01:06:28,430 --> 01:06:30,270
And then above it
we're going to have

1451
01:06:30,270 --> 01:06:38,040
a reward where you get tons
of points, and et cetera.

1452
01:06:38,040 --> 01:06:41,655
So let me tell you
what happens next.

1453
01:06:41,655 --> 01:06:44,260

1454
01:06:44,260 --> 01:06:48,000
It's a fun way to
draw the picture.

1455
01:06:48,000 --> 01:06:50,920
So above these we'll have
some other connections.

1456
01:06:50,920 --> 01:06:53,535

1457
01:06:53,535 --> 01:06:55,980
I should not do it
in the same pattern.

1458
01:06:55,980 --> 01:06:57,430
I should not do it like that.

1459
01:06:57,430 --> 01:06:58,090
Yeah, sure.

1460
01:06:58,090 --> 01:07:00,082
Connection, connection.

1461
01:07:00,082 --> 01:07:04,390

1462
01:07:04,390 --> 01:07:08,410
OK, again, diagonal lines.

1463
01:07:08,410 --> 01:07:09,770
Great.

1464
01:07:09,770 --> 01:07:10,580
Not quite diagonal.

1465
01:07:10,580 --> 01:07:11,530
It's an angle.

1466
01:07:11,530 --> 01:07:13,072
We have a clause.

1467
01:07:13,072 --> 01:07:14,030
Everything connects up.

1468
01:07:14,030 --> 01:07:17,230
Above the clause is a reward.

1469
01:07:17,230 --> 01:07:20,310

1470
01:07:20,310 --> 01:07:27,860
And then I move boards,
and that's the picture.

1471
01:07:27,860 --> 01:07:29,780
And above the
variables, we just keep

1472
01:07:29,780 --> 01:07:34,010
adding more connections
connected to some clauses.

1473
01:07:34,010 --> 01:07:37,970
And there's not just three
variables, of course.

1474
01:07:37,970 --> 01:07:41,410
There's n variables down here,
and we use some, three of them,

1475
01:07:41,410 --> 01:07:43,030
and then connect
that off to a clause.

1476
01:07:43,030 --> 01:07:46,860
And they're all just stacked--
I happen to draw the clauses

1477
01:07:46,860 --> 01:07:47,860
one on top of the other.

1478
01:07:47,860 --> 01:07:49,600
That shouldn't happen.

1479
01:07:49,600 --> 01:07:51,480
So there's some
extra space here.

1480
01:07:51,480 --> 01:07:53,740
This is more over to the right.

1481
01:07:53,740 --> 01:07:55,874
So that none of them will
interact with each other.

1482
01:07:55,874 --> 01:07:56,540
That's the goal.

1483
01:07:56,540 --> 01:08:00,170

1484
01:08:00,170 --> 01:08:06,189
Except there's some issues,
like notice this wire gadget,

1485
01:08:06,189 --> 01:08:08,479
notice dual rail logic.

1486
01:08:08,479 --> 01:08:11,325
Either this is active
or this is active.

1487
01:08:11,325 --> 01:08:12,700
And we hope that
not both of them

1488
01:08:12,700 --> 01:08:14,825
are active, although that
can actually happen here.

1489
01:08:14,825 --> 01:08:16,850
I'll get to that.

1490
01:08:16,850 --> 01:08:21,109
So when this activates,
notice this goes

1491
01:08:21,109 --> 01:08:23,800
on top of a variable gadget.

1492
01:08:23,800 --> 01:08:25,810
Now, a wire by itself
is kind of good.

1493
01:08:25,810 --> 01:08:28,910
We've seen it removes two
things from every spot.

1494
01:08:28,910 --> 01:08:33,000
So things don't shift too much.

1495
01:08:33,000 --> 01:08:36,649
And furthermore, we should
hope that either this activates

1496
01:08:36,649 --> 01:08:37,560
or this activates.

1497
01:08:37,560 --> 01:08:39,350
So this will shift by
a consistent amount

1498
01:08:39,350 --> 01:08:41,170
in either case.

1499
01:08:41,170 --> 01:08:46,609
But the wire may get messed up
because the variable actually

1500
01:08:46,609 --> 01:08:49,760
removes three things
from one of the columns.

1501
01:08:49,760 --> 01:08:57,630
So we need a better wire
gadget, which looks like this.

1502
01:08:57,630 --> 01:08:58,920
This is a super wire gadget.

1503
01:08:58,920 --> 01:09:00,020
It's really cool.

1504
01:09:00,020 --> 01:09:03,899
It works no matter how
you use it, kind of.

1505
01:09:03,899 --> 01:09:06,170
So this is what it
looks like in general.

1506
01:09:06,170 --> 01:09:07,830
And this is regular use.

1507
01:09:07,830 --> 01:09:11,029
So as before, if
we trigger this,

1508
01:09:11,029 --> 01:09:15,260
then this triggers, and this guy
falls by one, just like before.

1509
01:09:15,260 --> 01:09:17,950
But now also, if there's
a variable down here

1510
01:09:17,950 --> 01:09:20,810
and this column falls
by three-- or sorry.

1511
01:09:20,810 --> 01:09:24,000
If this column falls by
three, so the same picture,

1512
01:09:24,000 --> 01:09:28,695
the things fell by three,
still everything works out.

1513
01:09:28,695 --> 01:09:30,890
These two fall.

1514
01:09:30,890 --> 01:09:33,190
These two fall but they
meet a different dude.

1515
01:09:33,190 --> 01:09:36,880
But there were a bunch of guys
to meet up with, so it's fine.

1516
01:09:36,880 --> 01:09:42,120
And I clearly drew the
output in the wrong place.

1517
01:09:42,120 --> 01:09:44,061
The output should
be here I think.

1518
01:09:44,061 --> 01:09:44,560
Yeah.

1519
01:09:44,560 --> 01:09:48,100
So in this picture
the output was here,

1520
01:09:48,100 --> 01:09:49,620
also it shifted by one.

1521
01:09:49,620 --> 01:09:53,050
In this picture the output
is here, not up there.

1522
01:09:53,050 --> 01:09:54,840
So in both cases it triggers.

1523
01:09:54,840 --> 01:09:57,340
And finally if the middle
column fell by three

1524
01:09:57,340 --> 01:10:01,340
before this gadget
activated, then this,

1525
01:10:01,340 --> 01:10:04,860
again, triggers this time
with this guy being different.

1526
01:10:04,860 --> 01:10:07,860
Instead of this one matching,
this one's matching.

1527
01:10:07,860 --> 01:10:12,720
That still triggers these guys
and this is still the output.

1528
01:10:12,720 --> 01:10:14,874
So this is a
different wire gadget

1529
01:10:14,874 --> 01:10:16,540
that works in three
different scenarios,

1530
01:10:16,540 --> 01:10:18,550
depending on what
happened below it.

1531
01:10:18,550 --> 01:10:19,790
So that's good news.

1532
01:10:19,790 --> 01:10:24,090
That lets us do
this type of wire.

1533
01:10:24,090 --> 01:10:26,660
And in general, we're going
to have a chain reaction all

1534
01:10:26,660 --> 01:10:32,590
the way down here until we
get to the clause from bottom

1535
01:10:32,590 --> 01:10:33,520
to top.

1536
01:10:33,520 --> 01:10:35,250
And this we'll resolve.

1537
01:10:35,250 --> 01:10:39,496
And let me show you the clause.

1538
01:10:39,496 --> 01:10:42,990
I think details are
a little bit messy.

1539
01:10:42,990 --> 01:10:46,840
There's a little
locking mechanism here.

1540
01:10:46,840 --> 01:10:50,480
But basically the idea is
all of these things come

1541
01:10:50,480 --> 01:10:53,070
in, x1, x1 bar, x2, x2 bar.

1542
01:10:53,070 --> 01:10:56,890
All of the half
wires or semi-wires.

1543
01:10:56,890 --> 01:11:00,770
And so we expect one
of these to activate.

1544
01:11:00,770 --> 01:11:04,330
Maybe you don't do that,
but that would be weird,

1545
01:11:04,330 --> 01:11:06,690
and you won't end up
satisfying the clause.

1546
01:11:06,690 --> 01:11:12,810
So if this one activates, then
these align, and you're happy.

1547
01:11:12,810 --> 01:11:15,402
In general, if you can
get this column to fall,

1548
01:11:15,402 --> 01:11:17,610
you're going to be happy,
because above this thing is

1549
01:11:17,610 --> 01:11:18,590
this reward gadget.

1550
01:11:18,590 --> 01:11:22,440
And if this column falls by
one, you get a million points.

1551
01:11:22,440 --> 01:11:25,770
And every clause has its own
reward of a million points,

1552
01:11:25,770 --> 01:11:29,510
and million here is like
n squared or something.

1553
01:11:29,510 --> 01:11:31,134
So you really want to get these.

1554
01:11:31,134 --> 01:11:33,300
And the only way to do it
is to satisfy the clauses.

1555
01:11:33,300 --> 01:11:34,830
The only way to
get all the point

1556
01:11:34,830 --> 01:11:37,510
is satisfy all the clauses.

1557
01:11:37,510 --> 01:11:41,530
Now, the goal in this
game, I didn't mention,

1558
01:11:41,530 --> 01:11:44,300
is to maximize the number
of points you can get

1559
01:11:44,300 --> 01:11:46,020
for a given number of moves.

1560
01:11:46,020 --> 01:11:50,140
Usually in Candy Crush you
have a limited number of moves.

1561
01:11:50,140 --> 01:11:52,850
So the idea is you're just going
to have enough moves to set

1562
01:11:52,850 --> 01:11:54,630
each of the variables right.

1563
01:11:54,630 --> 01:11:56,750
If you end up setting one
of the wires directly--

1564
01:11:56,750 --> 01:11:58,990
you can trigger any wire
by doing a little flip.

1565
01:11:58,990 --> 01:12:01,330
You can say I'll
trigger this one wire.

1566
01:12:01,330 --> 01:12:03,970
But that will satisfy,
at most, one clause.

1567
01:12:03,970 --> 01:12:05,430
Whereas if you do
it on a variable,

1568
01:12:05,430 --> 01:12:07,405
you're going to satisfy
a bunch of clauses,

1569
01:12:07,405 --> 01:12:10,260
and that's clearly better.

1570
01:12:10,260 --> 01:12:13,940
So that's a bit of an
argument you need to make.

1571
01:12:13,940 --> 01:12:15,620
It doesn't help enough.

1572
01:12:15,620 --> 01:12:20,360
You could even set this wire
and this wire, an xy or an x bar

1573
01:12:20,360 --> 01:12:20,860
wire.

1574
01:12:20,860 --> 01:12:25,780
But the claim is
that will never buy

1575
01:12:25,780 --> 01:12:30,640
you as much as setting
an entire variable,

1576
01:12:30,640 --> 01:12:33,050
and here's the reason why.

1577
01:12:33,050 --> 01:12:35,512
I drew this picture
simply to say

1578
01:12:35,512 --> 01:12:37,970
for every clause we're going
to have this picture connected

1579
01:12:37,970 --> 01:12:39,180
to some variables.

1580
01:12:39,180 --> 01:12:41,450
In fact, every time
you have a clause,

1581
01:12:41,450 --> 01:12:44,610
you make a million
copies of the clause.

1582
01:12:44,610 --> 01:12:46,570
And million is like n.

1583
01:12:46,570 --> 01:12:49,170
So that it's really
worth setting the var--

1584
01:12:49,170 --> 01:12:52,154
every variable appears
in millions of clauses.

1585
01:12:52,154 --> 01:12:53,820
So you really want
to set the variables.

1586
01:12:53,820 --> 01:12:55,980
If you just satisfy
one measly clause

1587
01:12:55,980 --> 01:12:58,970
and get one measly million
points, it's not worth it.

1588
01:12:58,970 --> 01:13:02,460
But if you can get a million
times a million points, whoa,

1589
01:13:02,460 --> 01:13:05,930
a trillion points.

1590
01:13:05,930 --> 01:13:08,340
So that's why you should
only set variables, not

1591
01:13:08,340 --> 01:13:10,231
set wires directly.

1592
01:13:10,231 --> 01:13:10,730
OK.

1593
01:13:10,730 --> 01:13:14,040

1594
01:13:14,040 --> 01:13:16,510
I think I have roughly
covered this proof, except I

1595
01:13:16,510 --> 01:13:18,270
didn't go up the chain.

1596
01:13:18,270 --> 01:13:22,544
Here, setting x1 bar doesn't
do much except setting one

1597
01:13:22,544 --> 01:13:24,960
or the other of these ends up
shifting all of these things

1598
01:13:24,960 --> 01:13:27,650
by one, which ends of
clearing this, which shifts

1599
01:13:27,650 --> 01:13:30,250
all of these columns by one.

1600
01:13:30,250 --> 01:13:32,870
And basically things look
really spread out here,

1601
01:13:32,870 --> 01:13:34,680
but as you work
your way up, they're

1602
01:13:34,680 --> 01:13:36,610
coming more and
more into alignment.

1603
01:13:36,610 --> 01:13:40,130
The idea is as long as things
resolve from bottom to top,

1604
01:13:40,130 --> 01:13:47,715
you-- it doesn't-- then first
you figure out whether x1

1605
01:13:47,715 --> 01:13:48,590
satisfies the clause.

1606
01:13:48,590 --> 01:13:51,090
If it doesn't, it
sets things up for x2.

1607
01:13:51,090 --> 01:13:52,870
And then maybe x2
satisfies the clause.

1608
01:13:52,870 --> 01:13:54,760
If it doesn't, it sets
things up for x3 here.

1609
01:13:54,760 --> 01:13:56,310
They're spread out even more.

1610
01:13:56,310 --> 01:13:58,860
But by the time you've
done these things below,

1611
01:13:58,860 --> 01:14:00,520
that thing will be ready.

1612
01:14:00,520 --> 01:14:03,970

1613
01:14:03,970 --> 01:14:06,580
So that was the first proof.

1614
01:14:06,580 --> 01:14:11,160
The second proof--
sorry, before interlude.

1615
01:14:11,160 --> 01:14:14,070
Candy Crush is based
on a variety of games.

1616
01:14:14,070 --> 01:14:17,090
Most famous is Bejeweled,
but there is a long history

1617
01:14:17,090 --> 01:14:20,510
of-- even Tetris is in there.

1618
01:14:20,510 --> 01:14:23,110
There's a long history
of match three games.

1619
01:14:23,110 --> 01:14:25,100
And pretty much all of
these are NP-complete.

1620
01:14:25,100 --> 01:14:26,766
I don't know the
details of all of them,

1621
01:14:26,766 --> 01:14:30,800
but there's this paper by three
authors a little bit later

1622
01:14:30,800 --> 01:14:33,890
in the year that proves
basically all of these games

1623
01:14:33,890 --> 01:14:37,192
are NP-complete, even when
you're not given a move limit.

1624
01:14:37,192 --> 01:14:38,150
So this is interesting.

1625
01:14:38,150 --> 01:14:40,470
And Bejeweled, the goal is
just to maximize your score.

1626
01:14:40,470 --> 01:14:42,886
You don't necessarily have a
limit on the number of moves,

1627
01:14:42,886 --> 01:14:45,030
unlike Candy Crush.

1628
01:14:45,030 --> 01:14:48,390
And also in some levels
candy Crush is like that.

1629
01:14:48,390 --> 01:14:51,402
So here it was very crucial
that we only had enough moves

1630
01:14:51,402 --> 01:14:52,610
to trigger all the variables.

1631
01:14:52,610 --> 01:14:55,352
We didn't want to be
able to do other things.

1632
01:14:55,352 --> 01:14:57,060
So here's a different
proof, and I'm just

1633
01:14:57,060 --> 01:15:01,237
going to give the high
level picture, basically.

1634
01:15:01,237 --> 01:15:03,070
This is cool, because
even just figuring out

1635
01:15:03,070 --> 01:15:07,900
whether you get this one
gem, this one candy is hard.

1636
01:15:07,900 --> 01:15:10,160
In order to do so,
you have to line up

1637
01:15:10,160 --> 01:15:13,570
all of these things
for each clause.

1638
01:15:13,570 --> 01:15:17,350
And here's the reduction
from exactly one of 3SAT.

1639
01:15:17,350 --> 01:15:19,980
So only if exactly
one of the variables

1640
01:15:19,980 --> 01:15:23,159
get set correctly does this
shift to the right level,

1641
01:15:23,159 --> 01:15:25,700
and only when all of these are
shifted to the right level can

1642
01:15:25,700 --> 01:15:28,607
you trigger this wire to go all
the way here and get that guy.

1643
01:15:28,607 --> 01:15:30,190
And it's the only
way to get that guy.

1644
01:15:30,190 --> 01:15:31,280
You can't do it directly.

1645
01:15:31,280 --> 01:15:33,750
It can only be triggered
from the left-hand side.

1646
01:15:33,750 --> 01:15:35,476
And there's also a
sequencer over here,

1647
01:15:35,476 --> 01:15:36,850
which forces all
of the variables

1648
01:15:36,850 --> 01:15:40,270
to get set before this happens.

1649
01:15:40,270 --> 01:15:43,220
So it's a little tricky,
because you don't want it to be,

1650
01:15:43,220 --> 01:15:45,990
you could say half of them,
and then trigger this,

1651
01:15:45,990 --> 01:15:48,720
and then things happen to
align in a cheating way.

1652
01:15:48,720 --> 01:15:51,770
The details are complicated,
but they actually

1653
01:15:51,770 --> 01:15:54,790
implemented their reduction.

1654
01:15:54,790 --> 01:15:56,370
So this is it.

1655
01:15:56,370 --> 01:16:01,790
Now, as it says here, there are
4,000 rows above and 2,000 rows

1656
01:16:01,790 --> 01:16:02,290
below.

1657
01:16:02,290 --> 01:16:04,970
So it's a large construction.

1658
01:16:04,970 --> 01:16:07,060
And this is for this formula.

1659
01:16:07,060 --> 01:16:10,910
[LAUGHTER]

1660
01:16:10,910 --> 01:16:13,940
I can clean it up a little
bit, remove the-- again,

1661
01:16:13,940 --> 01:16:16,210
there's a background
checkerboard pattern here.

1662
01:16:16,210 --> 01:16:21,230
So if I generate instance then
things are little bit cleaner.

1663
01:16:21,230 --> 01:16:23,700
And I think highlighted in red
are the moves you can make.

1664
01:16:23,700 --> 01:16:25,460
So here's the first variable.

1665
01:16:25,460 --> 01:16:28,290
You could either-- let's
do the simple one first--

1666
01:16:28,290 --> 01:16:33,250
move this guy with this one, and
then trigger, trigger, trigger.

1667
01:16:33,250 --> 01:16:35,710
All this happens without
you able to do anything.

1668
01:16:35,710 --> 01:16:39,170
And that will move
some stuff up top.

1669
01:16:39,170 --> 01:16:46,960
Or we can move this one
here, and then this is fun.

1670
01:16:46,960 --> 01:16:49,980
The variable goes
down and it just

1671
01:16:49,980 --> 01:16:54,080
keeps-- it goes down, basically,
to where the x1 bar is,

1672
01:16:54,080 --> 01:16:57,930
down here, and then it triggers
that guy, and maybe that guy

1673
01:16:57,930 --> 01:16:59,810
also.

1674
01:16:59,810 --> 01:17:01,063
And that one.

1675
01:17:01,063 --> 01:17:01,969
And--

1676
01:17:01,969 --> 01:17:05,170
[LAUGHTER]

1677
01:17:05,170 --> 01:17:07,470
Just lots of stuff happens.

1678
01:17:07,470 --> 01:17:09,320
Anyway, eventually
we'll get down to x2

1679
01:17:09,320 --> 01:17:12,140
and we'll be able to set
it one way or the other.

1680
01:17:12,140 --> 01:17:14,442
So the details are obviously
a little bit complicated,

1681
01:17:14,442 --> 01:17:15,900
but clearly they've
been explicitly

1682
01:17:15,900 --> 01:17:18,108
worked out because they can
even play the game, which

1683
01:17:18,108 --> 01:17:20,530
is pretty awesome.

1684
01:17:20,530 --> 01:17:22,990
Anyway, and they also
have the greatest URL,

1685
01:17:22,990 --> 01:17:24,642
candycrush.isnphard.com.

1686
01:17:24,642 --> 01:17:29,910
We should try to get other
things not as nphard.com.

1687
01:17:29,910 --> 01:17:31,620
That is Candy
Crush and Bejeweled

1688
01:17:31,620 --> 01:17:35,617
and all of its
friends are NP hard.

1689
01:17:35,617 --> 01:17:37,200
That's it, unless
there are questions.

1690
01:17:37,200 --> 01:17:40,010

1691
01:17:40,010 --> 01:17:44,450
So we've just started to
scratch the surface on the idea

1692
01:17:44,450 --> 01:17:47,020
that planar graphs are
hard, and next class we'll

1693
01:17:47,020 --> 01:17:49,450
see planar versions of
3SAT and one and 3SAT.

1694
01:17:49,450 --> 01:17:53,280
If we weren't using here, this
is using a non-planar thing.

1695
01:17:53,280 --> 01:17:55,990
So that helps with a lot
of proofs, especially

1696
01:17:55,990 --> 01:17:58,820
ones that happen in the plane.

1697
01:17:58,820 --> 01:18:00,840
So we've seen it with
planar circuit SAT.

1698
01:18:00,840 --> 01:18:03,940
But next we'll do planar and
3SAT, planar one and 3SAT,

1699
01:18:03,940 --> 01:18:05,940
planar not all equal SAT,
those kinds of things.

1700
01:18:05,940 --> 01:18:11,100
And again, be able to avoid
crossovers, which is nice.

1701
01:18:11,100 --> 01:18:12,650
Cool.

