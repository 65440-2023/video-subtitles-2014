1
0-1:59:36,500 --> 0-1:59:36,580

2
0-1:59:36,580 --> 0-1:59:39,079
NARRATOR: The following content
is provided under a Creative

3
0-1:59:39,079 --> 0-1:59:40,310
Commons license.

4
0-1:59:40,310 --> 0-1:59:42,560
Your support will help
MIT OpenCourseWare

5
0-1:59:42,560 --> 0-1:59:46,650
continue to offer high-quality
educational resources for free.

6
0-1:59:46,650 --> 0-1:59:49,190
To make a donation or to
view additional materials

7
0-1:59:49,190 --> 0-1:59:53,100
from hundreds of MIT courses,
visit MIT OpenCourseWare

8
0-1:59:53,100 --> 0-1:59:53,805
at ocw.mit.edu.

9
0-1:59:53,805 --> 00:00:02,565

10
00:00:02,565 --> 00:00:03,440
PROFESSOR: All right.

11
00:00:03,440 --> 00:00:06,160
You guys ready for
some more games?

12
00:00:06,160 --> 00:00:11,150
Today, we will finish off
two-player games in particular.

13
00:00:11,150 --> 00:00:15,440
So last time, we were in this
world of two-player games

14
00:00:15,440 --> 00:00:18,790
with a polynomial-bounded
number of moves.

15
00:00:18,790 --> 00:00:23,240
We proved that Othello
reversi is PSPACE complete.

16
00:00:23,240 --> 00:00:26,450
All these games live in PSPACE.

17
00:00:26,450 --> 00:00:31,500
And we ended with constraint
logic in the two-player case.

18
00:00:31,500 --> 00:00:33,060
We proved that's
PSPACE complete.

19
00:00:33,060 --> 00:00:35,520
I'll just show you
that again in a moment.

20
00:00:35,520 --> 00:00:37,720
And then, in the
rest of today, we'll

21
00:00:37,720 --> 00:00:40,220
talk about various other games
that don't fit in this table,

22
00:00:40,220 --> 00:00:44,010
but in particular two-player
and unbounded number of moves.

23
00:00:44,010 --> 00:00:46,950
So exponential number of
moves, where you get x time

24
00:00:46,950 --> 00:00:49,650
completeness for
constraint logic

25
00:00:49,650 --> 00:00:55,170
and for various practical games
like checkers, chess, and go.

26
00:00:55,170 --> 00:00:57,720
But I won't prove all of this.

27
00:00:57,720 --> 00:01:04,070
So this is bounded to
player constraint logic.

28
00:01:04,070 --> 00:01:07,660
Remember, we could
simulate these formulas,

29
00:01:07,660 --> 00:01:11,770
where here the setup was you
can only flip each edge once.

30
00:01:11,770 --> 00:01:14,320
And in particular,
players could take

31
00:01:14,320 --> 00:01:17,070
turns deciding whether
to-- white player

32
00:01:17,070 --> 00:01:19,790
can set variables to true
by flipping these edges.

33
00:01:19,790 --> 00:01:22,640
Black player can set variables
false by flipping those edges.

34
00:01:22,640 --> 00:01:25,480
Then, if the formula
satisfied, white wins.

35
00:01:25,480 --> 00:01:28,140
And that was hard and in
particular constraint logic

36
00:01:28,140 --> 00:01:30,910
could simulate that problem.

37
00:01:30,910 --> 00:01:34,950

38
00:01:34,950 --> 00:01:40,590
So what I want to show you
next is three real-life games

39
00:01:40,590 --> 00:01:43,860
that can be reduced from bounded
to player constraint logic.

40
00:01:43,860 --> 00:01:46,979
And for those, we'll need
two additional facts.

41
00:01:46,979 --> 00:01:49,520
One is that planar-bounded
two-player constraint

42
00:01:49,520 --> 00:01:52,710
logic is PSPACE complete
with this crossover gadget.

43
00:01:52,710 --> 00:01:57,620
We just need the addition
of a choice variable

44
00:01:57,620 --> 00:02:01,500
with three red edges,
two in, one out.

45
00:02:01,500 --> 00:02:03,300
This is what we will need.

46
00:02:03,300 --> 00:02:07,810
And also that we can
make protected ORs,

47
00:02:07,810 --> 00:02:10,120
an OR where you're guaranteed
at most one of these

48
00:02:10,120 --> 00:02:13,870
comes in by allowing an
additional gadget which

49
00:02:13,870 --> 00:02:15,030
is a free edge.

50
00:02:15,030 --> 00:02:17,620
So only one of our
constructions will use this.

51
00:02:17,620 --> 00:02:21,270
But in that setting,
we can make a free edge

52
00:02:21,270 --> 00:02:22,490
and we need the protected OR.

53
00:02:22,490 --> 00:02:24,380
So they go together well .

54
00:02:24,380 --> 00:02:28,820
And so this is review
from last class.

55
00:02:28,820 --> 00:02:32,080
So first real game
we're going to look at

56
00:02:32,080 --> 00:02:35,290
is called Amazons
from the late '80s

57
00:02:35,290 --> 00:02:38,750
but became popular in the
common material game theory

58
00:02:38,750 --> 00:02:42,060
world I think in the
mid-2000s, at least that's

59
00:02:42,060 --> 00:02:43,340
when I heard about it.

60
00:02:43,340 --> 00:02:46,820
So the usual game is played
on an 8x8 checkerboard--

61
00:02:46,820 --> 00:02:50,359
chessboard, I should say--
with four black queens and four

62
00:02:50,359 --> 00:02:50,900
white queens.

63
00:02:50,900 --> 00:02:52,320
Those are the Amazons.

64
00:02:52,320 --> 00:02:55,420
The Amazons, as you may
know, carry bows and arrows.

65
00:02:55,420 --> 00:03:01,510
So a move in this game is to
take a queen of your color,

66
00:03:01,510 --> 00:03:03,110
move it in a queen-like way.

67
00:03:03,110 --> 00:03:07,580
So in this example, we're moving
the clean up to this position.

68
00:03:07,580 --> 00:03:11,850
And then, you fire an arrow by
another queen move from there.

69
00:03:11,850 --> 00:03:15,210
So from here, we're
shooting an arrow

70
00:03:15,210 --> 00:03:18,830
to this position
diagonally visible.

71
00:03:18,830 --> 00:03:20,930
You're not allowed to
move through other players

72
00:03:20,930 --> 00:03:21,972
or through arrows.

73
00:03:21,972 --> 00:03:24,180
And you're not allowed to
shoot through other players

74
00:03:24,180 --> 00:03:25,550
or through arrows.

75
00:03:25,550 --> 00:03:29,294
So this the square
is destroyed forever.

76
00:03:29,294 --> 00:03:30,710
So this is clearly
a bounded game.

77
00:03:30,710 --> 00:03:32,540
Every move we destroy square.

78
00:03:32,540 --> 00:03:34,440
You have to do both
of those things,

79
00:03:34,440 --> 00:03:36,640
move between by
a non-zero amount

80
00:03:36,640 --> 00:03:39,260
and then shoot an arrow
somewhere other than yourself.

81
00:03:39,260 --> 00:03:43,030
You're never allowed to
land on a dead square.

82
00:03:43,030 --> 00:03:44,090
So a typical game.

83
00:03:44,090 --> 00:03:46,048
After you play it for a
while, it's really fun.

84
00:03:46,048 --> 00:03:46,880
You should try it.

85
00:03:46,880 --> 00:03:50,090
We'll end up the situation where
you've partitioned the queens

86
00:03:50,090 --> 00:03:52,550
into independent components.

87
00:03:52,550 --> 00:03:55,360
And so then, it's basically
a bunch of Hamiltonian cycle

88
00:03:55,360 --> 00:03:56,910
problems, or longest path.

89
00:03:56,910 --> 00:03:58,410
Now, these guys
have to walk around.

90
00:03:58,410 --> 00:04:00,560
It's a little bit weird, because
you can shoot not exactly where

91
00:04:00,560 --> 00:04:01,600
you're landing.

92
00:04:01,600 --> 00:04:03,590
But in particular, you could
shoot where you just came from.

93
00:04:03,590 --> 00:04:05,680
So if each of these
components-- usually they're

94
00:04:05,680 --> 00:04:08,090
Hamiltonian or have
a Hamiltonian path--

95
00:04:08,090 --> 00:04:10,060
and then with the queen moves.

96
00:04:10,060 --> 00:04:13,140
And then, you just
sum up the areas then,

97
00:04:13,140 --> 00:04:16,552
and whether white or black
has more area is the winner.

98
00:04:16,552 --> 00:04:19,010
Because in general, once you
can't move, you lose the game.

99
00:04:19,010 --> 00:04:22,100
The goal is to move last.

100
00:04:22,100 --> 00:04:24,620
So in general, your goal is
to partition up the space

101
00:04:24,620 --> 00:04:27,180
so you have more territory.

102
00:04:27,180 --> 00:04:31,840
So we're going to prove PSPACE
completeness of this game using

103
00:04:31,840 --> 00:04:33,720
bounded two-player
constraint logic.

104
00:04:33,720 --> 00:04:36,800

105
00:04:36,800 --> 00:04:43,770
So here's the basic gadgets, in
particular the idea of a wire.

106
00:04:43,770 --> 00:04:46,930
We're imagining this is an
upward traveling signal.

107
00:04:46,930 --> 00:04:50,510
And for it to travel
up-- think of this

108
00:04:50,510 --> 00:04:52,360
as an edge reversing
from downward

109
00:04:52,360 --> 00:04:55,020
pointing to upward pointing.

110
00:04:55,020 --> 00:05:00,670
If the A queen has to move
down and also shoot down,

111
00:05:00,670 --> 00:05:04,250
so leaving two black squares,
in that situation B can

112
00:05:04,250 --> 00:05:07,260
move down and shoot down one or
move down two and shoot up one,

113
00:05:07,260 --> 00:05:08,760
either way consume
these two squares

114
00:05:08,760 --> 00:05:11,170
but leave two for the next guy.

115
00:05:11,170 --> 00:05:12,600
This is a parity shift.

116
00:05:12,600 --> 00:05:15,890
It also works if this guy
moves down, shoots down,

117
00:05:15,890 --> 00:05:16,980
leaving these two squares.

118
00:05:16,980 --> 00:05:20,010
Then, B can move down and
shoot diagonally and so on.

119
00:05:20,010 --> 00:05:21,040
So that's our wire.

120
00:05:21,040 --> 00:05:22,498
That's how we're
going to propagate

121
00:05:22,498 --> 00:05:26,590
the signal, because we only
need single-use gadgets you

122
00:05:26,590 --> 00:05:29,110
can do a turn, A moves
down, shoots down.

123
00:05:29,110 --> 00:05:31,360
B moves down, shoots down.

124
00:05:31,360 --> 00:05:33,670
C moves over, shoots diagonally.

125
00:05:33,670 --> 00:05:38,460
D moves over, shoots
diagonally, and so on.

126
00:05:38,460 --> 00:05:40,920
Variable gadget,
so this is what we

127
00:05:40,920 --> 00:05:43,120
had on the bottom
of the construction.

128
00:05:43,120 --> 00:05:46,382
This is a white or black edge.

129
00:05:46,382 --> 00:05:48,715
And we'll never have to connect
black edges to anything,

130
00:05:48,715 --> 00:05:50,700
so they're just hanging out.

131
00:05:50,700 --> 00:05:53,930
Here, if black moves first
here and obliterates these two

132
00:05:53,930 --> 00:05:58,100
squares, this wire's dead.

133
00:05:58,100 --> 00:06:02,870
If white moves first then, the
white can activate the chain.

134
00:06:02,870 --> 00:06:06,015
So that's going to simulate
the usual setup, where

135
00:06:06,015 --> 00:06:08,390
white and black are taking
turns, setting their variables

136
00:06:08,390 --> 00:06:09,560
the way they want them.

137
00:06:09,560 --> 00:06:13,050
And then, if white can succeed
and satisfy the formula--

138
00:06:13,050 --> 00:06:14,780
we have to get to
AND and OR gadgets.

139
00:06:14,780 --> 00:06:19,040
But if white can succeed
and this guy can move down,

140
00:06:19,040 --> 00:06:25,490
then B can move to this place
and shoot here, and then

141
00:06:25,490 --> 00:06:27,850
move over here and shoot
into this giant room.

142
00:06:27,850 --> 00:06:32,490
And then, we'll spend
tons of moves in here.

143
00:06:32,490 --> 00:06:36,010
And then, come back here,
shoot there, back there,

144
00:06:36,010 --> 00:06:40,000
shoot there, ther, shoot there,
and get to the other room

145
00:06:40,000 --> 00:06:44,174
But if this guy does
not move down first,

146
00:06:44,174 --> 00:06:45,840
this guy-- whichever
way he goes-- he'll

147
00:06:45,840 --> 00:06:50,380
have to either destroy
the room he is walking to

148
00:06:50,380 --> 00:06:53,120
or destroy the other room
that he could have gone.

149
00:06:53,120 --> 00:06:55,530
So you only get
half of the points

150
00:06:55,530 --> 00:06:57,140
if this is not activated.

151
00:06:57,140 --> 00:06:58,890
And we're going to set
it up so that black

152
00:06:58,890 --> 00:07:02,000
has a bunch of other moves and
some other room that's already

153
00:07:02,000 --> 00:07:03,150
been cut off.

154
00:07:03,150 --> 00:07:05,850
And it will be roughly
equal to one of these rooms.

155
00:07:05,850 --> 00:07:10,310
And so only if you get
both of them do you win.

156
00:07:10,310 --> 00:07:12,730
And because we can't
control which way B goes,

157
00:07:12,730 --> 00:07:15,257
these two rooms have
to be the same size.

158
00:07:15,257 --> 00:07:17,840
So you happen to win by a factor
of 2 and the number of moves.

159
00:07:17,840 --> 00:07:23,480
But that's not essential to
the proof, just for symmetry.

160
00:07:23,480 --> 00:07:24,880
So those are the basic gadgets.

161
00:07:24,880 --> 00:07:31,730
Now, we have AND and OR
and SPLIT and CHOICE.

162
00:07:31,730 --> 00:07:34,290

163
00:07:34,290 --> 00:07:40,290
Usually, in NCL, we
think of AND and SPLIT

164
00:07:40,290 --> 00:07:42,020
as being the same thing.

165
00:07:42,020 --> 00:07:44,820
But in this setting, especially
in the bounded situation,

166
00:07:44,820 --> 00:07:46,340
they're really different.

167
00:07:46,340 --> 00:07:49,047
Remember, it corresponds
to whether initially

168
00:07:49,047 --> 00:07:51,630
the red things are pointing in
or the blue things are pointing

169
00:07:51,630 --> 00:07:54,730
in, red edges or the blue edge.

170
00:07:54,730 --> 00:07:57,920
And they behave quite
differently in this setting.

171
00:07:57,920 --> 00:08:00,890
So for the AND gate,
these are the two inputs.

172
00:08:00,890 --> 00:08:03,770
If both of them move out of
the way, then C can move here,

173
00:08:03,770 --> 00:08:04,880
shoot here.

174
00:08:04,880 --> 00:08:08,870
And D can move here
and shoot there.

175
00:08:08,870 --> 00:08:11,530
And if you only
move one of the two,

176
00:08:11,530 --> 00:08:12,700
you won't have enough room.

177
00:08:12,700 --> 00:08:13,324
AUDIENCE: Wait.

178
00:08:13,324 --> 00:08:14,095
Why?

179
00:08:14,095 --> 00:08:14,720
PROFESSOR: Why?

180
00:08:14,720 --> 00:08:17,650
If B moves out of the way,
C can move and shoot here.

181
00:08:17,650 --> 00:08:20,780
But D only has one one square.

182
00:08:20,780 --> 00:08:22,910
If A moves out if the
way, C can't move.

183
00:08:22,910 --> 00:08:27,090

184
00:08:27,090 --> 00:08:31,500
On the other hand, an OR
gadget, these are the two inputs

185
00:08:31,500 --> 00:08:32,950
and this is the output.

186
00:08:32,950 --> 00:08:35,210
If either one of these
moves, we sort of already

187
00:08:35,210 --> 00:08:35,880
have one square.

188
00:08:35,880 --> 00:08:38,070
We just need a second
square for C to shoot into.

189
00:08:38,070 --> 00:08:39,159
It could be here or here.

190
00:08:39,159 --> 00:08:41,575
As long as one of them moves
out of the way, we are happy.

191
00:08:41,575 --> 00:08:44,210

192
00:08:44,210 --> 00:08:50,580
As a CHOICE gadget, so this
is three blues coming in

193
00:08:50,580 --> 00:08:54,413
but the orientations
are different.

194
00:08:54,413 --> 00:09:01,310

195
00:09:01,310 --> 00:09:05,200
So a CHOICE is we have an input
coming up from the bottom.

196
00:09:05,200 --> 00:09:09,310
And we want to activate one
of the two but only one.

197
00:09:09,310 --> 00:09:11,330
So that corresponds
to A moving out

198
00:09:11,330 --> 00:09:13,410
of the way leaving two squares.

199
00:09:13,410 --> 00:09:16,520
Either B can take it and hit
those two squares or C can

200
00:09:16,520 --> 00:09:18,960
take it, but only one of them.

201
00:09:18,960 --> 00:09:20,734
So the same gadget does both.

202
00:09:20,734 --> 00:09:22,150
That makes sense
because we're not

203
00:09:22,150 --> 00:09:26,270
really distinguishing between
red and blue very much here.

204
00:09:26,270 --> 00:09:29,274
SPLIT is a little bit trickier.

205
00:09:29,274 --> 00:09:30,190
Let's walk through it.

206
00:09:30,190 --> 00:09:32,340
A moves down.

207
00:09:32,340 --> 00:09:35,800
B moves over and shoots here.

208
00:09:35,800 --> 00:09:40,840
Then, C can move down
here and shoot here.

209
00:09:40,840 --> 00:09:47,460
And then, D can move over
here and shoot there.

210
00:09:47,460 --> 00:09:50,300
Using our queen
moves, so that leaves

211
00:09:50,300 --> 00:09:52,980
these four spaces unoccupied.

212
00:09:52,980 --> 00:09:55,580
Now, E can move down
here and shoot there.

213
00:09:55,580 --> 00:09:57,110
F can move here and shoot there.

214
00:09:57,110 --> 00:09:58,640
And now, we've got
the four squares

215
00:09:58,640 --> 00:10:03,460
necessary to trigger
both H and G.

216
00:10:03,460 --> 00:10:04,960
So that's a SPLIT.

217
00:10:04,960 --> 00:10:07,560
And that is Amazons.

218
00:10:07,560 --> 00:10:09,864
Therefore Amazons
is PSPACE complete.

219
00:10:09,864 --> 00:10:10,690
Done.

220
00:10:10,690 --> 00:10:11,411
Question.

221
00:10:11,411 --> 00:10:13,104
AUDIENCE: What is
CHOICE needed for?

222
00:10:13,104 --> 00:10:15,270
PROFESSOR: CHOICE is needed
for the crossover gadget

223
00:10:15,270 --> 00:10:17,410
in particular.

224
00:10:17,410 --> 00:10:19,752
Next game we'll look
at-- these proofs

225
00:10:19,752 --> 00:10:21,210
are going to start
to look similar.

226
00:10:21,210 --> 00:10:23,168
But I think it's helpful
to see a few examples.

227
00:10:23,168 --> 00:10:24,040
This is Konane.

228
00:10:24,040 --> 00:10:27,230
It's a very old game-- we
don't know how old-- invented

229
00:10:27,230 --> 00:10:29,470
by Hawaiian Polynesians.

230
00:10:29,470 --> 00:10:34,810
First documented in
1778 by Captain Cook.

231
00:10:34,810 --> 00:10:38,676
And this was a
world championship.

232
00:10:38,676 --> 00:10:39,175
No.

233
00:10:39,175 --> 00:10:42,120
This is a regional
championship in 2005

234
00:10:42,120 --> 00:10:43,850
that I probably lost at.

235
00:10:43,850 --> 00:10:48,440
But we like to play
it with go stones.

236
00:10:48,440 --> 00:10:50,090
That's not the
original formulation.

237
00:10:50,090 --> 00:10:52,860
But you have two colors of
stones on a square grid.

238
00:10:52,860 --> 00:10:58,550
And it's something like peg
solitaire, but with two colors.

239
00:10:58,550 --> 00:11:01,777
So let me maybe show
you a bigger image.

240
00:11:01,777 --> 00:11:03,360
The type of move you
can do, if you're

241
00:11:03,360 --> 00:11:07,560
white you can jump over a
sequence of black stones.

242
00:11:07,560 --> 00:11:09,170
You can only jump
over one at a time.

243
00:11:09,170 --> 00:11:11,937
So if I had two in a row, you
wouldn't be able to jump it.

244
00:11:11,937 --> 00:11:14,270
And furthermore, you're not
allowed to change directions

245
00:11:14,270 --> 00:11:15,080
in a single move.

246
00:11:15,080 --> 00:11:16,630
In a single move,
I could jump over

247
00:11:16,630 --> 00:11:21,820
any chain of black blank
blank blank things.

248
00:11:21,820 --> 00:11:22,900
And they are removed.

249
00:11:22,900 --> 00:11:24,580
I captured them.

250
00:11:24,580 --> 00:11:27,110
And it has to be
in a straight line.

251
00:11:27,110 --> 00:11:29,890
So that's the rules.

252
00:11:29,890 --> 00:11:32,370
And of course, every move
I make I capture somebody,

253
00:11:32,370 --> 00:11:36,260
so it's a polynomial-bounded
number of moves.

254
00:11:36,260 --> 00:11:40,420
This is the general
idea for a wire

255
00:11:40,420 --> 00:11:45,180
is that with white will be
doing most of the action here.

256
00:11:45,180 --> 00:11:48,080
And so white will
be jumping here.

257
00:11:48,080 --> 00:11:50,340
At this point, I have
to change directions.

258
00:11:50,340 --> 00:11:54,390
But luckily after I
obliterate those two pieces,

259
00:11:54,390 --> 00:11:57,220
black can't do anything to me.

260
00:11:57,220 --> 00:11:59,380
I'm safe between these
two black squares.

261
00:11:59,380 --> 00:12:02,090
So black will do something
else, and then white

262
00:12:02,090 --> 00:12:04,880
is free to start jumping in
the direction they want to.

263
00:12:04,880 --> 00:12:07,630

264
00:12:07,630 --> 00:12:09,330
That will be critical.

265
00:12:09,330 --> 00:12:11,780
Here is a variable
where if black moves

266
00:12:11,780 --> 00:12:14,730
first in this scenario, it
can capture the white thing

267
00:12:14,730 --> 00:12:16,600
and prevent it from
activating this wire.

268
00:12:16,600 --> 00:12:19,630
If white moves first, they
can activate the wire.

269
00:12:19,630 --> 00:12:23,070
So whoever goes there
first sets the variable.

270
00:12:23,070 --> 00:12:25,370
AUDIENCE: What's the start
configuration for this game?

271
00:12:25,370 --> 00:12:26,870
PROFESSOR: Oh, in
the original game,

272
00:12:26,870 --> 00:12:30,480
the whole board is filled
where the color of your pieces

273
00:12:30,480 --> 00:12:32,610
equal the color of the
square of the checkerboard,

274
00:12:32,610 --> 00:12:36,150
except for the center
two places are blank.

275
00:12:36,150 --> 00:12:38,990
But we're not considering
it from the actual initial

276
00:12:38,990 --> 00:12:39,620
configuration.

277
00:12:39,620 --> 00:12:42,690
We're considering it from a
half-played configuration.

278
00:12:42,690 --> 00:12:44,590
Because the original
configuration,

279
00:12:44,590 --> 00:12:47,270
the answer is the function
of the board size.

280
00:12:47,270 --> 00:12:49,560
And that's not
enough information

281
00:12:49,560 --> 00:12:51,560
to be interesting from
a complexity standpoint.

282
00:12:51,560 --> 00:12:51,730
Yeah?

283
00:12:51,730 --> 00:12:53,146
AUDIENCE: Do you
have any problems

284
00:12:53,146 --> 00:12:55,842
that have significant
hardness results for sort

285
00:12:55,842 --> 00:12:58,407
of the standard start
but generalized?

286
00:12:58,407 --> 00:12:58,990
PROFESSOR: No.

287
00:12:58,990 --> 00:13:00,660
In general, none
of those problems

288
00:13:00,660 --> 00:13:04,870
can be hard in the sense that
we want, because they're sparse.

289
00:13:04,870 --> 00:13:08,100
They have very few
inputs of a given size,

290
00:13:08,100 --> 00:13:09,800
so there is no such result.

291
00:13:09,800 --> 00:13:12,380
Unless you have a
variable initial setup,

292
00:13:12,380 --> 00:13:14,900
like maybe games where
you-- what do you

293
00:13:14,900 --> 00:13:17,069
call it-- draft your
deck in the beginning.

294
00:13:17,069 --> 00:13:19,360
I mean, if you consider that
part of the initial setup,

295
00:13:19,360 --> 00:13:21,340
then that could be
much more interesting.

296
00:13:21,340 --> 00:13:24,600

297
00:13:24,600 --> 00:13:25,370
Right.

298
00:13:25,370 --> 00:13:27,090
Haven't done the
OR and the CHOICE.

299
00:13:27,090 --> 00:13:32,370
So again if we--
let's do the OR.

300
00:13:32,370 --> 00:13:34,867
If we are activating from
here, we can just keep going.

301
00:13:34,867 --> 00:13:36,950
It'd be bad to stop here,
because then black could

302
00:13:36,950 --> 00:13:38,060
capture us.

303
00:13:38,060 --> 00:13:39,309
But we can go straight.

304
00:13:39,309 --> 00:13:41,350
On the other hand, if we
come from this position,

305
00:13:41,350 --> 00:13:43,310
we killed those two
guys who were safe

306
00:13:43,310 --> 00:13:45,920
and then we can go up.

307
00:13:45,920 --> 00:13:50,880
And a CHOICE gadget would
be coming-- the input

308
00:13:50,880 --> 00:13:52,620
for a CHOICE would be here.

309
00:13:52,620 --> 00:13:54,620
So you can jump here and
then you have a choice

310
00:13:54,620 --> 00:13:56,660
whether to go up or down.

311
00:13:56,660 --> 00:14:01,200
So again, same gadget
does OR and CHOICE.

312
00:14:01,200 --> 00:14:03,330
And here's one gadget
that does AND, SPLIT,

313
00:14:03,330 --> 00:14:07,960
and a SHIFT, which is convenient
for various ways to use it.

314
00:14:07,960 --> 00:14:10,170
But what if what
it really does is

315
00:14:10,170 --> 00:14:13,410
there's two traversal
paths, input 1 to output 1

316
00:14:13,410 --> 00:14:15,160
and input 2 to output 2.

317
00:14:15,160 --> 00:14:17,480
And they have to
happen in that order.

318
00:14:17,480 --> 00:14:21,917
If you try to activate path
2, you have to stop here.

319
00:14:21,917 --> 00:14:23,750
I mean, I guess you
could jump here and then

320
00:14:23,750 --> 00:14:25,000
be captured that way.

321
00:14:25,000 --> 00:14:27,900
If you stop here, you'll
be captured by that guy.

322
00:14:27,900 --> 00:14:29,460
So that's bad news.

323
00:14:29,460 --> 00:14:33,020
But if we first do the input
1 traversal-- this is safe--

324
00:14:33,020 --> 00:14:36,760
and then go to the output
traversal, this guy's gone.

325
00:14:36,760 --> 00:14:39,590
And so then we can
do input 2, pause,

326
00:14:39,590 --> 00:14:41,960
and then go up to output 2.

327
00:14:41,960 --> 00:14:46,070
So that's what the
gadget does by itself.

328
00:14:46,070 --> 00:14:50,440
If we ignore what
happens out here,

329
00:14:50,440 --> 00:14:53,740
then we can think of
this as an AND gate,

330
00:14:53,740 --> 00:14:58,350
where first this input has
to come in, kill that guy,

331
00:14:58,350 --> 00:15:02,970
and then go off Neverneverland.

332
00:15:02,970 --> 00:15:05,140
And then, if the
second input comes in,

333
00:15:05,140 --> 00:15:06,380
then we activate the output.

334
00:15:06,380 --> 00:15:08,340
So that would be the
output of the AND gate.

335
00:15:08,340 --> 00:15:09,890
That's garbage.

336
00:15:09,890 --> 00:15:11,640
And these are the two inputs.

337
00:15:11,640 --> 00:15:13,910
Now, there is an issue of
you have to make this one

338
00:15:13,910 --> 00:15:15,380
trigger before this one.

339
00:15:15,380 --> 00:15:18,050
But in all these setups,
we have these posits

340
00:15:18,050 --> 00:15:20,580
where the piece can wait.

341
00:15:20,580 --> 00:15:23,490
So if we have a turn gadget
right before the input,

342
00:15:23,490 --> 00:15:26,125
it can just sit there and wait
for the other input to the AND

343
00:15:26,125 --> 00:15:27,350
to activate.

344
00:15:27,350 --> 00:15:30,050
And then, this one can go ahead
and activate the second one.

345
00:15:30,050 --> 00:15:33,540
So we're very
flexible on timing.

346
00:15:33,540 --> 00:15:37,060
So we can make input 1 go
before input 2 for AND.

347
00:15:37,060 --> 00:15:43,100
For a SPLIT, we can just have
a white token sitting here

348
00:15:43,100 --> 00:15:46,630
ready to go in that's
in a safe position.

349
00:15:46,630 --> 00:15:49,709
And then, once this input
comes in, it gets output there.

350
00:15:49,709 --> 00:15:51,500
Then, this one can
trigger an output there.

351
00:15:51,500 --> 00:15:54,310
So we get both of the
outputs for one input.

352
00:15:54,310 --> 00:15:58,030
And for a SHIFT, we do
both of these things.

353
00:15:58,030 --> 00:15:59,570
We treat this is garbage.

354
00:15:59,570 --> 00:16:02,250
And we have a safe
white token here.

355
00:16:02,250 --> 00:16:04,670
So if this comes in,
then that can go out.

356
00:16:04,670 --> 00:16:05,960
So we end up shifting by one.

357
00:16:05,960 --> 00:16:09,370
And that fixes
any parity issues.

358
00:16:09,370 --> 00:16:10,740
Cool.

359
00:16:10,740 --> 00:16:13,700
So that's Konane
PSPACE complete.

360
00:16:13,700 --> 00:16:21,860
AUDIENCE: How do you guarantee
that black doesn't screw you?

361
00:16:21,860 --> 00:16:24,900
PROFESSOR: By checking
all the cases.

362
00:16:24,900 --> 00:16:27,910
In general, I mean,
there's a question

363
00:16:27,910 --> 00:16:31,560
of what black is doing.

364
00:16:31,560 --> 00:16:33,070
Basically, within
all these gadgets,

365
00:16:33,070 --> 00:16:35,520
we're preventing black
from doing anything.

366
00:16:35,520 --> 00:16:39,657
So the main place where we care
about black's motion is here.

367
00:16:39,657 --> 00:16:41,990
So there's going to be an
initial phase where everyone's

368
00:16:41,990 --> 00:16:42,740
setting variables.

369
00:16:42,740 --> 00:16:43,730
We're taking turns.

370
00:16:43,730 --> 00:16:45,069
And white's going
to set half of them.

371
00:16:45,069 --> 00:16:46,485
Black's going to
set half of them.

372
00:16:46,485 --> 00:16:49,480
Their black is screwing you,
but in a controlled fashion.

373
00:16:49,480 --> 00:16:53,220
After that, there's going
to be a pile of extra moves

374
00:16:53,220 --> 00:16:54,619
that black can just do.

375
00:16:54,619 --> 00:16:57,490
And black will always be forced
to do those extra useless

376
00:16:57,490 --> 00:16:59,800
moves.

377
00:16:59,800 --> 00:17:02,160
If we happen to satisfy
the final output

378
00:17:02,160 --> 00:17:04,839
to the overall thing,
then white will

379
00:17:04,839 --> 00:17:07,754
have a zillion free moves
and then white will win.

380
00:17:07,754 --> 00:17:08,420
That's the idea.

381
00:17:08,420 --> 00:17:12,140
But within these
gadgets, as long

382
00:17:12,140 --> 00:17:14,095
as we don't do
something intelligent

383
00:17:14,095 --> 00:17:16,220
like going here and then
getting captured by black,

384
00:17:16,220 --> 00:17:18,620
and therefore destroying
the whole construction.

385
00:17:18,620 --> 00:17:21,850
Then, white will lose, probably.

386
00:17:21,850 --> 00:17:24,310
We're always careful to go
to positions that are safe.

387
00:17:24,310 --> 00:17:27,200
Black cannot jump
us if we're there.

388
00:17:27,200 --> 00:17:29,110
So by checking all
those cases, you

389
00:17:29,110 --> 00:17:31,970
can guarantee black
doesn't hurt you.

390
00:17:31,970 --> 00:17:34,690
I didn't mention what's
black doing when we're not

391
00:17:34,690 --> 00:17:37,230
allowing it to play at all.

392
00:17:37,230 --> 00:17:37,730
Cool.

393
00:17:37,730 --> 00:17:40,240
So that's Konane.

394
00:17:40,240 --> 00:17:42,580
Next, is a game
called Cross Purposes.

395
00:17:42,580 --> 00:17:45,040
This is a fairly new
game by Michael Albert

396
00:17:45,040 --> 00:17:49,320
who's a fun guy in the common
material game theory scene.

397
00:17:49,320 --> 00:17:53,800
So again we're going
to play with go stones,

398
00:17:53,800 --> 00:17:56,230
but what you should imagine
is that black stones

399
00:17:56,230 --> 00:17:59,210
are towers of two blocks.

400
00:17:59,210 --> 00:18:01,860
And then, you can
push them over.

401
00:18:01,860 --> 00:18:04,600
So in this case, we took
this tower, pushed it up,

402
00:18:04,600 --> 00:18:07,506
and so it occupied
those two spots.

403
00:18:07,506 --> 00:18:09,380
But once it's pushed
over, it's kind of dead.

404
00:18:09,380 --> 00:18:11,150
So we draw it in white.

405
00:18:11,150 --> 00:18:14,120
And then, for example, we could
take this tower pop it over

406
00:18:14,120 --> 00:18:16,290
to the right and get those two.

407
00:18:16,290 --> 00:18:19,570
Now, to make this a fun
two-player game-- this

408
00:18:19,570 --> 00:18:22,215
would be a natural
enough solitaire game.

409
00:18:22,215 --> 00:18:23,590
But to make it a
two-player game,

410
00:18:23,590 --> 00:18:26,131
we're going to have two players,
one called horizontal, which

411
00:18:26,131 --> 00:18:30,560
can only do this type of
move, and another player

412
00:18:30,560 --> 00:18:34,450
called vertical, which can
only do this type of move.

413
00:18:34,450 --> 00:18:38,900
So what's fun here is that
it's the same black pieces used

414
00:18:38,900 --> 00:18:40,810
by both players.

415
00:18:40,810 --> 00:18:42,870
But one of them can
tip them left to right.

416
00:18:42,870 --> 00:18:46,060
And the other can
tip them up or down.

417
00:18:46,060 --> 00:18:48,520
But again it's bounded, because
once you top over a tower

418
00:18:48,520 --> 00:18:49,110
it's dead.

419
00:18:49,110 --> 00:18:51,870
So this is going to be
PSPACE complete by reduction

420
00:18:51,870 --> 00:18:55,200
from bounded two-player
constraint logic.

421
00:18:55,200 --> 00:18:56,900
So some-- question.

422
00:18:56,900 --> 00:18:58,715
AUDIENCE: What's the
goal of the game?

423
00:18:58,715 --> 00:19:00,720
PROFESSOR: The goal the
game is to move last.

424
00:19:00,720 --> 00:19:03,010
If you can't move, you lose.

425
00:19:03,010 --> 00:19:04,560
And that can be asymmetric.

426
00:19:04,560 --> 00:19:08,195
Some pieces are only going
to be flippable up or down.

427
00:19:08,195 --> 00:19:09,570
A lot of games
have that feature.

428
00:19:09,570 --> 00:19:12,640
It's called normal play,
in fact, it's so common.

429
00:19:12,640 --> 00:19:14,530
That the last
player to move wins.

430
00:19:14,530 --> 00:19:17,230
So a wire is going to
look something like this.

431
00:19:17,230 --> 00:19:20,246
In general, I think vertical
is the player that we're

432
00:19:20,246 --> 00:19:21,870
rooting for, and
we're trying to decide

433
00:19:21,870 --> 00:19:23,990
whether vertical can win.

434
00:19:23,990 --> 00:19:25,932
And we're going to
set up horizontal--

435
00:19:25,932 --> 00:19:28,390
unlike the previous game--
we're going to set up horizontal

436
00:19:28,390 --> 00:19:31,970
in a position that it never
has any moves except the one

437
00:19:31,970 --> 00:19:33,780
that you give it right then.

438
00:19:33,780 --> 00:19:36,820
So the idea is that as
soon as we move A down,

439
00:19:36,820 --> 00:19:41,030
then horizontal has a
move, namely the playing B.

440
00:19:41,030 --> 00:19:42,530
And then, we have
a move and so on.

441
00:19:42,530 --> 00:19:44,350
So that will trigger.

442
00:19:44,350 --> 00:19:46,440
That better not
stop at any point.

443
00:19:46,440 --> 00:19:49,750
We always want to set it up so
when we're switching gadgets,

444
00:19:49,750 --> 00:19:52,940
it's our turn to move,
because the horizontal player

445
00:19:52,940 --> 00:19:56,065
will never have
another move to make.

446
00:19:56,065 --> 00:19:57,440
This is what it
looks like after.

447
00:19:57,440 --> 00:19:58,856
I mean, things are
just filling in

448
00:19:58,856 --> 00:20:00,890
if you've partially
filled in this thing.

449
00:20:00,890 --> 00:20:03,240
Here's how we make a variable.

450
00:20:03,240 --> 00:20:05,280
So here in the initial
phase of the game,

451
00:20:05,280 --> 00:20:06,550
horizontal will have moves.

452
00:20:06,550 --> 00:20:09,040
Horizontal could play this,
filling those two squares,

453
00:20:09,040 --> 00:20:12,800
preventing us from
playing this wire.

454
00:20:12,800 --> 00:20:15,890
So whoever goes here first
will claim the thing.

455
00:20:15,890 --> 00:20:19,555
And if it's vertical, then
it triggers the true value.

456
00:20:19,555 --> 00:20:22,400

457
00:20:22,400 --> 00:20:24,125
We can also terminate
a wire like this.

458
00:20:24,125 --> 00:20:25,530
This is always good for us.

459
00:20:25,530 --> 00:20:29,820
We can just trigger it
whenever we want as vertical.

460
00:20:29,820 --> 00:20:33,310
So we need that for
free edges, which

461
00:20:33,310 --> 00:20:37,430
we need for the protected OR.

462
00:20:37,430 --> 00:20:43,390
So to clarify or to fix what I
said before, for the initial n

463
00:20:43,390 --> 00:20:45,750
moves, horizontal
and vertical are

464
00:20:45,750 --> 00:20:49,940
going to exchange variables,
take turns picking them.

465
00:20:49,940 --> 00:20:52,430
At that point onwards,
horizontal has no moves

466
00:20:52,430 --> 00:20:54,830
except the one
right after-- we're

467
00:20:54,830 --> 00:20:57,900
forcing horizontal to
always play the way we want.

468
00:20:57,900 --> 00:21:01,220
So after this is done, then
as soon as you move this,

469
00:21:01,220 --> 00:21:02,700
then horizontal
has a unique move.

470
00:21:02,700 --> 00:21:04,400
So it will cooperate.

471
00:21:04,400 --> 00:21:08,700
Horizontal has to cooperate
with us to fill in wires.

472
00:21:08,700 --> 00:21:12,910
So here is a protected OR.

473
00:21:12,910 --> 00:21:15,915
So if we trigger this, then this
triggers, then this triggers,

474
00:21:15,915 --> 00:21:18,870
then this triggers, then
that triggers, and so on.

475
00:21:18,870 --> 00:21:20,720
So that's all good.

476
00:21:20,720 --> 00:21:28,090
The reason it's a
protected OR-- the trouble

477
00:21:28,090 --> 00:21:32,390
if we activated this twice, so
first we activate through here,

478
00:21:32,390 --> 00:21:34,940
and then we activate
here, and then here.

479
00:21:34,940 --> 00:21:37,480
And then, as vertical,
we move B down.

480
00:21:37,480 --> 00:21:39,385
Now, horizontal has no move.

481
00:21:39,385 --> 00:21:43,850
So that would be bad
news, if we sort of waste

482
00:21:43,850 --> 00:21:46,172
a trigger like that.

483
00:21:46,172 --> 00:21:47,880
And so that's why we
need a protected OR,

484
00:21:47,880 --> 00:21:52,180
where only at most one of
the two sides will trigger.

485
00:21:52,180 --> 00:21:54,514
CHOICE gadget is the same,
but rotated 90 degrees.

486
00:21:54,514 --> 00:21:57,180
And that makes a big difference,
because horizontal and vertical

487
00:21:57,180 --> 00:21:58,240
are flipped.

488
00:21:58,240 --> 00:22:03,620
So input is here.

489
00:22:03,620 --> 00:22:07,290
So if we trigger this, and
then this, and then this,

490
00:22:07,290 --> 00:22:08,340
and then this.

491
00:22:08,340 --> 00:22:10,339
Then, as vertical,
we get to choose

492
00:22:10,339 --> 00:22:12,380
whether this one activates
or this one activates.

493
00:22:12,380 --> 00:22:14,296
So it's important to
make it the right player.

494
00:22:14,296 --> 00:22:17,610

495
00:22:17,610 --> 00:22:22,540
And here's the omega gadget
that does AND, SPLIT, and SHIFT.

496
00:22:22,540 --> 00:22:28,340
If we try to activate
input 2, these topple over.

497
00:22:28,340 --> 00:22:30,270
This topples down.

498
00:22:30,270 --> 00:22:32,520
And now, horizontal
gets a choice.

499
00:22:32,520 --> 00:22:34,760
And horizontal's going
to be mean and push B

500
00:22:34,760 --> 00:22:38,441
over and prevent this thing
from activating, because it

501
00:22:38,441 --> 00:22:40,690
wants to prevent you from
doing whatever you're doing.

502
00:22:40,690 --> 00:22:42,773
Because eventually, you're
going to get to a place

503
00:22:42,773 --> 00:22:45,830
where you win, where
you have a single move

504
00:22:45,830 --> 00:22:49,580
and then horizontal
doesn't have a move.

505
00:22:49,580 --> 00:22:52,600
So that's in horizontal's
interest to block you.

506
00:22:52,600 --> 00:22:54,750
But if you first did
all of these toppling,

507
00:22:54,750 --> 00:22:59,890
topple this down, over down,
over down, over down, over.

508
00:22:59,890 --> 00:23:02,090
Then, in particular, you
put a white token here

509
00:23:02,090 --> 00:23:04,130
and so B won't be
able to do that.

510
00:23:04,130 --> 00:23:07,340
So when you activate these
guys, D will have to go over

511
00:23:07,340 --> 00:23:10,160
and out you go.

512
00:23:10,160 --> 00:23:12,910
So and then, it's the
same thing either putting

513
00:23:12,910 --> 00:23:18,190
a free wire in input 2 and/or
ignoring the output from output

514
00:23:18,190 --> 00:23:20,420
1, we get AND, SPLIT, and SHIFT.

515
00:23:20,420 --> 00:23:23,310

516
00:23:23,310 --> 00:23:26,461
And I think that's it
for Cross Purposes.

517
00:23:26,461 --> 00:23:26,960
Question.

518
00:23:26,960 --> 00:23:28,460
AUDIENCE: I probably
misinterpreted.

519
00:23:28,460 --> 00:23:29,900
Did you show TURN gadget?

520
00:23:29,900 --> 00:23:34,394
PROFESSOR: I maybe did
not show a TURN gadget.

521
00:23:34,394 --> 00:23:35,310
There's a TURN gadget.

522
00:23:35,310 --> 00:23:35,810
Good.

523
00:23:35,810 --> 00:23:37,200
I didn't talk about it.

524
00:23:37,200 --> 00:23:39,240
It works in the obvious way.

525
00:23:39,240 --> 00:23:41,440
But, yeah, it is
definitely a little tricky

526
00:23:41,440 --> 00:23:42,800
to make sure you can do it.

527
00:23:42,800 --> 00:23:44,120
But it works.

528
00:23:44,120 --> 00:23:47,344
AUDIENCE: Back to the
normal play condition,

529
00:23:47,344 --> 00:23:49,860
are these games different
from the misère

530
00:23:49,860 --> 00:23:54,270
version of the rule set?

531
00:23:54,270 --> 00:23:56,370
PROFESSOR: In
general, those games

532
00:23:56,370 --> 00:24:02,060
are different when, if you
can't move, then you win.

533
00:24:02,060 --> 00:24:04,460
But from a PSPACE
completeness perspective,

534
00:24:04,460 --> 00:24:05,380
it should be the same.

535
00:24:05,380 --> 00:24:07,920
It's really whether you are
starting the quantifying

536
00:24:07,920 --> 00:24:10,080
sequence with an
exists or a for all.

537
00:24:10,080 --> 00:24:12,240
And both end up with
the class PSPACE.

538
00:24:12,240 --> 00:24:15,140
So there may be a
way to distinguish.

539
00:24:15,140 --> 00:24:20,272
But at our level of granularity,
we're not distinguishing.

540
00:24:20,272 --> 00:24:21,236
Yeah.

541
00:24:21,236 --> 00:24:23,164
AUDIENCE: Do you know
whether it's PSPACE

542
00:24:23,164 --> 00:24:29,430
complete for arbitrary setups
with only black starting

543
00:24:29,430 --> 00:24:30,410
tokens?

544
00:24:30,410 --> 00:24:31,130
PROFESSOR: Oh.

545
00:24:31,130 --> 00:24:31,630
I see.

546
00:24:31,630 --> 00:24:32,172
No obstacles.

547
00:24:32,172 --> 00:24:34,046
AUDIENCE: It's a more
natural starting place,

548
00:24:34,046 --> 00:24:35,090
than starting with a--

549
00:24:35,090 --> 00:24:35,756
PROFESSOR: Yeah.

550
00:24:35,756 --> 00:24:37,230
That's definitely not known.

551
00:24:37,230 --> 00:24:41,200
I think it would be cool to
think about only black tokens,

552
00:24:41,200 --> 00:24:42,180
no initial whites.

553
00:24:42,180 --> 00:24:44,810

554
00:24:44,810 --> 00:24:46,330
All right.

555
00:24:46,330 --> 00:24:50,440
So that's all I want
to say about PSPACE.

556
00:24:50,440 --> 00:24:52,060
I think we're done with PSPACE.

557
00:24:52,060 --> 00:24:56,370
We first did PSPACE here,
then PSPACE here last class,

558
00:24:56,370 --> 00:24:58,730
and then PSPACE here.

559
00:24:58,730 --> 00:25:02,090
So now we're going to move
up to EXPTIME, 2 players,

560
00:25:02,090 --> 00:25:03,990
unbounded number of moves.

561
00:25:03,990 --> 00:25:06,535
EXPTIME turns out to
be the right class.

562
00:25:06,535 --> 00:25:09,810

563
00:25:09,810 --> 00:25:10,733
Oh.

564
00:25:10,733 --> 00:25:11,233
I lied.

565
00:25:11,233 --> 00:25:13,784

566
00:25:13,784 --> 00:25:17,780
I have one more PSPACE class,
which I don't have slides for.

567
00:25:17,780 --> 00:25:21,680

568
00:25:21,680 --> 00:25:25,180
This is a short topic,
but it's a cool one,

569
00:25:25,180 --> 00:25:29,120
I think something that
deserves more study.

570
00:25:29,120 --> 00:25:32,660
But at the moment there
are no natural games

571
00:25:32,660 --> 00:25:34,320
like real-life
games that have been

572
00:25:34,320 --> 00:25:38,760
shown to fall into this class
or to be complete in this class.

573
00:25:38,760 --> 00:25:40,550
So this is stochastic games.

574
00:25:40,550 --> 00:25:44,720
The idea is you're playing
against a random opponent.

575
00:25:44,720 --> 00:25:52,780
So you have two players, and
one of the players is random.

576
00:25:52,780 --> 00:25:55,090
So it's hard to identify
with randomness.

577
00:25:55,090 --> 00:25:56,740
So the other player is you.

578
00:25:56,740 --> 00:25:58,850
Your goal is to win the game.

579
00:25:58,850 --> 00:26:01,930
And you know that your player's
just flipping a coin every time

580
00:26:01,930 --> 00:26:03,630
and playing randomly,
say uniformly

581
00:26:03,630 --> 00:26:08,470
or some distribution
that's known to you.

582
00:26:08,470 --> 00:26:12,550
Think of games where you're
rolling dice, or drawing cards,

583
00:26:12,550 --> 00:26:15,290
or there's some random
aspect to the game.

584
00:26:15,290 --> 00:26:17,410
How hard are these games?

585
00:26:17,410 --> 00:26:21,200
Well, what's been studied--
this is a Papadimitriou paper--

586
00:26:21,200 --> 00:26:25,370
is for bounded two-player
stochastic games.

587
00:26:25,370 --> 00:26:26,570
The answer is PSPACE again.

588
00:26:26,570 --> 00:26:32,460

589
00:26:32,460 --> 00:26:38,660
So, for example, here's a game,
a formula game, stochastic SAT.

590
00:26:38,660 --> 00:26:40,820
We want to know is
there a move such

591
00:26:40,820 --> 00:26:44,290
that for a randomly chosen
move-- I like this notation.

592
00:26:44,290 --> 00:26:46,030
We have exist and for all.

593
00:26:46,030 --> 00:26:49,670
Backwards R is a
random quantifier.

594
00:26:49,670 --> 00:26:53,710
There exists an x3
such that a random x4,

595
00:26:53,710 --> 00:26:59,080
so this is uniform random over
0 and 1, the binary choice 01.

596
00:26:59,080 --> 00:27:02,700
We want the probability--
this gives a distribution.

597
00:27:02,700 --> 00:27:04,950
We want the probability of
the formula being satisfied

598
00:27:04,950 --> 00:27:06,514
being greater than a half.

599
00:27:06,514 --> 00:27:09,180
I'm guessing you could pump that
up to be with high probability.

600
00:27:09,180 --> 00:27:12,140
But just deciding
whether you could

601
00:27:12,140 --> 00:27:16,860
win by probability strictly more
than half, is PSPACE complete.

602
00:27:16,860 --> 00:27:19,460

603
00:27:19,460 --> 00:27:20,705
So this is cool.

604
00:27:20,705 --> 00:27:23,180
And to me intuitively
randomness should be weaker

605
00:27:23,180 --> 00:27:25,510
than an adversarial
player, where

606
00:27:25,510 --> 00:27:26,960
you replace these with for all.

607
00:27:26,960 --> 00:27:30,050

608
00:27:30,050 --> 00:27:33,320
But it turns out they behave
roughly the same essentially

609
00:27:33,320 --> 00:27:35,300
by a probability
amplification argument.

610
00:27:35,300 --> 00:27:38,000
It's a little too
detailed to go into here.

611
00:27:38,000 --> 00:27:40,060
And so far, there
are no reductions

612
00:27:40,060 --> 00:27:42,367
from this to what I
would call natural games.

613
00:27:42,367 --> 00:27:43,950
There are a few
examples in the paper,

614
00:27:43,950 --> 00:27:48,090
but none around rolling dice.

615
00:27:48,090 --> 00:27:51,040
I would love to apply this
to like playing Tetris,

616
00:27:51,040 --> 00:27:53,900
or in the paper they
mention backgammon

617
00:27:53,900 --> 00:27:55,920
as a candidate,
something like that,

618
00:27:55,920 --> 00:27:58,200
where you'd like to
get PSPACE completeness

619
00:27:58,200 --> 00:28:01,140
in a bounded setting.

620
00:28:01,140 --> 00:28:05,260
So throwing that out there is an
interesting direction to study,

621
00:28:05,260 --> 00:28:08,690
but I'll end it there.

622
00:28:08,690 --> 00:28:13,150
Now, we can go to EXPTIME,
two players, unbounded game,

623
00:28:13,150 --> 00:28:16,592
adversarial player,
no randomness.

624
00:28:16,592 --> 00:28:18,240
And we get EXPTIME completeness.

625
00:28:18,240 --> 00:28:36,870

626
00:28:36,870 --> 00:28:39,070
So we're going to start
out with-- I guess,

627
00:28:39,070 --> 00:28:42,370
similar to what we do it down
here-- I'm going to start

628
00:28:42,370 --> 00:28:46,170
with some formula games
which are EXPTIME complete

629
00:28:46,170 --> 00:28:48,620
and then some graph games
that are EXPTIME complete,

630
00:28:48,620 --> 00:28:51,440
then constraint logic game
which is EXPTIME complete.

631
00:28:51,440 --> 00:28:54,840
And along the way will prove
something some hardness.

632
00:28:54,840 --> 00:28:57,230
There are fewer results here,
in general, I would say.

633
00:28:57,230 --> 00:28:59,450
In particular, I don't
have a good example

634
00:28:59,450 --> 00:29:04,086
of using constraint logic
to prove a fun game hard,

635
00:29:04,086 --> 00:29:05,210
though they probably exist.

636
00:29:05,210 --> 00:29:07,460
We just haven't
gotten there yet.

637
00:29:07,460 --> 00:29:11,030
So it's more open problems.

638
00:29:11,030 --> 00:29:14,790
But there are a lot of cool
base problems out there.

639
00:29:14,790 --> 00:29:18,860
And this field started by a
paper by Stockmeyer and Chandra

640
00:29:18,860 --> 00:29:21,189
in 1979.

641
00:29:21,189 --> 00:29:22,980
And it's been the basis
for pretty much all

642
00:29:22,980 --> 00:29:24,680
EXPTIME hardness proofs.

643
00:29:24,680 --> 00:29:26,520
EXPTIME hardness is
really cool, because it

644
00:29:26,520 --> 00:29:29,770
implies exponential time.

645
00:29:29,770 --> 00:29:32,990
Any problems EXPTIME hard
cannot be solved faster than

646
00:29:32,990 --> 00:29:34,520
exponential time.

647
00:29:34,520 --> 00:29:36,670
Whereas all these
other classes, we

648
00:29:36,670 --> 00:29:40,590
need to assume P does not equal
NP or P is not equal to PSPACE.

649
00:29:40,590 --> 00:29:43,100
P we know does
not equal EXPTIME.

650
00:29:43,100 --> 00:29:45,380
So these games require
exponential time.

651
00:29:45,380 --> 00:29:48,719

652
00:29:48,719 --> 00:29:52,070
It's kind of fun.

653
00:29:52,070 --> 00:29:54,370
And I'm pretty sure the first
results in this category

654
00:29:54,370 --> 00:29:56,718
were these games.

655
00:29:56,718 --> 00:29:59,390
So it's power of games.

656
00:29:59,390 --> 00:30:06,000

657
00:30:06,000 --> 00:30:08,660
So in general, we're going
to have some formula, maybe

658
00:30:08,660 --> 00:30:11,100
a couple formulas.

659
00:30:11,100 --> 00:30:13,444
But definitely we have
a variable assignment.

660
00:30:13,444 --> 00:30:14,860
And the state of
the game is going

661
00:30:14,860 --> 00:30:16,401
to be a variable
assignment and who's

662
00:30:16,401 --> 00:30:22,320
going to move next, player 1
or player 2, black or white.

663
00:30:22,320 --> 00:30:25,550
Again, we'll use that notation.

664
00:30:25,550 --> 00:30:28,147
And we're going to start
with some variable arbitrary

665
00:30:28,147 --> 00:30:28,980
variable assignment.

666
00:30:28,980 --> 00:30:32,320
That's part of the initial state
of the game, the board if you

667
00:30:32,320 --> 00:30:33,440
will.

668
00:30:33,440 --> 00:30:40,680
And in general, you can
set variables to 0 or 1

669
00:30:40,680 --> 00:30:41,775
as many times as you like.

670
00:30:41,775 --> 00:30:44,300

671
00:30:44,300 --> 00:30:47,570
That's what distinguishes
this from bounded games.

672
00:30:47,570 --> 00:30:51,425
And all of these games
are going to be partisan,

673
00:30:51,425 --> 00:30:55,359
a term we used last
class, so meaning

674
00:30:55,359 --> 00:30:57,275
we're going to have black
and white variables.

675
00:30:57,275 --> 00:31:03,280

676
00:31:03,280 --> 00:31:09,795
And I'm going to
cheat a little bit.

677
00:31:09,795 --> 00:31:11,420
There's going to be
one variable that's

678
00:31:11,420 --> 00:31:13,680
black and white, but
only in one of the games.

679
00:31:13,680 --> 00:31:15,244
So we'll get there.

680
00:31:15,244 --> 00:31:17,410
So black player can only
change the black variables.

681
00:31:17,410 --> 00:31:19,618
The white player can only
change the white variables,

682
00:31:19,618 --> 00:31:21,440
except for how I'm
going to cheat.

683
00:31:21,440 --> 00:31:24,257
So let's start.

684
00:31:24,257 --> 00:31:25,840
These games are very
creatively named.

685
00:31:25,840 --> 00:31:28,394
First one's called G_1.

686
00:31:28,394 --> 00:31:30,310
And it's amazing how
consistent the literature

687
00:31:30,310 --> 00:31:33,520
is about the naming
of these games.

688
00:31:33,520 --> 00:31:38,174
So in G_1, I move my
player is to set all

689
00:31:38,174 --> 00:31:39,340
the variables of your color.

690
00:31:39,340 --> 00:31:42,440

691
00:31:42,440 --> 00:31:45,640
So if you're white, you're going
to set all the white variables.

692
00:31:45,640 --> 00:31:48,000
If black, you're going to
set all black variables.

693
00:31:48,000 --> 00:31:50,640
And set here means you get to
choose whether it's 0 or 1.

694
00:31:50,640 --> 00:31:53,210
So you're just going to
completely rewrite all

695
00:31:53,210 --> 00:31:55,230
of the variables of your color.

696
00:31:55,230 --> 00:31:56,590
And then, here's the cheat.

697
00:31:56,590 --> 00:31:59,570
We're also going to have
a single variable that's

698
00:31:59,570 --> 00:32:00,940
shared between black and white.

699
00:32:00,940 --> 00:32:03,970

700
00:32:03,970 --> 00:32:05,500
Call it t.

701
00:32:05,500 --> 00:32:11,370
And it's going to be 0 if
it's a player 2's move,

702
00:32:11,370 --> 00:32:13,190
1 if it's player 1's move.

703
00:32:13,190 --> 00:32:14,740
I mean, it doesn't
really matter.

704
00:32:14,740 --> 00:32:18,080
But I guess 1 and 1 is nice.

705
00:32:18,080 --> 00:32:19,220
So that's the moves.

706
00:32:19,220 --> 00:32:21,540
What's the goal of the game?

707
00:32:21,540 --> 00:32:33,490
You're going to lose the
game if, by making your move,

708
00:32:33,490 --> 00:32:38,933
you satisfy a common between
the two players 4DNF formula.

709
00:32:38,933 --> 00:32:45,632

710
00:32:45,632 --> 00:32:47,090
So there's one
formula in the game.

711
00:32:47,090 --> 00:32:49,992
It's DNF, which is very
simple to think about.

712
00:32:49,992 --> 00:32:51,200
It's just a bunch of options.

713
00:32:51,200 --> 00:32:52,370
If this happens, you lose.

714
00:32:52,370 --> 00:32:53,300
If this happens, you lose.

715
00:32:53,300 --> 00:32:54,383
If this happens, you lose.

716
00:32:54,383 --> 00:32:56,080
It's an OR with
various conditions.

717
00:32:56,080 --> 00:32:57,840
So you want to
move in such a way

718
00:32:57,840 --> 00:33:01,112
that you do not satisfy
that formula every time.

719
00:33:01,112 --> 00:33:03,320
And in each move, you can
rewrite all your variables.

720
00:33:03,320 --> 00:33:06,000
But this formula
does involve t, which

721
00:33:06,000 --> 00:33:08,720
lets you care about
who's turn it was.

722
00:33:08,720 --> 00:33:11,070
So that's cool, very clean.

723
00:33:11,070 --> 00:33:13,680
I mean, the players have
a lot of power here.

724
00:33:13,680 --> 00:33:17,635
This is the first
game proved hard.

725
00:33:17,635 --> 00:33:19,760
A little tricky to work
with, because in most games

726
00:33:19,760 --> 00:33:22,111
you can't set all the
variables at once.

727
00:33:22,111 --> 00:33:24,360
Generally, you're only setting
one variable at a time.

728
00:33:24,360 --> 00:33:25,943
So all the other
games are going to be

729
00:33:25,943 --> 00:33:29,340
setting one variable at a time.

730
00:33:29,340 --> 00:33:31,400
At this point,
we're just defining.

731
00:33:31,400 --> 00:33:35,670
Then, we'll use these games
to prove some hardness.

732
00:33:35,670 --> 00:33:41,590
G_2, the next game, is
a move was going to be

733
00:33:41,590 --> 00:33:43,370
set one variable of your color.

734
00:33:43,370 --> 00:33:49,480

735
00:33:49,480 --> 00:33:52,449
So in particular, if you set the
variable to its original value,

736
00:33:52,449 --> 00:33:53,530
that's like passing.

737
00:33:53,530 --> 00:33:55,400
So passing is
allowed in this game.

738
00:33:55,400 --> 00:33:56,980
Passing is also allowed here.

739
00:33:56,980 --> 00:33:58,889
You could not change
any of the variables.

740
00:33:58,889 --> 00:34:00,139
You wouldn't win in that case.

741
00:34:00,139 --> 00:34:03,310
You only win if your
opponent loses in this setup.

742
00:34:03,310 --> 00:34:07,671
When the question
is can you win.

743
00:34:07,671 --> 00:34:09,754
In this case, we're going
to have a win condition.

744
00:34:09,754 --> 00:34:24,850

745
00:34:24,850 --> 00:34:26,460
In this case, white
and black have

746
00:34:26,460 --> 00:34:28,739
their own winning formulas.

747
00:34:28,739 --> 00:34:33,080
They're in 12DNF, still
DNF but a little bigger.

748
00:34:33,080 --> 00:34:36,960
And if you satisfy your formula
at the end of your turn,

749
00:34:36,960 --> 00:34:39,870
you win and vice versa.

750
00:34:39,870 --> 00:34:43,470
And move is just change
one variable at a time.

751
00:34:43,470 --> 00:34:47,480
So that's a very useful game.

752
00:34:47,480 --> 00:34:48,575
Next is G_3.

753
00:34:48,575 --> 00:34:51,660

754
00:34:51,660 --> 00:34:54,990
A slight variation
to G_3, we're going

755
00:34:54,990 --> 00:34:59,030
to flip one variable
of your color.

756
00:34:59,030 --> 00:35:04,170

757
00:35:04,170 --> 00:35:24,015
And then, we're going to lose if
you satisfy your 12DNF formula.

758
00:35:24,015 --> 00:35:29,867

759
00:35:29,867 --> 00:35:30,950
One thing to keep in mind.

760
00:35:30,950 --> 00:35:32,620
Losing and winning
are quite different,

761
00:35:32,620 --> 00:35:35,050
because losing is essentially
negating the formula, which

762
00:35:35,050 --> 00:35:36,640
turns DNF into DNF.

763
00:35:36,640 --> 00:35:38,140
So you can think
of this as winning.

764
00:35:38,140 --> 00:35:40,015
In the CNF condition,
you could think of this

765
00:35:40,015 --> 00:35:41,410
as losing in a DNF condition.

766
00:35:41,410 --> 00:35:43,660
But they're not interchangeable.

767
00:35:43,660 --> 00:35:46,240
So here we flipped
between DNF and DNF.

768
00:35:46,240 --> 00:35:48,330
But we've also changed
the definition of a move.

769
00:35:48,330 --> 00:35:50,570
A flip, you're not
allowed to pass.

770
00:35:50,570 --> 00:35:53,620
You must change a variable
to its opposite value.

771
00:35:53,620 --> 00:35:55,786
Here, we're allowed
to just pass.

772
00:35:55,786 --> 00:35:57,660
So we changed the move
definition and the win

773
00:35:57,660 --> 00:35:58,710
condition.

774
00:35:58,710 --> 00:35:59,760
That is also hard.

775
00:35:59,760 --> 00:36:01,260
This is a common one.

776
00:36:01,260 --> 00:36:04,310
I would say most EXPTIME
hardness proofs use this one.

777
00:36:04,310 --> 00:36:07,370

778
00:36:07,370 --> 00:36:07,870
G_4.

779
00:36:07,870 --> 00:36:14,790

780
00:36:14,790 --> 00:36:16,130
Move is going to be like this.

781
00:36:16,130 --> 00:36:18,630
You can set one
variable of your color.

782
00:36:18,630 --> 00:36:22,770

783
00:36:22,770 --> 00:36:26,500
And here, we're going to
have a common win condition.

784
00:36:26,500 --> 00:36:28,210
This is nice.

785
00:36:28,210 --> 00:36:41,000
You win if satisfy a
common 12DNF formula.

786
00:36:41,000 --> 00:36:41,730
Whoops.

787
00:36:41,730 --> 00:36:43,646
13DNF.

788
00:36:43,646 --> 00:36:44,600
We need a little more.

789
00:36:44,600 --> 00:36:47,940

790
00:36:47,940 --> 00:36:50,980
So every move,
we're both checking

791
00:36:50,980 --> 00:36:52,700
the same formula in this case.

792
00:36:52,700 --> 00:36:54,197
And here, the set
happens to win.

793
00:36:54,197 --> 00:36:55,280
So it's a variation of G_2.

794
00:36:55,280 --> 00:36:58,440

795
00:36:58,440 --> 00:37:00,180
G_5 does not exist.

796
00:37:00,180 --> 00:37:04,900
G_6-- there is a G_5 in
the paper, but it's

797
00:37:04,900 --> 00:37:06,876
a generalization of G_6.

798
00:37:06,876 --> 00:37:09,792
So I'll tell you
what is in a second.

799
00:37:09,792 --> 00:37:11,630
Not important.

800
00:37:11,630 --> 00:37:15,640
So G_6, same thing for the move.

801
00:37:15,640 --> 00:37:21,620
You set one of your variables
to whatever you want.

802
00:37:21,620 --> 00:37:24,060
But we're going to make
it asymmetric in the sense

803
00:37:24,060 --> 00:37:28,540
that-- and this will be very
helpful for constraint logic--

804
00:37:28,540 --> 00:37:32,620
player 1 wins-- player 1 is
the one that we care about.

805
00:37:32,620 --> 00:37:38,180
We're trying to decide whether
they win-- if anyone satisfies

806
00:37:38,180 --> 00:37:39,160
a particular formula.

807
00:37:39,160 --> 00:37:54,550

808
00:37:54,550 --> 00:37:55,775
So there's one CNF formula.

809
00:37:55,775 --> 00:37:58,240
If it's ever satisfied,
player 1 wins.

810
00:37:58,240 --> 00:38:01,060
If it's never satisfied,
you get a tie.

811
00:38:01,060 --> 00:38:04,300
And we want to know whether
player 1 can force a win.

812
00:38:04,300 --> 00:38:07,160
So this is very compatible
with this sort of thing

813
00:38:07,160 --> 00:38:10,170
we were doing before
with it was the game

814
00:38:10,170 --> 00:38:13,100
problem from last class, but in
particular the constraint logic

815
00:38:13,100 --> 00:38:13,730
games.

816
00:38:13,730 --> 00:38:15,780
So we'll use G_6 for
constraint logic.

817
00:38:15,780 --> 00:38:17,430
G_3 is most other proofs.

818
00:38:17,430 --> 00:38:21,700

819
00:38:21,700 --> 00:38:25,930
So these are all EXPTIME
complete formula games.

820
00:38:25,930 --> 00:38:26,430
Yeah?

821
00:38:26,430 --> 00:38:26,480
AUDIENCE: All right.

822
00:38:26,480 --> 00:38:28,230
I'm a know; little
confused about G_1.

823
00:38:28,230 --> 00:38:30,930
So I can pass by just setting
down any of my variables,

824
00:38:30,930 --> 00:38:31,845
right?

825
00:38:31,845 --> 00:38:32,470
PROFESSOR: Yes.

826
00:38:32,470 --> 00:38:34,178
AUDIENCE: So then,
how could I ever lose?

827
00:38:34,178 --> 00:38:34,824
Because if--

828
00:38:34,824 --> 00:38:38,776
AUDIENCE: You can lose if
the turn variable changing

829
00:38:38,776 --> 00:38:42,187
satisfies the formula.

830
00:38:42,187 --> 00:38:42,728
AUDIENCE: Oh.

831
00:38:42,728 --> 00:38:43,228
Yeah.

832
00:38:43,228 --> 00:38:44,210
AUDIENCE: Oh, you can just
set the turn variable.

833
00:38:44,210 --> 00:38:45,200
AUDIENCE: Sorry.

834
00:38:45,200 --> 00:38:49,099
PROFESSOR: Well, it changes
every time so, yeah, right.

835
00:38:49,099 --> 00:38:51,390
I think you could set your
variables in such a way when

836
00:38:51,390 --> 00:38:54,110
it's the opponents turn,
no matter what they do,

837
00:38:54,110 --> 00:38:58,420
the formula becomes
satisfied and then they lose.

838
00:38:58,420 --> 00:38:59,272
Yeah.

839
00:38:59,272 --> 00:39:00,097
Good.

840
00:39:00,097 --> 00:39:02,180
AUDIENCE: But then it
became satisfied on my turn.

841
00:39:02,180 --> 00:39:02,900
Sorry.

842
00:39:02,900 --> 00:39:04,760
PROFESSOR: But t was
a different value.

843
00:39:04,760 --> 00:39:09,310
So when it's your turn, you
set t to 0 or set t to 1.

844
00:39:09,310 --> 00:39:11,550
And so then, maybe the
formula's not satisfied.

845
00:39:11,550 --> 00:39:13,760
When it's the opponents
turn, even if they pass,

846
00:39:13,760 --> 00:39:15,220
t is set to 0.

847
00:39:15,220 --> 00:39:17,119
Yes. t is part of the formula.

848
00:39:17,119 --> 00:39:18,618
AUDIENCE: Where
does the 12 come up?

849
00:39:18,618 --> 00:39:20,059
Is that from the previous?

850
00:39:20,059 --> 00:39:22,100
PROFESSOR: I think it's
from the previous result.

851
00:39:22,100 --> 00:39:22,599
Yeah.

852
00:39:22,599 --> 00:39:23,970
Didn't we have an 11 or 12?

853
00:39:23,970 --> 00:39:24,850
AUDIENCE: It was 12.

854
00:39:24,850 --> 00:39:25,660
PROFESSOR: Yeah.

855
00:39:25,660 --> 00:39:28,220
All right.

856
00:39:28,220 --> 00:39:32,010
In case, you prefer
real games, as I do.

857
00:39:32,010 --> 00:39:34,960
Here is a physical
instantiation--

858
00:39:34,960 --> 00:39:36,520
it could be many of the games.

859
00:39:36,520 --> 00:39:39,970
The one they chose
to highlight was G_4.

860
00:39:39,970 --> 00:39:41,740
So this is a game called Peek.

861
00:39:41,740 --> 00:39:45,290
And that name has
been reappropriated

862
00:39:45,290 --> 00:39:48,350
for many other games, which
we'll talk about in a moment.

863
00:39:48,350 --> 00:39:50,630
But the idea is you
have a bunch of trays.

864
00:39:50,630 --> 00:39:52,910
Each tray has a
bunch of holes in it.

865
00:39:52,910 --> 00:39:55,320
Everybody knows where
all the holes are.

866
00:39:55,320 --> 00:39:57,020
Each tray has
exactly two positions

867
00:39:57,020 --> 00:39:59,470
in all the way and
out all the way.

868
00:39:59,470 --> 00:40:01,740
It's like here.

869
00:40:01,740 --> 00:40:07,790
And there are white
trays and black trays.

870
00:40:07,790 --> 00:40:11,890
So G_4, white player can take any
of the trays of their variable,

871
00:40:11,890 --> 00:40:14,222
and if they want to,
toggle its state.

872
00:40:14,222 --> 00:40:16,430
They can either push it in
or pull it out or leave it

873
00:40:16,430 --> 00:40:18,520
as it is.

874
00:40:18,520 --> 00:40:23,520
And then, you're going to
win if, viewed from above,

875
00:40:23,520 --> 00:40:26,631
there's a hole that sees all
the way down to the ground.

876
00:40:26,631 --> 00:40:28,130
So you could put
something red here.

877
00:40:28,130 --> 00:40:32,140
And if you see red at
the top, then you've

878
00:40:32,140 --> 00:40:33,634
satisfied the DNF formula.

879
00:40:33,634 --> 00:40:34,800
It's common between the two.

880
00:40:34,800 --> 00:40:36,290
So the first player
to make a move

881
00:40:36,290 --> 00:40:38,160
where you could see a
hole the way through,

882
00:40:38,160 --> 00:40:40,380
that is expressing DNF formula.

883
00:40:40,380 --> 00:40:42,350
So that's kind of a
fun way, geometric way,

884
00:40:42,350 --> 00:40:44,215
to think about these games.

885
00:40:44,215 --> 00:40:46,090
And you could adapt it
to all of these games,

886
00:40:46,090 --> 00:40:48,820
just with slightly
different geometric setups.

887
00:40:48,820 --> 00:40:50,330
We'll see one in a little bit.

888
00:40:50,330 --> 00:40:55,580

889
00:40:55,580 --> 00:40:56,730
Cool.

890
00:40:56,730 --> 00:40:59,050
I have here the next
thing to mention

891
00:40:59,050 --> 00:41:01,750
is why are all these
games in EXPTIME.

892
00:41:01,750 --> 00:41:04,570
I think that's
worth talking about.

893
00:41:04,570 --> 00:41:09,830

894
00:41:09,830 --> 00:41:13,040
The idea is pretty simple.

895
00:41:13,040 --> 00:41:15,790
All these games-- I mean,
you can represent a state

896
00:41:15,790 --> 00:41:18,410
in a polynomial number of bits.

897
00:41:18,410 --> 00:41:21,580
It's just the current setting
of the variables and maybe

898
00:41:21,580 --> 00:41:23,720
whose turn it is.

899
00:41:23,720 --> 00:41:25,530
Therefore, there are
an exponential number

900
00:41:25,530 --> 00:41:27,670
of possible states.

901
00:41:27,670 --> 00:41:32,870
And the approach is basically
to build the entire state graph

902
00:41:32,870 --> 00:41:37,820
and then rank for each
position whether it's

903
00:41:37,820 --> 00:41:40,400
a win for one player or a
win for the other player.

904
00:41:40,400 --> 00:41:42,080
And I think the
easiest way to think

905
00:41:42,080 --> 00:41:44,870
about this is you start
with all the configurations

906
00:41:44,870 --> 00:41:48,070
that satisfy the win condition.

907
00:41:48,070 --> 00:41:50,260
You call those
mate-in-0 positions.

908
00:41:50,260 --> 00:42:00,040
And then, from there
in exponential time

909
00:42:00,040 --> 00:42:03,950
you can compute, find
all of the moves, where

910
00:42:03,950 --> 00:42:06,880
all the places where you can
make a move in any response

911
00:42:06,880 --> 00:42:08,420
lead you to a win position.

912
00:42:08,420 --> 00:42:10,540
And those are the
mate-in-1 positions.

913
00:42:10,540 --> 00:42:15,020
Or in two ply, one
move, one pair of moves.

914
00:42:15,020 --> 00:42:18,150
And so on and so forth.

915
00:42:18,150 --> 00:42:20,800
And so then, at
most you are going

916
00:42:20,800 --> 00:42:24,070
to be mate in exponential,
because they're only

917
00:42:24,070 --> 00:42:25,270
exponentially many states.

918
00:42:25,270 --> 00:42:27,600
So the longest mate path
is going to be exponential.

919
00:42:27,600 --> 00:42:35,350
So you can do like: for k = 0
to the total number of states,

920
00:42:35,350 --> 00:42:41,230
which is an exponential
compute mate-in-k.

921
00:42:41,230 --> 00:42:44,810

922
00:42:44,810 --> 00:42:48,250
And then, you've characterized
the whole state space

923
00:42:48,250 --> 00:42:50,530
in nearly exponential time.

924
00:42:50,530 --> 00:42:52,580
And now you know which
ones are winning states.

925
00:42:52,580 --> 00:42:54,910
And then, you check whether
yours is one of them.

926
00:42:54,910 --> 00:42:56,960
So there's probably
other ways to do it.

927
00:42:56,960 --> 00:42:59,374
You could probably start from
your initial configuration.

928
00:42:59,374 --> 00:43:01,790
But this makes it clear that
it's at most exponential time

929
00:43:01,790 --> 00:43:03,860
that you'll be spending.

930
00:43:03,860 --> 00:43:06,444
Not polynomial space, because
we're building the entire graph

931
00:43:06,444 --> 00:43:07,360
here for this to work.

932
00:43:07,360 --> 00:43:10,580
We have to remember for all
the states that we visited,

933
00:43:10,580 --> 00:43:13,854
so we can check for duplicates.

934
00:43:13,854 --> 00:43:16,270
So that's intuitively why we're
an exponential time bigger

935
00:43:16,270 --> 00:43:18,377
than PSPACE, assuming
PSPACE does not equal

936
00:43:18,377 --> 00:43:19,460
EXPTIME, which we believe.

937
00:43:19,460 --> 00:43:24,380

938
00:43:24,380 --> 00:43:25,650
Cool.

939
00:43:25,650 --> 00:43:28,345
So let's do some
graph games next.

940
00:43:28,345 --> 00:43:31,230

941
00:43:31,230 --> 00:43:34,600
I have two games to mention
and a proof for one of them.

942
00:43:34,600 --> 00:43:49,780

943
00:43:49,780 --> 00:43:55,760
First game is based
on Hamiltonian cycle.

944
00:43:55,760 --> 00:43:57,510
So this is a funny kind of game.

945
00:43:57,510 --> 00:44:01,835

946
00:44:01,835 --> 00:44:04,460
And the claim is that you can do
this for a lot of different NP

947
00:44:04,460 --> 00:44:05,290
complete problems.

948
00:44:05,290 --> 00:44:08,190
But in general, we have a graph.

949
00:44:08,190 --> 00:44:11,110
Every edge of the graph
is either black or white.

950
00:44:11,110 --> 00:44:13,585
And black player can
only play black edges.

951
00:44:13,585 --> 00:44:15,210
White player can only
play black edges.

952
00:44:15,210 --> 00:44:20,330
In addition, every edge
either in or out, in the graph

953
00:44:20,330 --> 00:44:23,990
or currently out of the graph.

954
00:44:23,990 --> 00:44:29,530
And that's what these variables
are going to correspond to.

955
00:44:29,530 --> 00:44:32,870
I mean, we're going to convert
into a corresponding game.

956
00:44:32,870 --> 00:44:38,020
In this case, it's going
to be a G_6 style game.

957
00:44:38,020 --> 00:44:44,600
So the winning condition
is that the set of in edges

958
00:44:44,600 --> 00:44:48,410
form a Hamiltonian
cycle in the graph.

959
00:44:48,410 --> 00:44:50,830
So you could think in
means in the cycle,

960
00:44:50,830 --> 00:44:53,000
out means not in the cycle.

961
00:44:53,000 --> 00:44:56,710
If we ever get to a
state where the in edges

962
00:44:56,710 --> 00:44:59,140
form a Hamiltonian
cycle, player 1 wins.

963
00:44:59,140 --> 00:45:01,890
Player 2's goal is
to try to avoid that.

964
00:45:01,890 --> 00:45:04,190
Player 2 can only
control the black edges.

965
00:45:04,190 --> 00:45:06,270
Player 1 can only
control the white edges.

966
00:45:06,270 --> 00:45:09,920
At the end of each turn, you
can change, if you want to,

967
00:45:09,920 --> 00:45:12,560
one of the edges
between in and out

968
00:45:12,560 --> 00:45:15,280
and one of the
edges of your color.

969
00:45:15,280 --> 00:45:20,185
So I'm just going to leave it at
that, because the proof is not

970
00:45:20,185 --> 00:45:21,060
terribly interesting.

971
00:45:21,060 --> 00:45:23,840

972
00:45:23,840 --> 00:45:27,810
No gadgets, but
this next game is

973
00:45:27,810 --> 00:45:31,310
I think a lot more fun,
more surprisingly hard.

974
00:45:31,310 --> 00:45:37,150
And it has a nice clean
reduction also from G_3.

975
00:45:37,150 --> 00:45:38,065
So what's the game?

976
00:45:38,065 --> 00:45:41,560

977
00:45:41,560 --> 00:45:45,825
We are given three graphs
on the same vertices.

978
00:45:45,825 --> 00:45:49,090

979
00:45:49,090 --> 00:45:53,950
So really you can think of this
as a three-edge colored graph.

980
00:45:53,950 --> 00:45:56,540
There's the red graph, the
blue graph, the green graph,

981
00:45:56,540 --> 00:45:58,590
same set of vertices.

982
00:45:58,590 --> 00:46:03,850
And we are going to
have tokens on vertices.

983
00:46:03,850 --> 00:46:06,600

984
00:46:06,600 --> 00:46:09,880
And we're going to have
at most one per vertex.

985
00:46:09,880 --> 00:46:12,670

986
00:46:12,670 --> 00:46:14,465
There are white tokens
and black tokens.

987
00:46:14,465 --> 00:46:17,110

988
00:46:17,110 --> 00:46:23,210
A move by a player
is going to, call it,

989
00:46:23,210 --> 00:46:43,470
slide a token, exactly one of
them, of your color along path

990
00:46:43,470 --> 00:46:44,530
in one of the graphs.

991
00:46:44,530 --> 00:46:46,874

992
00:46:46,874 --> 00:46:47,790
There's three of them.

993
00:46:47,790 --> 00:46:56,270

994
00:46:56,270 --> 00:46:59,530
And that slide has to
satisfy a few conditions.

995
00:46:59,530 --> 00:47:02,280

996
00:47:02,280 --> 00:47:05,640
One condition which is
that the target vertex

997
00:47:05,640 --> 00:47:09,530
you get to and all intermediate
vertices that you follow

998
00:47:09,530 --> 00:47:13,700
along the path must be empty.

999
00:47:13,700 --> 00:47:17,790

1000
00:47:17,790 --> 00:47:18,915
They should have no tokens.

1001
00:47:18,915 --> 00:47:24,140

1002
00:47:24,140 --> 00:47:26,400
So you pick up any
token of your color--

1003
00:47:26,400 --> 00:47:28,470
you pick a color
red, green, or blue--

1004
00:47:28,470 --> 00:47:31,330
and you follow a red path
or you follow a green path

1005
00:47:31,330 --> 00:47:32,950
or you follow a blue path.

1006
00:47:32,950 --> 00:47:35,490
As long as that path doesn't
hit any other tokens,

1007
00:47:35,490 --> 00:47:37,800
then you drop your
token, erase it

1008
00:47:37,800 --> 00:47:39,790
from where it was
originally, and you

1009
00:47:39,790 --> 00:47:41,897
keep making moves like that.

1010
00:47:41,897 --> 00:47:43,105
What about the win condition?

1011
00:47:43,105 --> 00:47:47,360

1012
00:47:47,360 --> 00:47:50,600
We look at a player-- I'm going
to come the players 1 and 2.

1013
00:47:50,600 --> 00:48:04,420
Player i will win if they
get one of their tokens

1014
00:48:04,420 --> 00:48:09,000
to a node in the win set W_i.

1015
00:48:09,000 --> 00:48:12,750
So also we're going to color
the nodes as winning for white

1016
00:48:12,750 --> 00:48:15,060
or winning for black.

1017
00:48:15,060 --> 00:48:18,930
And if you ever get a token to
a winning spot for your color,

1018
00:48:18,930 --> 00:48:19,500
games over.

1019
00:48:19,500 --> 00:48:21,800
You win.

1020
00:48:21,800 --> 00:48:24,690
So this is a pretty
natural token-sliding game.

1021
00:48:24,690 --> 00:48:27,000
As EXPTIME complete, very hard.

1022
00:48:27,000 --> 00:48:29,520

1023
00:48:29,520 --> 00:48:33,350
And this one we're
going to proof.

1024
00:48:33,350 --> 00:48:35,380
So this is a variable gadget.

1025
00:48:35,380 --> 00:48:38,460

1026
00:48:38,460 --> 00:48:40,047
So we're going to
reduce from G_3.

1027
00:48:40,047 --> 00:48:40,880
I think I said that.

1028
00:48:40,880 --> 00:48:41,400
This one.

1029
00:48:41,400 --> 00:48:44,540
So G_3, a move
corresponds to you're

1030
00:48:44,540 --> 00:48:47,480
forced to flip a
variable of your color.

1031
00:48:47,480 --> 00:48:50,620
Although we could switch
that to the other version.

1032
00:48:50,620 --> 00:48:56,560
And you're going to lose the
game if you satisfy your DNF

1033
00:48:56,560 --> 00:48:57,210
formula.

1034
00:48:57,210 --> 00:49:01,550
So there's lots of edges here.

1035
00:49:01,550 --> 00:49:05,975
But in particular, there's
solid edges, dashed edges,

1036
00:49:05,975 --> 00:49:06,850
and the dotted edges.

1037
00:49:06,850 --> 00:49:08,740
That's red, green, and blue.

1038
00:49:08,740 --> 00:49:11,730
This is before color journals.

1039
00:49:11,730 --> 00:49:12,230
Question.

1040
00:49:12,230 --> 00:49:13,938
AUDIENCE: I didn't
catch what the purpose

1041
00:49:13,938 --> 00:49:15,740
of coloring the edges is.

1042
00:49:15,740 --> 00:49:17,200
PROFESSOR: Oh.

1043
00:49:17,200 --> 00:49:18,750
It's basically to
decompose the graph

1044
00:49:18,750 --> 00:49:20,970
into a bunch of
different types of paths.

1045
00:49:20,970 --> 00:49:24,480
So when you follow
a path, it must

1046
00:49:24,480 --> 00:49:26,589
be a path of a single color.

1047
00:49:26,589 --> 00:49:27,130
AUDIENCE: Oh.

1048
00:49:27,130 --> 00:49:27,700
OK.

1049
00:49:27,700 --> 00:49:28,050
PROFESSOR: Yes.

1050
00:49:28,050 --> 00:49:30,620
So you can only follow the solid
path or follow a dashed path

1051
00:49:30,620 --> 00:49:32,020
or follow a dotted path.

1052
00:49:32,020 --> 00:49:35,525
You can't mix edges
of different colors.

1053
00:49:35,525 --> 00:49:36,650
So that's the three graphs.

1054
00:49:36,650 --> 00:49:40,939

1055
00:49:40,939 --> 00:49:41,730
So what's going on?

1056
00:49:41,730 --> 00:49:44,200
We've got a white token
here, black token here,

1057
00:49:44,200 --> 00:49:44,980
white token here.

1058
00:49:44,980 --> 00:49:47,510
This is a win
position for white.

1059
00:49:47,510 --> 00:49:49,792
These are win
positions for black.

1060
00:49:49,792 --> 00:49:51,500
So there's a lot of
things going on here.

1061
00:49:51,500 --> 00:49:56,570
But the main idea is that white
can move the token to here.

1062
00:49:56,570 --> 00:49:58,750
That corresponds to
EXPTIME being false.

1063
00:49:58,750 --> 00:50:00,000
Or it can move it to here.

1064
00:50:00,000 --> 00:50:03,200
That corresponds to
EXPTIME being true.

1065
00:50:03,200 --> 00:50:06,080
And that's essentially all
you can do in this picture.

1066
00:50:06,080 --> 00:50:06,580
Why?

1067
00:50:06,580 --> 00:50:11,609
Because if this guy moves
to here, for example,

1068
00:50:11,609 --> 00:50:12,400
then black can win.

1069
00:50:12,400 --> 00:50:16,000
Black can go along this
path and get to a win state.

1070
00:50:16,000 --> 00:50:20,140
And symmetrically, if white
also goes off the track,

1071
00:50:20,140 --> 00:50:22,340
then black can go
to the win state.

1072
00:50:22,340 --> 00:50:26,050
Also, we had to put this vertex
here, put this token here,

1073
00:50:26,050 --> 00:50:26,800
to make that true.

1074
00:50:26,800 --> 00:50:28,720
You might worry,
maybe black tries

1075
00:50:28,720 --> 00:50:32,340
to move out of that position to
there or to there or to there.

1076
00:50:32,340 --> 00:50:34,690
But then white will
win by going like that.

1077
00:50:34,690 --> 00:50:39,370
So under optimal play, if you
don't make silly losing moves,

1078
00:50:39,370 --> 00:50:44,070
all you can do is move the white
token between here and here.

1079
00:50:44,070 --> 00:50:46,550
And I didn't say it,
but the path here

1080
00:50:46,550 --> 00:50:48,705
is supposed to be a
non-zero length path.

1081
00:50:48,705 --> 00:50:50,960
So you have to move your token.

1082
00:50:50,960 --> 00:50:52,980
And therefore, that
represents this constraint

1083
00:50:52,980 --> 00:50:54,880
that you must put the variable.

1084
00:50:54,880 --> 00:50:58,070
You must flip exactly one
variable of your color.

1085
00:50:58,070 --> 00:50:59,950
So that's the variable gadget.

1086
00:50:59,950 --> 00:51:02,709
And for a while, that's
just going to happen.

1087
00:51:02,709 --> 00:51:04,625
But now we have to
implement the win condition

1088
00:51:04,625 --> 00:51:07,620
or the lose condition.

1089
00:51:07,620 --> 00:51:10,600
So that's this thing.

1090
00:51:10,600 --> 00:51:13,070
This is a clause.

1091
00:51:13,070 --> 00:51:14,880
This is a DNF clause.

1092
00:51:14,880 --> 00:51:19,010
Is it x3 is false
and y5 is true.

1093
00:51:19,010 --> 00:51:21,700
In that case, we
want to lose or win.

1094
00:51:21,700 --> 00:51:23,200
It doesn't particularly
matter here.

1095
00:51:23,200 --> 00:51:26,410
We want to lose, I guess.

1096
00:51:26,410 --> 00:51:28,750
Obviously, black can't move
first in this configuration,

1097
00:51:28,750 --> 00:51:30,750
because then white
could just win.

1098
00:51:30,750 --> 00:51:33,310
So black can't move first, so
what can happen in this gadget

1099
00:51:33,310 --> 00:51:35,980
is that white must move
here because you're not

1100
00:51:35,980 --> 00:51:37,755
allowed to collide.

1101
00:51:37,755 --> 00:51:39,630
Once you move there,
the threat is that white

1102
00:51:39,630 --> 00:51:40,970
will win in the next turn.

1103
00:51:40,970 --> 00:51:43,130
So black must move up.

1104
00:51:43,130 --> 00:51:45,920
And then, if this is
empty, white can move here.

1105
00:51:45,920 --> 00:51:48,530

1106
00:51:48,530 --> 00:51:51,510
It could actually move to
here, because that's a path.

1107
00:51:51,510 --> 00:51:53,180
And then, the threat
is white will win.

1108
00:51:53,180 --> 00:51:56,270
So black must move up.

1109
00:51:56,270 --> 00:52:00,440
Also, there's a black win
there, but we'll get to that.

1110
00:52:00,440 --> 00:52:01,620
Actually, I'll do it now.

1111
00:52:01,620 --> 00:52:04,960
So if this was blocked by
x3, because x3 is currently

1112
00:52:04,960 --> 00:52:08,530
set to true, then you won't
be able to move this way.

1113
00:52:08,530 --> 00:52:10,560
So you'll basically
be stuck here.

1114
00:52:10,560 --> 00:52:13,170
And then, black
can win like that.

1115
00:52:13,170 --> 00:52:14,970
So you don't want to
activate this gadget

1116
00:52:14,970 --> 00:52:16,320
unless this is clear.

1117
00:52:16,320 --> 00:52:18,060
Similarly, we don't
want to activate it

1118
00:52:18,060 --> 00:52:19,040
unless this is clear.

1119
00:52:19,040 --> 00:52:21,600
So if we're up to
here, then white

1120
00:52:21,600 --> 00:52:23,360
can move up, threatening to win.

1121
00:52:23,360 --> 00:52:25,320
Therefore, black must move up.

1122
00:52:25,320 --> 00:52:29,100
And then, if this is clear,
white can move up to there.

1123
00:52:29,100 --> 00:52:32,530
And then, black has to go
there to prevent this win.

1124
00:52:32,530 --> 00:52:35,240
But white can win that way.

1125
00:52:35,240 --> 00:52:37,990
So white is going to
win if this clause was

1126
00:52:37,990 --> 00:52:39,280
satisfied or unsatisfied.

1127
00:52:39,280 --> 00:52:42,030
And I'm a little confused about
how many times we negated.

1128
00:52:42,030 --> 00:52:45,210
But I think you get the spirit.

1129
00:52:45,210 --> 00:52:52,940
And if this DNF clause is
satisfied, then white wins.

1130
00:52:52,940 --> 00:52:55,190
And you can have a bunch of
these clauses just sitting

1131
00:52:55,190 --> 00:52:56,280
around.

1132
00:52:56,280 --> 00:52:59,180
These are all vertices
unique to the clause,

1133
00:52:59,180 --> 00:53:01,500
except for these
guys, which are shared

1134
00:53:01,500 --> 00:53:03,794
with the variable gadgets here.

1135
00:53:03,794 --> 00:53:05,460
So those are the same
as these vertices.

1136
00:53:05,460 --> 00:53:06,910
They're all glued together.

1137
00:53:06,910 --> 00:53:07,810
No planarity here.

1138
00:53:07,810 --> 00:53:10,540

1139
00:53:10,540 --> 00:53:11,150
Cool.

1140
00:53:11,150 --> 00:53:14,970
So that's EXPTIME completeness
of this game called Block.

1141
00:53:14,970 --> 00:53:20,346

1142
00:53:20,346 --> 00:53:20,845
All right.

1143
00:53:20,845 --> 00:53:23,780

1144
00:53:23,780 --> 00:53:25,280
This is a little ambitious.

1145
00:53:25,280 --> 00:53:27,020
But the next one
I'd like to prove

1146
00:53:27,020 --> 00:53:31,300
is a real-life classic
game, namely checkers.

1147
00:53:31,300 --> 00:53:33,660
This is most of the
proof in one slide.

1148
00:53:33,660 --> 00:53:35,080
It's a little bit complicated.

1149
00:53:35,080 --> 00:53:40,260
But let me give you
the high level idea.

1150
00:53:40,260 --> 00:53:43,280
It's actually a
really cool proof.

1151
00:53:43,280 --> 00:53:45,550
It's also from my birth years.

1152
00:53:45,550 --> 00:53:47,940
So it's cool.

1153
00:53:47,940 --> 00:53:50,730
So don't worry
about this too much,

1154
00:53:50,730 --> 00:53:53,710
but our construction is going
to be this little square

1155
00:53:53,710 --> 00:53:54,810
inside this little square.

1156
00:53:54,810 --> 00:53:56,310
And then there's
this giant spiral

1157
00:53:56,310 --> 00:53:58,750
outside that will cause
everything to self-destruct

1158
00:53:58,750 --> 00:54:00,300
when the game ends.

1159
00:54:00,300 --> 00:54:01,770
I'll talk about that later.

1160
00:54:01,770 --> 00:54:03,620
Let's focus in first
on what's happening

1161
00:54:03,620 --> 00:54:05,770
within this little square.

1162
00:54:05,770 --> 00:54:08,440
But that will be the context,
and we'll get to that again.

1163
00:54:08,440 --> 00:54:10,760
So inside the square
is this thing.

1164
00:54:10,760 --> 00:54:17,690

1165
00:54:17,690 --> 00:54:20,700
So I mean, I think the
perspective is from white.

1166
00:54:20,700 --> 00:54:22,510
So the goal is for white to win.

1167
00:54:22,510 --> 00:54:26,060
And in checkers, there's
two types of pieces.

1168
00:54:26,060 --> 00:54:28,780
And the circles are
going to be pieces

1169
00:54:28,780 --> 00:54:31,877
that are going this way for
white and that way for black.

1170
00:54:31,877 --> 00:54:33,460
And the squares are
going to be kings.

1171
00:54:33,460 --> 00:54:35,860
They can move up or down.

1172
00:54:35,860 --> 00:54:38,890
So white and has some
variables that it can set

1173
00:54:38,890 --> 00:54:40,636
between true and false up here.

1174
00:54:40,636 --> 00:54:42,010
Black has some
variables that can

1175
00:54:42,010 --> 00:54:43,218
be set between true or false.

1176
00:54:43,218 --> 00:54:47,140
I didn't mention, but we
are going to be playing G_3.

1177
00:54:47,140 --> 00:54:49,240
We are going to
be simulating G_3.

1178
00:54:49,240 --> 00:54:52,170
So a move is going to be
forcing to flip something.

1179
00:54:52,170 --> 00:54:54,820
And we're going to lose
if the formula ends up

1180
00:54:54,820 --> 00:54:56,380
being satisfied.

1181
00:54:56,380 --> 00:54:59,530
So then there's this
computation done in the middle.

1182
00:54:59,530 --> 00:55:01,180
Basically, each of
these boxes is going

1183
00:55:01,180 --> 00:55:02,860
to correspond to a DNF clause.

1184
00:55:02,860 --> 00:55:04,610
What makes it tricky
is each clause

1185
00:55:04,610 --> 00:55:07,620
involves some black variables
and some white variables.

1186
00:55:07,620 --> 00:55:09,620
And those are going to
behave quite differently.

1187
00:55:09,620 --> 00:55:12,260
But this construction is
going to make that happen.

1188
00:55:12,260 --> 00:55:16,120
And overall, let's see.

1189
00:55:16,120 --> 00:55:17,580
Where to go?

1190
00:55:17,580 --> 00:55:19,590
Let's start with
the variable gadget.

1191
00:55:19,590 --> 00:55:22,304
So this is a white
variable gadget.

1192
00:55:22,304 --> 00:55:23,720
Black variable
gadget is symmetric

1193
00:55:23,720 --> 00:55:25,560
with all the colors
flipped I believe.

1194
00:55:25,560 --> 00:55:26,230
Yeah.

1195
00:55:26,230 --> 00:55:27,610
That should be fine.

1196
00:55:27,610 --> 00:55:31,230
And the key actor is
this king right here.

1197
00:55:31,230 --> 00:55:32,700
I've drawn it at
the intersection.

1198
00:55:32,700 --> 00:55:36,010
But it could be on the t
position or the f position.

1199
00:55:36,010 --> 00:55:38,145
t corresponds to
variables being said true.

1200
00:55:38,145 --> 00:55:40,410
f corresponds to the
variables being set false.

1201
00:55:40,410 --> 00:55:43,450
And so most of the game is going
to be all the players moving

1202
00:55:43,450 --> 00:55:45,276
their kings back and
forth between these t

1203
00:55:45,276 --> 00:55:46,540
and f positions.

1204
00:55:46,540 --> 00:55:47,915
Those will correspond
to flipping

1205
00:55:47,915 --> 00:55:50,530
a variable of your color.

1206
00:55:50,530 --> 00:55:54,460
Now, constantly you're
worrying about the threats.

1207
00:55:54,460 --> 00:55:59,460
These attack zones and
defend paths are the threats.

1208
00:55:59,460 --> 00:56:04,650
And if ever a
threat is satisfied,

1209
00:56:04,650 --> 00:56:05,730
somebody's going to win.

1210
00:56:05,730 --> 00:56:07,540
And the game will end.

1211
00:56:07,540 --> 00:56:11,970
So when that happens, players
in the variable position

1212
00:56:11,970 --> 00:56:15,570
can choose to activate a
variable of their color.

1213
00:56:15,570 --> 00:56:18,480
And the way you would
do that, a key rule

1214
00:56:18,480 --> 00:56:21,300
which you may have
forgotten about checkers,

1215
00:56:21,300 --> 00:56:24,490
is that if you can
capture you must capture.

1216
00:56:24,490 --> 00:56:26,640
So that's how we're going
to force the opponent

1217
00:56:26,640 --> 00:56:28,630
to do lots of things
we want them to do.

1218
00:56:28,630 --> 00:56:33,370
If we move this white token up
and to the right, then suddenly

1219
00:56:33,370 --> 00:56:35,090
this black token can capture.

1220
00:56:35,090 --> 00:56:39,401
And it must capture along the
unique path boom, boom, boom,

1221
00:56:39,401 --> 00:56:39,900
boom.

1222
00:56:39,900 --> 00:56:43,310
Assuming that we're
in the true position,

1223
00:56:43,310 --> 00:56:47,310
he must jump there, jump
there, jump there, and activate

1224
00:56:47,310 --> 00:56:49,019
some stuff down here.

1225
00:56:49,019 --> 00:56:50,810
Conversely, if we're
in the false position,

1226
00:56:50,810 --> 00:56:53,280
we're going to move this
B guy up and to the left.

1227
00:56:53,280 --> 00:56:56,240
And then, black token will have
to go off into this position.

1228
00:56:56,240 --> 00:56:59,050

1229
00:56:59,050 --> 00:57:01,200
So far so good.

1230
00:57:01,200 --> 00:57:06,220
Now, so this variable may occur
in several different clauses.

1231
00:57:06,220 --> 00:57:10,770
There's one clause that matters,
because this is a DNF thing.

1232
00:57:10,770 --> 00:57:14,030
We're just trying to prove that
one clause has been satisfied.

1233
00:57:14,030 --> 00:57:17,690
So white's going to want to
send things that satisfy it.

1234
00:57:17,690 --> 00:57:21,580
Black is going to want to
send its variables that

1235
00:57:21,580 --> 00:57:23,380
cause it to be not satisfied.

1236
00:57:23,380 --> 00:57:27,190
So there's going to be
some white variables

1237
00:57:27,190 --> 00:57:29,690
and some black variables
involved in this one clause.

1238
00:57:29,690 --> 00:57:33,400
But we need the ability to
send the copy of this variable

1239
00:57:33,400 --> 00:57:35,480
to the clause that matters.

1240
00:57:35,480 --> 00:57:38,790
So the threatening
player, white,

1241
00:57:38,790 --> 00:57:41,610
is going to be sending their
thing to a particular cause.

1242
00:57:41,610 --> 00:57:46,350
They do that using
this fork gadget.

1243
00:57:46,350 --> 00:57:47,930
So if you're coming
from up here,

1244
00:57:47,930 --> 00:57:52,160
you jump here, and jump here.

1245
00:57:52,160 --> 00:57:53,550
Black jumps here.

1246
00:57:53,550 --> 00:57:55,650
And that's the end
of black's turn.

1247
00:57:55,650 --> 00:57:58,780
Now, white is going to move
this position to either H or I,

1248
00:57:58,780 --> 00:58:02,440
forcing black to go
follow the next path.

1249
00:58:02,440 --> 00:58:04,519
So white's always in
control for this path.

1250
00:58:04,519 --> 00:58:06,310
There's going to be a
symmetric thing where

1251
00:58:06,310 --> 00:58:07,143
black is in control.

1252
00:58:07,143 --> 00:58:12,235
And black and send their token
to where they want it to go,

1253
00:58:12,235 --> 00:58:13,110
one of these squares.

1254
00:58:13,110 --> 00:58:16,680

1255
00:58:16,680 --> 00:58:18,660
Cool.

1256
00:58:18,660 --> 00:58:22,310
Now, maybe at this
point I should

1257
00:58:22,310 --> 00:58:28,280
mention that there are these
letters here, MWD and MBD.

1258
00:58:28,280 --> 00:58:31,340
And this is relevant to
the overall architecture

1259
00:58:31,340 --> 00:58:32,940
of the game.

1260
00:58:32,940 --> 00:58:37,260
What we're essentially trying
to do is get free moves.

1261
00:58:37,260 --> 00:58:39,790
Free moves will win
the game, because

1262
00:58:39,790 --> 00:58:41,650
of the spiral on the outside.

1263
00:58:41,650 --> 00:58:43,320
But before I get to
the spiral, here's

1264
00:58:43,320 --> 00:58:44,528
a way to generate free moves.

1265
00:58:44,528 --> 00:58:48,670
Suppose right here I'm going
to throw in a whole bunch--

1266
00:58:48,670 --> 00:58:51,770
think of infinity-- copies of
this gadget, so-called white

1267
00:58:51,770 --> 00:58:52,650
delay.

1268
00:58:52,650 --> 00:58:55,922
So black is forced to jump here
and just keeps going through.

1269
00:58:55,922 --> 00:58:57,130
There's no options for black.

1270
00:58:57,130 --> 00:58:58,820
It just has to keep going.

1271
00:58:58,820 --> 00:59:05,170
But after that move,
white has a penalty,

1272
00:59:05,170 --> 00:59:08,440
because white is forced
to capture that token.

1273
00:59:08,440 --> 00:59:11,189
So white essentially lost a
move sometime in the future.

1274
00:59:11,189 --> 00:59:13,230
As long as there are still
capture moves it's OK.

1275
00:59:13,230 --> 00:59:17,181
But that's kind
of bad for white.

1276
00:59:17,181 --> 00:59:18,930
And there's a symmetric
version for black.

1277
00:59:18,930 --> 00:59:21,990
I didn't bring the picture,
but it's pretty similar.

1278
00:59:21,990 --> 00:59:26,810
And black will be forced
afterwards to jump.

1279
00:59:26,810 --> 00:59:29,480
So the point is if we
essentially stopped

1280
00:59:29,480 --> 00:59:33,240
here, black would win actually.

1281
00:59:33,240 --> 00:59:34,940
Because there's
so many moves here

1282
00:59:34,940 --> 00:59:37,500
that white is forced
to waste, they'll

1283
00:59:37,500 --> 00:59:40,250
end up being able to win
the whole game in a way

1284
00:59:40,250 --> 00:59:42,130
that I will get to.

1285
00:59:42,130 --> 00:59:45,020
For that reason, you better
not trigger this thing

1286
00:59:45,020 --> 00:59:47,140
unless the king is
in the right spot.

1287
00:59:47,140 --> 00:59:51,150
Otherwise, black will stop
there and then black will win.

1288
00:59:51,150 --> 00:59:55,690
But there's a matching
MBD down here for black.

1289
00:59:55,690 --> 00:59:59,676
And so we're forced
to use both of them.

1290
00:59:59,676 --> 01:00:01,050
Then, they cancel
each other out.

1291
01:00:01,050 --> 01:00:03,310
Because if black
has n free moves

1292
01:00:03,310 --> 01:00:05,305
and white as n
free moves, they'll

1293
01:00:05,305 --> 01:00:08,650
just make all those captures
and then get back to the game.

1294
01:00:08,650 --> 01:00:12,000
So, in general, the
gadgets use these things

1295
01:00:12,000 --> 01:00:16,460
to force you to not stop in
the middle of the construction.

1296
01:00:16,460 --> 01:00:20,630
The heart of the matter is
this gadget, the clause.

1297
01:00:20,630 --> 01:00:22,890
So there's numbers here.

1298
01:00:22,890 --> 01:00:25,510
If you look closely, these
are 1's and then these are

1299
01:00:25,510 --> 01:00:29,650
2's and then these are 3's.

1300
01:00:29,650 --> 01:00:31,520
So the idea is let's
suppose that there

1301
01:00:31,520 --> 01:00:37,400
are three white variables
and two black variables

1302
01:00:37,400 --> 01:00:39,420
in this clause that
you can generalize.

1303
01:00:39,420 --> 01:00:41,370
That's what the figure shows.

1304
01:00:41,370 --> 01:00:43,810
So the idea is that first
white's trying to win.

1305
01:00:43,810 --> 01:00:46,700
So it's going to
send its variables

1306
01:00:46,700 --> 01:00:50,881
of the appropriate truth
assignment into the one clause.

1307
01:00:50,881 --> 01:00:52,380
It's going to
activate whichever one

1308
01:00:52,380 --> 01:00:55,450
happens to be glued to the
one clause first or the one

1309
01:00:55,450 --> 01:00:56,310
position.

1310
01:00:56,310 --> 01:00:59,160
And what will happen is the
white token will go here.

1311
01:00:59,160 --> 01:01:01,610
I forgot to mention
we've switched colors

1312
01:01:01,610 --> 01:01:02,699
from white to black.

1313
01:01:02,699 --> 01:01:04,240
That's because
there's a color change

1314
01:01:04,240 --> 01:01:06,698
gadget, where you can convert
white wires into black wires.

1315
01:01:06,698 --> 01:01:08,110
So don't worry about it.

1316
01:01:08,110 --> 01:01:10,610
So now we have a white token
that captures all these pieces.

1317
01:01:10,610 --> 01:01:12,235
Notice it captures
this one, which will

1318
01:01:12,235 --> 01:01:14,400
enable the two path next time.

1319
01:01:14,400 --> 01:01:15,840
So it is first you send in this.

1320
01:01:15,840 --> 01:01:18,400
It just stops,
nothing to do there.

1321
01:01:18,400 --> 01:01:19,910
Then, we send in the 2's.

1322
01:01:19,910 --> 01:01:21,490
And if this has
been done already,

1323
01:01:21,490 --> 01:01:24,200
so this is basically a
conjunction of 1 and 2.

1324
01:01:24,200 --> 01:01:28,000
2 will be able to get here
if and only if both 1 and 2

1325
01:01:28,000 --> 01:01:29,100
are set.

1326
01:01:29,100 --> 01:01:31,610
Also capture this position
and this position,

1327
01:01:31,610 --> 01:01:35,730
enabling both of these 3's.

1328
01:01:35,730 --> 01:01:38,510
Basically, we have two
copies of the 3 wire

1329
01:01:38,510 --> 01:01:42,030
just because the opponent
could mess things up

1330
01:01:42,030 --> 01:01:44,330
for us by moving one of these.

1331
01:01:44,330 --> 01:01:45,940
Black can move this over here.

1332
01:01:45,940 --> 01:01:47,830
And then, we're kind of annoyed.

1333
01:01:47,830 --> 01:01:49,510
But we have two
copies for redundancy.

1334
01:01:49,510 --> 01:01:53,950
So even if black messes up
one of them, we'll be OK.

1335
01:01:53,950 --> 01:01:57,380
The worry is after you activate
this thing black has a turn.

1336
01:01:57,380 --> 01:02:00,080
And so maybe instead of
doing something else, black

1337
01:02:00,080 --> 01:02:01,890
could just move this.

1338
01:02:01,890 --> 01:02:04,310
But we have enough redundancy.

1339
01:02:04,310 --> 01:02:05,500
That won't hurt us.

1340
01:02:05,500 --> 01:02:09,590
Finally, if we can send
1, 2, and 3 together,

1341
01:02:09,590 --> 01:02:13,680
then black will waste n moves.

1342
01:02:13,680 --> 01:02:15,190
And so white is in the lead.

1343
01:02:15,190 --> 01:02:16,940
And then, white will
win the game in a way

1344
01:02:16,940 --> 01:02:18,780
that I haven't shown you.

1345
01:02:18,780 --> 01:02:23,810
Conversely, black has a blocking
strategy, a defense strategy,

1346
01:02:23,810 --> 01:02:32,410
which is after 2 has
activated, if black

1347
01:02:32,410 --> 01:02:35,210
has either of these variable
set to the right value,

1348
01:02:35,210 --> 01:02:37,800
they can trigger them with a
corresponding black variable

1349
01:02:37,800 --> 01:02:38,520
gadget.

1350
01:02:38,520 --> 01:02:42,120
And then, the white
token will come up here

1351
01:02:42,120 --> 01:02:45,400
and hit this gadget MWD, which
is a whole bunch of these.

1352
01:02:45,400 --> 01:02:46,799
And then, white is behind.

1353
01:02:46,799 --> 01:02:48,340
And then, black will
immediately win.

1354
01:02:48,340 --> 01:02:53,792
Before white gets to do
this, black will win.

1355
01:02:53,792 --> 01:02:58,960
So overall structure make sense?

1356
01:02:58,960 --> 01:03:03,690
Basically, this gadget
is active as soon

1357
01:03:03,690 --> 01:03:07,000
as the white player
sends down the one thing

1358
01:03:07,000 --> 01:03:08,780
and then sends
down the two thing.

1359
01:03:08,780 --> 01:03:11,010
And then, if black happens
to have a response which

1360
01:03:11,010 --> 01:03:13,024
blocks it, what
that corresponds to

1361
01:03:13,024 --> 01:03:14,440
is that one of the
black variables

1362
01:03:14,440 --> 01:03:16,770
is in the wrong setting
for this clause.

1363
01:03:16,770 --> 01:03:19,290
Then, black will have a defense
strategy and win the game.

1364
01:03:19,290 --> 01:03:20,990
And so you only want
to activate a thing

1365
01:03:20,990 --> 01:03:23,198
if all the black variables
are in the correct setting

1366
01:03:23,198 --> 01:03:24,860
currently and the
white variables

1367
01:03:24,860 --> 01:03:27,500
in the correct setting, so you
could do the 1, 2, 3, and then

1368
01:03:27,500 --> 01:03:29,030
win.

1369
01:03:29,030 --> 01:03:31,860
And symmetrically, there are
things like this for black.

1370
01:03:31,860 --> 01:03:33,880
But that is the game.

1371
01:03:33,880 --> 01:03:35,470
Now, let me tell
you how once you

1372
01:03:35,470 --> 01:03:38,450
have n free moves, how
you could win the game.

1373
01:03:38,450 --> 01:03:40,970
This is the outer spiral.

1374
01:03:40,970 --> 01:03:42,470
So everything
we're talking about

1375
01:03:42,470 --> 01:03:46,030
was in here very far away from
the spiral, like n squared away

1376
01:03:46,030 --> 01:03:47,290
or something.

1377
01:03:47,290 --> 01:03:50,220
And the spiral in more
detail looks like this.

1378
01:03:50,220 --> 01:03:55,340
We have a whole bunch of kings,
and white king, black king.

1379
01:03:55,340 --> 01:03:57,505
And if you have a
bunch of free moves--

1380
01:03:57,505 --> 01:03:59,380
you don't actually need
very many free moves.

1381
01:03:59,380 --> 01:04:00,615
It's like five or something.

1382
01:04:00,615 --> 01:04:02,240
But they didn't feel
like computing it,

1383
01:04:02,240 --> 01:04:06,110
so they just called it x
and then figured out for x.

1384
01:04:06,110 --> 01:04:08,590
You can make a few moves
and get from this position

1385
01:04:08,590 --> 01:04:11,610
to this position.

1386
01:04:11,610 --> 01:04:13,280
So far so good.

1387
01:04:13,280 --> 01:04:14,650
Still have a free move.

1388
01:04:14,650 --> 01:04:21,270
Iam going to move this A
king to the B position.

1389
01:04:21,270 --> 01:04:23,097
At that point, black
has a forced jump.

1390
01:04:23,097 --> 01:04:24,680
Now, they may have
other forced jumps.

1391
01:04:24,680 --> 01:04:26,090
We'll just just sit
there and wait for them

1392
01:04:26,090 --> 01:04:27,640
to do all their forced jumps.

1393
01:04:27,640 --> 01:04:32,700
And then, black will have
to make this jump, capturing

1394
01:04:32,700 --> 01:04:34,127
one of these kings.

1395
01:04:34,127 --> 01:04:35,710
So this guy's basically
to prevent you

1396
01:04:35,710 --> 01:04:37,000
from jumping that way.

1397
01:04:37,000 --> 01:04:39,950
So this guy moves down, which
forces this guy to jump here.

1398
01:04:39,950 --> 01:04:42,360
And then, from here, you
can jump here, here, here,

1399
01:04:42,360 --> 01:04:44,140
here, here, so satisfying.

1400
01:04:44,140 --> 01:04:46,680
Take all the black
kings on the outside.

1401
01:04:46,680 --> 01:04:48,920
Now, you own the
entire spiral, which

1402
01:04:48,920 --> 01:04:50,940
is a huge number of things.

1403
01:04:50,940 --> 01:04:52,800
The number of
rings of the spiral

1404
01:04:52,800 --> 01:04:56,920
is greater than the
number of pieces in there.

1405
01:04:56,920 --> 01:05:00,570
And also, these things
are very far away.

1406
01:05:00,570 --> 01:05:03,320
So you have plenty of moves.

1407
01:05:03,320 --> 01:05:04,760
So whatever's
happening in here--

1408
01:05:04,760 --> 01:05:07,100
chaos could be
happening-- you can

1409
01:05:07,100 --> 01:05:11,550
rearrange the white spiral into
a bunch of white rectangles.

1410
01:05:11,550 --> 01:05:15,370
And it's already been shown
conveniently that if you have

1411
01:05:15,370 --> 01:05:19,705
n white rectangles
in this sense, less

1412
01:05:19,705 --> 01:05:23,120
or equal to n
pieces, then you win.

1413
01:05:23,120 --> 01:05:24,720
So it doesn't matter
what's in here.

1414
01:05:24,720 --> 01:05:26,740
You can come in
and use each ring

1415
01:05:26,740 --> 01:05:29,080
to destroy one black
token at a time.

1416
01:05:29,080 --> 01:05:31,080
And game over.

1417
01:05:31,080 --> 01:05:31,886
[LAUGHTER]

1418
01:05:31,886 --> 01:05:35,270
PROFESSOR: Isn't that fun?

1419
01:05:35,270 --> 01:05:37,500
So that's checkers
EXPTIME complete.

1420
01:05:37,500 --> 01:05:38,480
A very cool proof.

1421
01:05:38,480 --> 01:05:39,380
There are details I didn't show.

1422
01:05:39,380 --> 01:05:41,171
There's a parity shift,
a few other things.

1423
01:05:41,171 --> 01:05:43,960
But that's pretty
much everything.

1424
01:05:43,960 --> 01:05:45,560
And that's the power of G_3.

1425
01:05:45,560 --> 01:05:49,910

1426
01:05:49,910 --> 01:05:53,320
I'll just show
pictures for chess.

1427
01:05:53,320 --> 01:05:55,030
It's even more complicated.

1428
01:05:55,030 --> 01:05:58,810
But chess is also
EXPTIME complete.

1429
01:05:58,810 --> 01:06:00,710
Now, I mean, both
checkers and chess

1430
01:06:00,710 --> 01:06:03,370
in the real game sometimes
in some versions of the rules

1431
01:06:03,370 --> 01:06:06,030
it says you can make at
most 200 moves or 500

1432
01:06:06,030 --> 01:06:06,920
moves or something.

1433
01:06:06,920 --> 01:06:08,670
Those games are of
course PSPACE complete,

1434
01:06:08,670 --> 01:06:12,150
if you add an artificial
move bound of n or something.

1435
01:06:12,150 --> 01:06:13,900
But if you don't, the
natural game I think

1436
01:06:13,900 --> 01:06:15,733
is when you don't bound
the number of moves,

1437
01:06:15,733 --> 01:06:19,600
then they become
EXPTIME complete.

1438
01:06:19,600 --> 01:06:21,410
This is also from G_3.

1439
01:06:21,410 --> 01:06:23,180
That's I'll say about chess.

1440
01:06:23,180 --> 01:06:26,350
AUDIENCE: Do you know in
chess what pieces are used?

1441
01:06:26,350 --> 01:06:29,660
PROFESSOR: I think it's just
pawns and bishops, which

1442
01:06:29,660 --> 01:06:30,610
is pretty cool.

1443
01:06:30,610 --> 01:06:31,527
One of these figures--

1444
01:06:31,527 --> 01:06:32,068
AUDIENCE: Oh.

1445
01:06:32,068 --> 01:06:32,850
It's on the left.

1446
01:06:32,850 --> 01:06:33,040
PROFESSOR: Yeah.

1447
01:06:33,040 --> 01:06:35,165
White pawn, black pawn,
white bishop, black bishop.

1448
01:06:35,165 --> 01:06:37,460
I'm pretty sure
that's all of them.

1449
01:06:37,460 --> 01:06:39,770
But it's a little hard to
tell him from this figure.

1450
01:06:39,770 --> 01:06:42,061
I think you need a better
scan to know which are which.

1451
01:06:42,061 --> 01:06:45,000

1452
01:06:45,000 --> 01:06:45,500
And

1453
01:06:45,500 --> 01:06:49,270
This paper's a little hard to
find, but I got a scanned copy.

1454
01:06:49,270 --> 01:06:52,490
Go is EXPTIME hard.

1455
01:06:52,490 --> 01:06:55,931
So how many people know Go?

1456
01:06:55,931 --> 01:06:56,430
Good.

1457
01:06:56,430 --> 01:06:58,720
Almost everyone.

1458
01:06:58,720 --> 01:07:01,517
So Go is a little
funny, because you might

1459
01:07:01,517 --> 01:07:02,600
think it's a bounded game.

1460
01:07:02,600 --> 01:07:06,610
Every time you place a
token, you consume area.

1461
01:07:06,610 --> 01:07:13,750
But captures remove area, and
furthermore kos are the action.

1462
01:07:13,750 --> 01:07:18,000
So kos are these threats that
when I capture and someone else

1463
01:07:18,000 --> 01:07:19,957
can capture me back.

1464
01:07:19,957 --> 01:07:22,415
And you can flip back and forth
from those types of states.

1465
01:07:22,415 --> 01:07:25,760
There are actually
different rules for Go.

1466
01:07:25,760 --> 01:07:29,620
The Japanese rule set
says that you are not

1467
01:07:29,620 --> 01:07:33,080
allowed to repeat the
position you were just at.

1468
01:07:33,080 --> 01:07:35,540
And this is the
subtlety of a ko.

1469
01:07:35,540 --> 01:07:43,270

1470
01:07:43,270 --> 01:07:45,330
So this is the
canonical simplest ko.

1471
01:07:45,330 --> 01:07:50,300
So if you move white here,
you capture this stone.

1472
01:07:50,300 --> 01:07:51,800
And under Japanese
rules, you're not

1473
01:07:51,800 --> 01:07:53,520
allowed to repeat the
previous position, which

1474
01:07:53,520 --> 01:07:55,561
means you're not allowed
to immediately play back

1475
01:07:55,561 --> 01:07:56,744
here and capture this stone.

1476
01:07:56,744 --> 01:07:57,410
You can see why.

1477
01:07:57,410 --> 01:07:59,951
It'd be kind of a boring game
if you just went back and forth

1478
01:07:59,951 --> 01:08:01,010
capturing the same guy.

1479
01:08:01,010 --> 01:08:03,210
But as long as you
play anywhere else,

1480
01:08:03,210 --> 01:08:04,910
then you can come
back and capture.

1481
01:08:04,910 --> 01:08:06,069
That's the ko threat.

1482
01:08:06,069 --> 01:08:09,569

1483
01:08:09,569 --> 01:08:13,490
That game is in EXPTIME.

1484
01:08:13,490 --> 01:08:16,390
And Go is EXPTIME complete
under Japanese rules.

1485
01:08:16,390 --> 01:08:20,399

1486
01:08:20,399 --> 01:08:22,460
In some sense, because
the number of states

1487
01:08:22,460 --> 01:08:23,922
is still only
exponential, you just

1488
01:08:23,922 --> 01:08:25,880
need to remember the
current state and the very

1489
01:08:25,880 --> 01:08:26,640
previous state.

1490
01:08:26,640 --> 01:08:28,556
Because the ko rule is
that you're not allowed

1491
01:08:28,556 --> 01:08:31,090
to repeat the previous state.

1492
01:08:31,090 --> 01:08:33,867
In the USA and China, there
is something called a super ko

1493
01:08:33,867 --> 01:08:35,450
rule, which is that
you're not allowed

1494
01:08:35,450 --> 01:08:39,260
to repeat any previous
state of the game ever seen.

1495
01:08:39,260 --> 01:08:42,870
That means that you are not
necessarily still in EXPTIME,

1496
01:08:42,870 --> 01:08:45,560
because you might need to
remember all past states, which

1497
01:08:45,560 --> 01:08:47,380
could be exponentially long.

1498
01:08:47,380 --> 01:08:51,779
So it's like doubly
exponential size.

1499
01:08:51,779 --> 01:08:55,979
In general, you are in EXPSPACE.

1500
01:08:55,979 --> 01:09:00,960
And it's an open problem
whether Go with super ko

1501
01:09:00,960 --> 01:09:02,750
is EXPSPACE complete.

1502
01:09:02,750 --> 01:09:05,750
Currently, best known lower
bound is EXPTIME hardness.

1503
01:09:05,750 --> 01:09:08,370
I won't cover the gadgets here.

1504
01:09:08,370 --> 01:09:10,699
I mean, it's even more subtle,
because you can't really

1505
01:09:10,699 --> 01:09:11,240
be capturing.

1506
01:09:11,240 --> 01:09:13,479
It's all about ko threats.

1507
01:09:13,479 --> 01:09:15,351
Or you can't really
be adding pieces.

1508
01:09:15,351 --> 01:09:16,850
You have to constantly
be capturing,

1509
01:09:16,850 --> 01:09:18,330
because you must
conserve volume.

1510
01:09:18,330 --> 01:09:20,702
You're running for
exponential time.

1511
01:09:20,702 --> 01:09:22,660
It would be quite an
interesting game to watch.

1512
01:09:22,660 --> 01:09:25,670
But it's a reduction
I think from G_3 again.

1513
01:09:25,670 --> 01:09:30,439

1514
01:09:30,439 --> 01:09:31,840
That's Go.

1515
01:09:31,840 --> 01:09:34,980
Let me tell you a little
bit about constraint logic.

1516
01:09:34,980 --> 01:09:36,551
So we got a question.

1517
01:09:36,551 --> 01:09:37,217
AUDIENCE: Sorry.

1518
01:09:37,217 --> 01:09:38,800
I was just wondering
if you're allowed

1519
01:09:38,800 --> 01:09:42,190
to use superpolynomial
reductions for EXPTIME purpose.

1520
01:09:42,190 --> 01:09:44,365
PROFESSOR: So in
fact, all the proofs

1521
01:09:44,365 --> 01:09:47,780
I've seen in this world
use LOGSPACE, which is even

1522
01:09:47,780 --> 01:09:49,902
stronger than polynomial time.

1523
01:09:49,902 --> 01:09:50,610
I don't know why.

1524
01:09:50,610 --> 01:09:51,901
Probably just because they can.

1525
01:09:51,901 --> 01:09:53,070
And it's slightly better.

1526
01:09:53,070 --> 01:09:55,910
It makes sense to use LOGSPACE
reductions for PSPACE hardness.

1527
01:09:55,910 --> 01:09:58,310
But they ended up still
doing LOGSPACE reductions

1528
01:09:58,310 --> 01:09:59,670
for EXPTIME hardness.

1529
01:09:59,670 --> 01:10:02,720
For my purposes, I think
polynomial time would be fine.

1530
01:10:02,720 --> 01:10:04,740
You could imagine using
a little bit more time.

1531
01:10:04,740 --> 01:10:06,120
Definitely you don't want
to use exponential time,

1532
01:10:06,120 --> 01:10:07,994
because that wouldn't
preserve a lower bound.

1533
01:10:07,994 --> 01:10:10,300
But you could use
quasi-polynomial or polynomial

1534
01:10:10,300 --> 01:10:12,950
space or some crazy thing.

1535
01:10:12,950 --> 01:10:16,140
But all the claims
I've made don't even

1536
01:10:16,140 --> 01:10:18,145
need polynomial time reductions.

1537
01:10:18,145 --> 01:10:21,690
It's pretty strong.

1538
01:10:21,690 --> 01:10:22,572
Yeah.

1539
01:10:22,572 --> 01:10:27,580
AUDIENCE: That rule
confuses me a lot.

1540
01:10:27,580 --> 01:10:30,747
So that means I can't ever
go in the erased area?

1541
01:10:30,747 --> 01:10:31,580
PROFESSOR: Well, no.

1542
01:10:31,580 --> 01:10:36,440
You could play here as long
as something else changed.

1543
01:10:36,440 --> 01:10:39,590
You cannot repeat the
entire board configuration.

1544
01:10:39,590 --> 01:10:43,290
So the local
configuration can repeat.

1545
01:10:43,290 --> 01:10:45,160
So as long as something
else has changed,

1546
01:10:45,160 --> 01:10:46,427
then you can play here.

1547
01:10:46,427 --> 01:10:48,370
AUDIENCE: But then it's
the same rule, right?

1548
01:10:48,370 --> 01:10:49,620
PROFESSOR: It's the same rule.

1549
01:10:49,620 --> 01:10:53,004
But if you have five of
these, so in the ko rule,

1550
01:10:53,004 --> 01:10:54,670
as long as you're
basically playing them

1551
01:10:54,670 --> 01:10:56,950
in a different order, you
can keep playing around

1552
01:10:56,950 --> 01:10:58,970
and ko, ko, ko.

1553
01:10:58,970 --> 01:11:01,130
But in the super-ko
rule, at some point,

1554
01:11:01,130 --> 01:11:02,800
you're going to run
out of ko patterns.

1555
01:11:02,800 --> 01:11:05,577
And at some point, you won't
be able to repeat something.

1556
01:11:05,577 --> 01:11:07,160
And that changes how
the game behaves.

1557
01:11:07,160 --> 01:11:09,620
Of course, we don't have a
hardness proof for that case,

1558
01:11:09,620 --> 01:11:12,650
or a stronger hardness proof.

1559
01:11:12,650 --> 01:11:14,150
It's subtle.

1560
01:11:14,150 --> 01:11:16,560
Two-player constraint
logic unbounded

1561
01:11:16,560 --> 01:11:18,380
is also EXPTIME complete.

1562
01:11:18,380 --> 01:11:21,540
This is a reduction from G_6.

1563
01:11:21,540 --> 01:11:24,430
You can set one of your
variables however you want.

1564
01:11:24,430 --> 01:11:28,680
And player 1 is going to win
if we satisfy a CNF formula.

1565
01:11:28,680 --> 01:11:32,630
So the formula is out
here or here or here.

1566
01:11:32,630 --> 01:11:34,199
This is a white variable.

1567
01:11:34,199 --> 01:11:35,240
This is a black variable.

1568
01:11:35,240 --> 01:11:37,198
The only difference is
this edge is white here.

1569
01:11:37,198 --> 01:11:39,166
This edge is black there.

1570
01:11:39,166 --> 01:11:41,040
So the idea is this can
be set left to right.

1571
01:11:41,040 --> 01:11:43,100
If it's left, that
corresponds to false.

1572
01:11:43,100 --> 01:11:46,330
If it's to the right,
it corresponds to true.

1573
01:11:46,330 --> 01:11:48,340
And so most of the
time, players are just

1574
01:11:48,340 --> 01:11:50,930
going to be flipping their
edges back and forth.

1575
01:11:50,930 --> 01:11:52,300
It'd be a pretty boring game.

1576
01:11:52,300 --> 01:11:55,240
But at some point, there's
this constant threat network,

1577
01:11:55,240 --> 01:11:59,990
which is if the
formula is satisfied,

1578
01:11:59,990 --> 01:12:04,340
then the white player is
going to be able to win.

1579
01:12:04,340 --> 01:12:06,550
How do they win?

1580
01:12:06,550 --> 01:12:09,360
First thing they do
is lock a variable.

1581
01:12:09,360 --> 01:12:12,744
So this is pointing to the
true state-- sorry, also left

1582
01:12:12,744 --> 01:12:14,660
and right pictures are
symmetric, so symmetric

1583
01:12:14,660 --> 01:12:16,326
that we didn't even
draw it in the book.

1584
01:12:16,326 --> 01:12:19,800
So I reflected the image and
all the letters are backwards.

1585
01:12:19,800 --> 01:12:22,540
So let's say the variable's
pointing to the right.

1586
01:12:22,540 --> 01:12:25,560
So white is going to
lock the variable,

1587
01:12:25,560 --> 01:12:29,150
prevent it from flipping
anymore, by flipping this edge.

1588
01:12:29,150 --> 01:12:32,040
Now, we enter attack face.

1589
01:12:32,040 --> 01:12:33,350
And lots of things happen.

1590
01:12:33,350 --> 01:12:34,990
So this is a SPLIT gadget.

1591
01:12:34,990 --> 01:12:36,700
So immediately,
for example, black

1592
01:12:36,700 --> 01:12:38,880
could flip here and
start winning the game.

1593
01:12:38,880 --> 01:12:40,670
There's a long path here.

1594
01:12:40,670 --> 01:12:42,600
It's slow, so it's a long path.

1595
01:12:42,600 --> 01:12:45,030
But eventually black
will win the game.

1596
01:12:45,030 --> 01:12:47,420
The timer starts
ticking now potentially,

1597
01:12:47,420 --> 01:12:49,730
if black chooses to
follow that path.

1598
01:12:49,730 --> 01:12:52,770
Simultaneously, white is
going to flip this guy,

1599
01:12:52,770 --> 01:12:54,520
then flip this guy,
and then flip this guy

1600
01:12:54,520 --> 01:12:57,950
and activate the formula.

1601
01:12:57,950 --> 01:13:01,580
Now, it's a little
awkward, because we

1602
01:13:01,580 --> 01:13:06,630
needed 1, 2, 3, 4 moves
to trigger the formula.

1603
01:13:06,630 --> 01:13:09,745
We basically want to
consume four moves of black

1604
01:13:09,745 --> 01:13:11,640
so that things remain balanced.

1605
01:13:11,640 --> 01:13:16,180
And that's this
1, 2, 3, 4 flips.

1606
01:13:16,180 --> 01:13:20,120
If black does not
flip all these edges,

1607
01:13:20,120 --> 01:13:23,310
then white can flip this
and then flip this and then

1608
01:13:23,310 --> 01:13:25,670
flip this and then
instantly win.

1609
01:13:25,670 --> 01:13:27,730
That's the fast win track.

1610
01:13:27,730 --> 01:13:30,754
So to prevent that, black
must flip this edge.

1611
01:13:30,754 --> 01:13:32,920
It can't flip this edge
until it's flipped this one.

1612
01:13:32,920 --> 01:13:35,045
It can't flip this one
until it's flipped this one.

1613
01:13:35,045 --> 01:13:37,330
So as soon as you
lock a variable,

1614
01:13:37,330 --> 01:13:41,160
black must respond
with A. At that point,

1615
01:13:41,160 --> 01:13:43,210
white can afford to flip here.

1616
01:13:43,210 --> 01:13:46,070
And black must respond
with B. And then flip here,

1617
01:13:46,070 --> 01:13:48,590
black must respond with
C. And then flip here,

1618
01:13:48,590 --> 01:13:53,170
black must respond-- I guess,
flip here first and then

1619
01:13:53,170 --> 01:13:55,910
flip B. And then you can
activate the formula.

1620
01:13:55,910 --> 01:13:58,950
So then white and black
are balanced again.

1621
01:13:58,950 --> 01:14:02,690
What's cool about that is it
means white cannot only lock

1622
01:14:02,690 --> 01:14:05,430
this variable but lock
all of the variables.

1623
01:14:05,430 --> 01:14:07,310
Every variable
behaves the same way.

1624
01:14:07,310 --> 01:14:10,340
And the goal for white is to
get all the variables locked

1625
01:14:10,340 --> 01:14:12,900
so it can start
triggering the formula.

1626
01:14:12,900 --> 01:14:16,340
So every time you
lock a variable,

1627
01:14:16,340 --> 01:14:19,590
black is forced to respond
in a particular way.

1628
01:14:19,590 --> 01:14:24,020
And so after that, white can
lock the next variable, both

1629
01:14:24,020 --> 01:14:26,740
the white ones and the black
ones, locks all of them.

1630
01:14:26,740 --> 01:14:29,170
And now, the formula's
basically primed, ready to go.

1631
01:14:29,170 --> 01:14:30,652
The variables can't
change anymore.

1632
01:14:30,652 --> 01:14:32,110
And now, we're in
full attack mode.

1633
01:14:32,110 --> 01:14:35,991

1634
01:14:35,991 --> 01:14:36,490
Cool.

1635
01:14:36,490 --> 01:14:39,720
And then, the formula happens.

1636
01:14:39,720 --> 01:14:43,110
Meanwhile, this slow win is
probably happening, fusing.

1637
01:14:43,110 --> 01:14:48,130
And we set up the formula
so that if it's satisfied,

1638
01:14:48,130 --> 01:14:52,610
you end up flipping the win edge
in a certain amount of time.

1639
01:14:52,610 --> 01:14:54,020
And this is slightly longer.

1640
01:14:54,020 --> 01:14:56,030
So if you don't end up
satisfying the formula,

1641
01:14:56,030 --> 01:14:56,600
black wins.

1642
01:14:56,600 --> 01:14:58,100
And then, it was
not a valid threat.

1643
01:14:58,100 --> 01:15:02,700
You shouldn't have
triggered this attack mode.

1644
01:15:02,700 --> 01:15:05,780
There's another threat
here, the slower win.

1645
01:15:05,780 --> 01:15:09,670

1646
01:15:09,670 --> 01:15:12,370
So I assume that people
were flipping these edges.

1647
01:15:12,370 --> 01:15:15,270
But it could be actually
black flips A early.

1648
01:15:15,270 --> 01:15:17,340
If it does that, then
white will eventually

1649
01:15:17,340 --> 01:15:18,480
win through that path.

1650
01:15:18,480 --> 01:15:21,600
So this win path is just
to prevent A from flipping

1651
01:15:21,600 --> 01:15:23,790
before it's locked.

1652
01:15:23,790 --> 01:15:25,530
And the timing is
to setup right.

1653
01:15:25,530 --> 01:15:27,120
Obviously, lots of
timing issues here,

1654
01:15:27,120 --> 01:15:30,590
so we have to build an
equalizer gadget that ends up

1655
01:15:30,590 --> 01:15:33,265
slowing down the traversal
of an edge basically

1656
01:15:33,265 --> 01:15:34,200
in a particular way.

1657
01:15:34,200 --> 01:15:37,180
And these are all of
the vertices need.

1658
01:15:37,180 --> 01:15:41,069
It's a fair number, including
some white and black edges,

1659
01:15:41,069 --> 01:15:42,360
which is a little bit annoying.

1660
01:15:42,360 --> 01:15:44,470
It'd be nice to simplify
instead of gadgets.

1661
01:15:44,470 --> 01:15:48,590
But that's the best
we have so far.

1662
01:15:48,590 --> 01:15:53,900
And you can use the regular
NCL crossover appropriately,

1663
01:15:53,900 --> 01:15:57,770
making everything else slower
so that crossover doesn't

1664
01:15:57,770 --> 01:16:01,110
slow things down too much.

1665
01:16:01,110 --> 01:16:02,280
Cool.

1666
01:16:02,280 --> 01:16:04,380
A couple more minutes.

1667
01:16:04,380 --> 01:16:06,430
I want to mention
a couple of games

1668
01:16:06,430 --> 01:16:09,960
that do not fit into the table.

1669
01:16:09,960 --> 01:16:11,980
In some sense, they are
higher than the table.

1670
01:16:11,980 --> 01:16:14,470
So we have polynomial
bounded number of moves.

1671
01:16:14,470 --> 01:16:19,260
And then, above that, we have
exponential number of moves.

1672
01:16:19,260 --> 01:16:21,890
But if you take those
exponential number of moves

1673
01:16:21,890 --> 01:16:30,920
and add an extra rule, so this
is entirely motivated by Go

1674
01:16:30,920 --> 01:16:33,250
with super-ko rule.

1675
01:16:33,250 --> 01:16:36,690
And you take any of these
games like G_1 through G_6.

1676
01:16:36,690 --> 01:16:40,050

1677
01:16:40,050 --> 01:16:42,340
So you have the same win rule.

1678
01:16:42,340 --> 01:16:44,867
But in addition you will lose
if you ever repeat a past game

1679
01:16:44,867 --> 01:16:45,450
configuration.

1680
01:16:45,450 --> 01:16:48,070
So it's forbidden to do that.

1681
01:16:48,070 --> 01:16:53,570
Then, Robson, same guy who
proved Go is EXPTIME hard,

1682
01:16:53,570 --> 01:16:56,820
proved that G_1, G_2, and
G_3, and chess and checkers

1683
01:16:56,820 --> 01:17:01,210
become EXPSPACE
complete, which is cool.

1684
01:17:01,210 --> 01:17:03,620
That's a little harder.

1685
01:17:03,620 --> 01:17:05,230
And it makes sense
they're in EXPSPACE

1686
01:17:05,230 --> 01:17:08,920
because it can sort of walk
the graph in exponential space.

1687
01:17:08,920 --> 01:17:12,600
But they actually
become that hard.

1688
01:17:12,600 --> 01:17:15,680
And even crazier
to me is this rule.

1689
01:17:15,680 --> 01:17:17,665
It seems almost the same.

1690
01:17:17,665 --> 01:17:20,040
So we're going to have two
extra variables x and y, which

1691
01:17:20,040 --> 01:17:22,160
can appear in the formula.

1692
01:17:22,160 --> 01:17:24,180
And instead of
this lose rule, we

1693
01:17:24,180 --> 01:17:27,950
add this lose rule which is
if you ever repeat a past game

1694
01:17:27,950 --> 01:17:31,840
configuration-- and between
now and that past configuration

1695
01:17:31,840 --> 01:17:36,000
at most one of x and y have
changed and that in turn-- then

1696
01:17:36,000 --> 01:17:37,267
you lose.

1697
01:17:37,267 --> 01:17:38,850
So if both of them
get changed, you're

1698
01:17:38,850 --> 01:17:41,182
allowed to repeat it again.

1699
01:17:41,182 --> 01:17:43,640
I don't have a great intuition
why this makes the game even

1700
01:17:43,640 --> 01:17:47,050
harder, but it pushes it
up to the next level which

1701
01:17:47,050 --> 01:17:50,140
is doubly exponential time.

1702
01:17:50,140 --> 01:17:51,660
AUDIENCE: This is
changed and changed

1703
01:17:51,660 --> 01:17:55,060
back because it's a
repeat configuration?

1704
01:17:55,060 --> 01:17:57,580
PROFESSOR: Well, right.

1705
01:17:57,580 --> 01:18:00,610
One of them will
have changed, x or y.

1706
01:18:00,610 --> 01:18:01,992
Hm.

1707
01:18:01,992 --> 01:18:03,450
You're repeating
the configuration.

1708
01:18:03,450 --> 01:18:05,860
So you changed something--
it be some other variable z--

1709
01:18:05,860 --> 01:18:06,860
and then change it back.

1710
01:18:06,860 --> 01:18:09,300
As long as you didn't
also change both x and y,

1711
01:18:09,300 --> 01:18:10,524
that's considered invalid.

1712
01:18:10,524 --> 01:18:12,940
Once you change x and y, you
are free to repeat everything

1713
01:18:12,940 --> 01:18:17,980
again, until the next time
something gets repeated.

1714
01:18:17,980 --> 01:18:20,200
So I guess you have
to keep track of when

1715
01:18:20,200 --> 01:18:21,370
the x and y changes are.

1716
01:18:21,370 --> 01:18:24,390
So it's even harder to know
the history of the game,

1717
01:18:24,390 --> 01:18:26,739
which repeats are valid
and which are invalid.

1718
01:18:26,739 --> 01:18:28,280
In this case, all
that he could prove

1719
01:18:28,280 --> 01:18:32,000
is the G_1 becomes doubly
exponential time.

1720
01:18:32,000 --> 01:18:35,001

1721
01:18:35,001 --> 01:18:35,500
Cool.

1722
01:18:35,500 --> 01:18:38,310

1723
01:18:38,310 --> 01:18:41,050
I could say a little more.

1724
01:18:41,050 --> 01:18:46,210
In this world, it's probably
good to know this fun fact.

1725
01:18:46,210 --> 01:18:48,460
Normally, when we think
of non-determinism,

1726
01:18:48,460 --> 01:18:50,880
we think of an NP.

1727
01:18:50,880 --> 01:18:53,260
We have existential
quantifiers on the guesses.

1728
01:18:53,260 --> 01:18:56,050
If there's at least one branch
that works, then we're happy.

1729
01:18:56,050 --> 01:18:57,550
Then, we return, yes.

1730
01:18:57,550 --> 01:19:01,150
You could also think of
universal quantifiers, where

1731
01:19:01,150 --> 01:19:04,660
if all of the paths going out
of here end up with yes, then

1732
01:19:04,660 --> 01:19:05,490
we're happy.

1733
01:19:05,490 --> 01:19:09,020
You can also think of an
alternating guess machine,

1734
01:19:09,020 --> 01:19:14,610
or alternating lucky machine,
where every other time

1735
01:19:14,610 --> 01:19:18,270
it's an existential guess
branch and the opposite times

1736
01:19:18,270 --> 01:19:20,970
it's a universal guess branch.

1737
01:19:20,970 --> 01:19:23,330
That corresponds to two-player
games in a natural way.

1738
01:19:23,330 --> 01:19:29,330

1739
01:19:29,330 --> 01:19:36,900
Alternating polynomial time
thing corresponds to QSAT.

1740
01:19:36,900 --> 01:19:40,310
So that would give you PSPACE.

1741
01:19:40,310 --> 01:19:43,610
Alternating polynomial time
gives you polynomial space.

1742
01:19:43,610 --> 01:19:46,990
Alternating polynomial space
gives you exponential time.

1743
01:19:46,990 --> 01:19:49,795
Alternating exponential time
gives you exponential space.

1744
01:19:49,795 --> 01:19:51,420
Alternating exponential
space gives you

1745
01:19:51,420 --> 01:19:53,240
doubly exponential time.

1746
01:19:53,240 --> 01:19:55,080
So in fact, this
result is stated

1747
01:19:55,080 --> 01:19:57,790
as alternating exponential
space complete,

1748
01:19:57,790 --> 01:19:59,810
which is the same as
doubly exponential time.

1749
01:19:59,810 --> 01:20:03,820
So time and space are
interleaved in the natural way.

1750
01:20:03,820 --> 01:20:05,580
And if you add
alternation to one layer,

1751
01:20:05,580 --> 01:20:07,390
you get to the next layer.

1752
01:20:07,390 --> 01:20:09,350
So it's just fun facts.

1753
01:20:09,350 --> 01:20:11,760
And it's useful for
reasoning about these games.

1754
01:20:11,760 --> 01:20:14,130
One more class.

1755
01:20:14,130 --> 01:20:16,620
We've so far talked about
perfect information games,

1756
01:20:16,620 --> 01:20:19,530
where everybody knows all the
states of all the variables.

1757
01:20:19,530 --> 01:20:21,090
You can define a
private information

1758
01:20:21,090 --> 01:20:23,822
game, where you can
see some but not

1759
01:20:23,822 --> 01:20:25,030
all of your opponent's state.

1760
01:20:25,030 --> 01:20:27,550
You know all of your
variable settings.

1761
01:20:27,550 --> 01:20:30,289
In this setting, a slight
variation on G_1 and G_2.

1762
01:20:30,289 --> 01:20:32,330
We have to generalize the
formula's a little bit,

1763
01:20:32,330 --> 01:20:34,990
become doubly exponential
time complete, just as hard

1764
01:20:34,990 --> 01:20:38,010
as the weird repeat rule.

1765
01:20:38,010 --> 01:20:42,130
Private information gives
you a very hard thing.

1766
01:20:42,130 --> 01:20:45,560
A more restricted form is when
player 1 can't see anything

1767
01:20:45,560 --> 01:20:46,340
about player 2.

1768
01:20:46,340 --> 01:20:48,680
But player 2 can see a
little bit of player 1.

1769
01:20:48,680 --> 01:20:51,080
This is sort of a
semi-blind game.

1770
01:20:51,080 --> 01:20:54,930
In this case, G_2 at least is
exponential space complete.

1771
01:20:54,930 --> 01:20:57,390
That's weaker than here.

1772
01:20:57,390 --> 01:21:00,860
So lots of weird
separations here.

1773
01:21:00,860 --> 01:21:03,460
There are no well-known
games in these categories

1774
01:21:03,460 --> 01:21:05,762
that have been proofed hard.

1775
01:21:05,762 --> 01:21:07,095
But here is the version of Peek.

1776
01:21:07,095 --> 01:21:09,634
You can redesign
the Peek structure.

1777
01:21:09,634 --> 01:21:10,800
So you have some walls here.

1778
01:21:10,800 --> 01:21:13,800
So you can't see whether this
guy's in or this guy's out.

1779
01:21:13,800 --> 01:21:16,079
Player 0 can only
play on these guys.

1780
01:21:16,079 --> 01:21:17,620
Player 1 can only
plan on these guys.

1781
01:21:17,620 --> 01:21:19,350
Player 1 can see
all of this state,

1782
01:21:19,350 --> 01:21:20,580
a little bit of the state.

1783
01:21:20,580 --> 01:21:23,680
In the blind version, you can't
see anything to the right.

1784
01:21:23,680 --> 01:21:27,340
And because they
couldn't do G_4, this

1785
01:21:27,340 --> 01:21:34,050
is the G_2 version, which is
there's also a wall here.

1786
01:21:34,050 --> 01:21:36,157
And you can only see
red through these holes.

1787
01:21:36,157 --> 01:21:38,240
And your opponent can see
red through these holes.

1788
01:21:38,240 --> 01:21:40,500
So you've got two
different win conditions.

1789
01:21:40,500 --> 01:21:41,570
That's G_2.

1790
01:21:41,570 --> 01:21:45,600
And so that's a version of Peek.

1791
01:21:45,600 --> 01:21:47,400
This one is doubly
exponential time

1792
01:21:47,400 --> 01:21:49,130
hard and complete.

1793
01:21:49,130 --> 01:21:52,600
And this one is
exponential space complete.

1794
01:21:52,600 --> 01:21:57,540
So these are like
way in the deep end.

1795
01:21:57,540 --> 01:22:01,634
But next class we'll talk
about this category of team

1796
01:22:01,634 --> 01:22:02,800
imperfect information games.

1797
01:22:02,800 --> 01:22:04,430
And then, we even
get undecidability,

1798
01:22:04,430 --> 01:22:07,570
which is the ultimate hardness.

1799
01:22:07,570 --> 01:22:09,690
But that's all for today.

